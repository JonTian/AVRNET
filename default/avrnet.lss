
avrnet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002daa  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00002daa  00002e5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008000ea  008000ea  00002ee8  2**0
                  ALLOC
  3 .eeprom       0000000b  00810000  00810000  00002ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000378  00000000  00000000  00002ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000071  00000000  00000000  0000326c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000180  00000000  00000000  000032dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000083f  00000000  00000000  0000345d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000057cc  00000000  00000000  00003c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001900  00000000  00000000  00009468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002e72  00000000  00000000  0000ad68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000004e0  00000000  00000000  0000dbdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000099f  00000000  00000000  0000e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002082  00000000  00000000  0000ea5b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 03 	jmp	0x756	; 0x756 <__ctors_end>
       4:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
       8:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
       c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      10:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      14:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      18:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      1c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      20:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      24:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      28:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      2c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      30:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      34:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      38:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      3c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      40:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      44:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      48:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      4c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>
      50:	0c 94 c8 03 	jmp	0x790	; 0x790 <__bad_interrupt>

00000054 <version>:
      54:	41 56 52 6e 65 74 20 56 31 2e 31 00                 AVRnet V1.1.

00000060 <web_title>:
      60:	41 56 52 6e 65 74 20 56 31 2e 31 20 62 79 20 41     AVRnet V1.1 by A
      70:	56 52 70 6f 72 74 61 6c 2e 63 6f 6d 00              VRportal.com.

0000007d <tag_br>:
      7d:	3c 62 72 3e 00                                      <br>.

00000082 <tag_hr>:
      82:	3c 68 72 20 77 69 64 74 68 3d 22 31 30 30 25 22     <hr width="100%"
      92:	20 73 69 7a 65 3d 22 31 22 3e 3c 62 72 3e 00         size="1"><br>.

000000a1 <tag_form>:
      a1:	3c 66 6f 72 6d 20 61 63 74 69 6f 6e 3d 22 2e 2f     <form action="./
      b1:	3f 22 20 6d 65 74 68 6f 64 3d 22 67 65 74 22 3e     ?" method="get">
	...

000000c2 <__c.2522>:
      c2:	3c 61 20 68 72 65 66 3d 22 2e 2f 22 3e 3c 62 3e     <a href="./"><b>
      d2:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 23 30 30     <font color="#00
      e2:	30 30 39 39 22 20 73 69 7a 65 3d 22 2b 31 22 3e     0099" size="+1">
      f2:	52 65 66 72 65 73 68 3c 2f 66 6f 6e 74 3e 3c 2f     Refresh</font></
     102:	62 3e 3c 2f 61 3e 00                                b></a>.

00000109 <__c.2520>:
     109:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     119:	6d 69 74 22 20 76 61 6c 75 65 3d 22 57 72 69 74     mit" value="Writ
     129:	65 20 4c 43 44 22 3e 3c 2f 66 6f 72 6d 3e 00        e LCD"></form>.

00000138 <__c.2518>:
     138:	3c 69 6e 70 75 74 20 6e 61 6d 65 3d 22 6c 63 64     <input name="lcd
     148:	32 22 20 74 79 70 65 3d 22 74 65 78 74 22 20 73     2" type="text" s
     158:	69 7a 65 3d 22 31 36 22 20 6d 61 78 6c 65 6e 67     ize="16" maxleng
     168:	74 68 3d 22 31 36 22 3e 20 4c 43 44 20 4c 69 6e     th="16"> LCD Lin
     178:	65 20 32 3c 62 72 3e 00                             e 2<br>.

00000180 <__c.2516>:
     180:	3c 69 6e 70 75 74 20 6e 61 6d 65 3d 22 6c 63 64     <input name="lcd
     190:	31 22 20 74 79 70 65 3d 22 74 65 78 74 22 20 73     1" type="text" s
     1a0:	69 7a 65 3d 22 31 36 22 20 6d 61 78 6c 65 6e 67     ize="16" maxleng
     1b0:	74 68 3d 22 31 36 22 3e 20 4c 43 44 20 4c 69 6e     th="16"> LCD Lin
     1c0:	65 20 31 3c 62 72 3e 00                             e 1<br>.

000001c8 <__c.2514>:
     1c8:	22 3e 20 3c 69 6e 70 75 74 20 74 79 70 65 3d 22     "> <input type="
     1d8:	73 75 62 6d 69 74 22 20 76 61 6c 75 65 3d 22 53     submit" value="S
     1e8:	65 72 76 65 72 20 49 50 22 3e 3c 2f 66 6f 72 6d     erver IP"></form
     1f8:	3e 00                                               >.

000001fa <__c.2512>:
     1fa:	3c 69 6e 70 75 74 20 6e 61 6d 65 3d 22 73 69 70     <input name="sip
     20a:	22 20 74 79 70 65 3d 22 74 65 78 74 22 20 73 69     " type="text" si
     21a:	7a 65 3d 22 31 35 22 20 6d 61 78 6c 65 6e 67 74     ze="15" maxlengt
     22a:	68 3d 22 31 35 22 20 76 61 6c 75 65 3d 22 00        h="15" value=".

00000239 <__c.2510>:
     239:	22 3e 20 3c 69 6e 70 75 74 20 74 79 70 65 3d 22     "> <input type="
     249:	73 75 62 6d 69 74 22 20 76 61 6c 75 65 3d 22 41     submit" value="A
     259:	56 52 20 49 50 22 3e 3c 2f 66 6f 72 6d 3e 00        VR IP"></form>.

00000268 <__c.2508>:
     268:	3c 69 6e 70 75 74 20 6e 61 6d 65 3d 22 61 69 70     <input name="aip
     278:	22 20 74 79 70 65 3d 22 74 65 78 74 22 20 73 69     " type="text" si
     288:	7a 65 3d 22 31 35 22 20 6d 61 78 6c 65 6e 67 74     ze="15" maxlengt
     298:	68 3d 22 31 35 22 20 76 61 6c 75 65 3d 22 00        h="15" value=".

000002a7 <__c.2506>:
     2a7:	22 3e 20 4d 69 6e 75 74 65 73 3c 69 6e 70 75 74     "> Minutes<input
     2b7:	20 74 79 70 65 3d 22 73 75 62 6d 69 74 22 20 76      type="submit" v
     2c7:	61 6c 75 65 3d 22 4f 4b 22 3e 3c 2f 66 6f 72 6d     alue="OK"></form
     2d7:	3e 00                                               >.

000002d9 <__c.2504>:
     2d9:	22 3e 20 48 6f 75 72 73 20 3c 49 4e 50 55 54 20     "> Hours <INPUT 
     2e9:	54 59 50 45 3d 22 74 65 78 74 22 20 4e 41 4d 45     TYPE="text" NAME
     2f9:	3d 22 6d 22 20 73 69 7a 65 3d 22 32 22 20 6d 61     ="m" size="2" ma
     309:	78 6c 65 6e 67 74 68 3d 22 32 22 20 56 41 4c 55     xlength="2" VALU
     319:	45 3d 22 00                                         E=".

0000031d <__c.2502>:
     31d:	3c 49 4e 50 55 54 20 54 59 50 45 3d 22 74 65 78     <INPUT TYPE="tex
     32d:	74 22 20 4e 41 4d 45 3d 22 68 22 20 73 69 7a 65     t" NAME="h" size
     33d:	3d 22 32 22 20 6d 61 78 6c 65 6e 67 74 68 3d 22     ="2" maxlength="
     34d:	32 22 20 56 41 4c 55 45 3d 22 00                    2" VALUE=".

00000358 <__c.2500>:
     358:	3e 20 45 6e 61 62 6c 65 20 00                       > Enable .

00000362 <__c.2498>:
     362:	43 48 45 43 4b 45 44 00                             CHECKED.

0000036a <__c.2496>:
     36a:	3c 49 4e 50 55 54 20 54 59 50 45 3d 22 68 69 64     <INPUT TYPE="hid
     37a:	64 65 6e 22 20 4e 41 4d 45 3d 22 74 63 22 20 56     den" NAME="tc" V
     38a:	41 4c 55 45 3d 22 31 22 3e 53 65 6e 64 20 54 65     ALUE="1">Send Te
     39a:	6d 70 61 72 61 74 75 72 65 20 69 6e 20 3c 49 4e     mparature in <IN
     3aa:	50 55 54 20 54 59 50 45 3d 22 63 68 65 63 6b 62     PUT TYPE="checkb
     3ba:	6f 78 22 20 4e 41 4d 45 3d 22 65 6e 22 00           ox" NAME="en".

000003c8 <__c.2494>:
     3c8:	26 64 65 67 3b 43 3c 62 72 3e 00                    &deg;C<br>.

000003d3 <__c.2492>:
     3d3:	3c 62 72 3e 3c 62 72 3e 54 65 6d 70 61 72 61 74     <br><br>Temparat
     3e3:	75 72 65 20 3d 20 00                                ure = .

000003ea <__c.2490>:
     3ea:	41 43 44 30 20 3d 20 00                             ACD0 = .

000003f2 <__c.2488>:
     3f2:	3c 2f 61 3e 20 5d 3c 62 72 3e 3c 62 72 3e 00        </a> ]<br><br>.

00000401 <__c.2486>:
     401:	30 22 3e 4f 46 46 00                                0">OFF.

00000408 <__c.2484>:
     408:	31 22 3e 4f 4e 00                                   1">ON.

0000040e <__c.2482>:
     40e:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     41e:	66 3d 22 2e 2f 3f 6c 32 3d 00                       f="./?l2=.

00000428 <__c.2480>:
     428:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     438:	6e 3e 4f 4e 00                                      n>ON.

0000043d <__c.2478>:
     43d:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     44d:	4f 46 46 00                                         OFF.

00000451 <__c.2476>:
     451:	3c 2f 61 3e 20 5d 2c 20 4c 45 44 20 32 20 3a 20     </a> ], LED 2 : 
	...

00000462 <__c.2474>:
     462:	30 22 3e 4f 46 46 00                                0">OFF.

00000469 <__c.2472>:
     469:	31 22 3e 4f 4e 00                                   1">ON.

0000046f <__c.2470>:
     46f:	3c 2f 66 6f 6e 74 3e 20 5b 20 3c 61 20 68 72 65     </font> [ <a hre
     47f:	66 3d 22 2e 2f 3f 6c 31 3d 00                       f="./?l1=.

00000489 <__c.2468>:
     489:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 67 72 65 65     <font color=gree
     499:	6e 3e 4f 4e 00                                      n>ON.

0000049e <__c.2466>:
     49e:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 72 65 64 3e     <font color=red>
     4ae:	4f 46 46 00                                         OFF.

000004b2 <__c.2464>:
     4b2:	4c 45 44 20 31 20 3a 20 00                          LED 1 : .

000004bb <__c.2462>:
     4bb:	3c 2f 66 6f 6e 74 3e 3c 2f 62 3e 3c 2f 61 3e 3c     </font></b></a><
     4cb:	62 72 3e 00                                         br>.

000004cf <__c.2460>:
     4cf:	3c 61 20 68 72 65 66 3d 22 68 74 74 70 3a 2f 2f     <a href="http://
     4df:	77 77 77 2e 61 76 72 70 6f 72 74 61 6c 2e 63 6f     www.avrportal.co
     4ef:	6d 2f 22 20 74 61 72 67 65 74 3d 22 5f 62 6c 61     m/" target="_bla
     4ff:	6e 6b 22 3e 3c 62 3e 3c 66 6f 6e 74 20 63 6f 6c     nk"><b><font col
     50f:	6f 72 3d 22 23 30 30 30 30 39 39 22 20 73 69 7a     or="#000099" siz
     51f:	65 3d 22 2b 31 22 3e 00                             e="+1">.

00000527 <__c.2458>:
     527:	3c 2f 74 69 74 6c 65 3e 00                          </title>.

00000530 <__c.2456>:
     530:	3c 74 69 74 6c 65 3e 00                             <title>.

00000538 <__c.2454>:
     538:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     548:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     558:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

00000565 <__c.2433>:
     565:	43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 6b 65 65 70     Connection: keep
     575:	2d 61 6c 69 76 65 0d 0a 0d 0a 00                    -alive.....

00000580 <__c.2431>:
     580:	4b 65 65 70 2d 41 6c 69 76 65 3a 20 33 30 30 0d     Keep-Alive: 300.
     590:	0a 00                                               ..

00000592 <__c.2429>:
     592:	41 63 63 65 70 74 3a 20 74 65 78 74 2f 68 74 6d     Accept: text/htm
     5a2:	6c 0d 0a 00                                         l...

000005a6 <__c.2427>:
     5a6:	55 73 65 72 2d 41 67 65 6e 74 3a 20 41 56 52 20     User-Agent: AVR 
     5b6:	65 74 68 65 72 6e 65 74 0d 0a 00                    ethernet...

000005c1 <__c.2425>:
     5c1:	48 6f 73 74 3a 20 31 30 2e 31 2e 31 2e 37 36 0d     Host: 10.1.1.76.
     5d1:	0a 00                                               ..

000005d3 <__c.2423>:
     5d3:	20 48 54 54 50 2f 31 2e 30 0d 0a 00                  HTTP/1.0...

000005df <__c.2421>:
     5df:	47 45 54 20 2f 61 76 72 6e 65 74 2f 73 61 76 65     GET /avrnet/save
     5ef:	2e 70 68 70 3f 70 77 64 3d 73 65 63 72 65 74 26     .php?pwd=secret&
     5ff:	74 65 6d 70 3d 00                                   temp=.

00000605 <__c.2270>:
     605:	6d 00                                               m.

00000607 <__c.2268>:
     607:	68 00                                               h.

00000609 <__c.2266>:
     609:	65 6e 00                                            en.

0000060c <__c.2264>:
     60c:	74 63 00                                            tc.

0000060f <__c.2262>:
     60f:	6c 63 64 32 00                                      lcd2.

00000614 <__c.2260>:
     614:	6c 63 64 31 00                                      lcd1.

00000619 <__c.2258>:
     619:	6c 32 00                                            l2.

0000061c <__c.2256>:
     61c:	6c 31 00                                            l1.

0000061f <__c.2254>:
     61f:	73 69 70 00                                         sip.

00000623 <__c.2252>:
     623:	61 69 70 00                                         aip.

00000627 <setting_cursor_max>:
     627:	04 04 04                                            ...

0000062a <count_time_max>:
     62a:	02 3c 3c 18                                         .<<.

0000062e <str_enable>:
     62e:	45 6e 61 62 6c 65 00                                Enable.

00000635 <str_disable>:
     635:	44 69 73 61 62 6c 65 00                             Disable.

0000063d <__c.2455>:
     63d:	4e 6f 74 20 66 6f 75 6e 64 2e 00                    Not found..

00000648 <__c.2453>:
     648:	50 69 6e 67 20 4f 4b 2e 00                          Ping OK..

00000651 <temp_list>:
     651:	e5 00 ef 00 f9 00 03 01 0e 01 18 01 23 01 2e 01     ............#...
     661:	39 01 44 01 4f 01 5b 01 66 01 72 01 7e 01 8a 01     9.D.O.[.f.r.~...
     671:	95 01 a1 01 ad 01 b9 01 c5 01 d1 01 dd 01 e9 01     ................
     681:	f4 01 00 02 0c 02 17 02 23 02 2e 02 39 02 44 02     ........#...9.D.
     691:	4f 02 5a 02 65 02 6f 02 79 02 84 02 8e 02 97 02     O.Z.e.o.y.......
     6a1:	a1 02 aa 02 b4 02 bd 02 c6 02 ce 02 d7 02 df 02     ................
     6b1:	e7 02 ef 02 f7 02 fe 02 06 03 0d 03 14 03 1b 03     ................
     6c1:	21 03 28 03 2e 03 34 03 3a 03 40 03 45 03 4b 03     !.(...4.:.@.E.K.
     6d1:	50 03 55 03 5a 03 5f 03 63 03 68 03 6c 03 71 03     P.U.Z._.c.h.l.q.
     6e1:	75 03 79 03 7d 03 81 03 84 03 88 03 8b 03 8f 03     u.y.}...........
     6f1:	92 03 95 03 98 03 9b 03 9e 03 a1 03 a3 03 a6 03     ................
     701:	a8 03 ab 03 ad 03 b0 03 b2 03 b4 03 b6 03 b8 03     ................
     711:	ba 03 bc 03 be 03 c0 03                             ........

00000719 <__c.2352>:
     719:	45 52 52 4f 52 0d 0a 00                             ERROR...

00000721 <__c.2350>:
     721:	59 00                                               Y.

00000723 <__c.2348>:
     723:	53 4c 4f 4b 0d 0a 00                                SLOK...

0000072a <__c.2344>:
     72a:	57 4c 4f 4b 0d 0a 00                                WLOK...

00000731 <__c.2331>:
     731:	53 49 4f 4b 0d 0a 00                                SIOK...

00000738 <__c.2320>:
     738:	53 54 4f 4b 0d 0a 00                                STOK...

0000073f <__c.2318>:
     73f:	3b 0d 0a 00                                         ;...

00000743 <__c.2316>:
     743:	3b 00                                               ;.

00000745 <__c.2314>:
     745:	30 00                                               0.

00000747 <__c.2312>:
     747:	31 00                                               1.

00000749 <__c.2310>:
     749:	30 00                                               0.

0000074b <__c.2308>:
     74b:	31 00                                               1.

0000074d <__c.2306>:
     74d:	30 00                                               0.

0000074f <__c.2304>:
     74f:	31 00                                               1.

00000751 <__c.2302>:
     751:	47 41 4f 4b 00                                      GAOK.

00000756 <__ctors_end>:
     756:	11 24       	eor	r1, r1
     758:	1f be       	out	0x3f, r1	; 63
     75a:	cf e5       	ldi	r28, 0x5F	; 95
     75c:	d8 e0       	ldi	r29, 0x08	; 8
     75e:	de bf       	out	0x3e, r29	; 62
     760:	cd bf       	out	0x3d, r28	; 61

00000762 <__do_copy_data>:
     762:	10 e0       	ldi	r17, 0x00	; 0
     764:	a0 e6       	ldi	r26, 0x60	; 96
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	ea ea       	ldi	r30, 0xAA	; 170
     76a:	fd e2       	ldi	r31, 0x2D	; 45
     76c:	02 c0       	rjmp	.+4      	; 0x772 <.do_copy_data_start>

0000076e <.do_copy_data_loop>:
     76e:	05 90       	lpm	r0, Z+
     770:	0d 92       	st	X+, r0

00000772 <.do_copy_data_start>:
     772:	aa 3e       	cpi	r26, 0xEA	; 234
     774:	b1 07       	cpc	r27, r17
     776:	d9 f7       	brne	.-10     	; 0x76e <.do_copy_data_loop>

00000778 <__do_clear_bss>:
     778:	11 e0       	ldi	r17, 0x01	; 1
     77a:	aa ee       	ldi	r26, 0xEA	; 234
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	01 c0       	rjmp	.+2      	; 0x782 <.do_clear_bss_start>

00000780 <.do_clear_bss_loop>:
     780:	1d 92       	st	X+, r1

00000782 <.do_clear_bss_start>:
     782:	a2 32       	cpi	r26, 0x22	; 34
     784:	b1 07       	cpc	r27, r17
     786:	e1 f7       	brne	.-8      	; 0x780 <.do_clear_bss_loop>
     788:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <main>
     78c:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <_exit>

00000790 <__bad_interrupt>:
     790:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000794 <enc28j60ReadOp>:
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
BYTE enc28j60ReadOp(BYTE op, BYTE address)
{
     794:	c4 98       	cbi	0x18, 4	; 24
	// activate CS
	CSACTIVE;
	// issue read command
	SPDR = op | (address & ADDR_MASK);
     796:	96 2f       	mov	r25, r22
     798:	9f 71       	andi	r25, 0x1F	; 31
     79a:	98 2b       	or	r25, r24
     79c:	9f b9       	out	0x0f, r25	; 15
	waitspi();
     79e:	77 9b       	sbis	0x0e, 7	; 14
     7a0:	fe cf       	rjmp	.-4      	; 0x79e <enc28j60ReadOp+0xa>
	// read data
	SPDR = 0x00;
     7a2:	1f b8       	out	0x0f, r1	; 15
	waitspi();
     7a4:	77 9b       	sbis	0x0e, 7	; 14
     7a6:	fe cf       	rjmp	.-4      	; 0x7a4 <enc28j60ReadOp+0x10>
	// do dummy read if needed (for mac and mii, see datasheet page 29)
	if(address & 0x80)
     7a8:	67 ff       	sbrs	r22, 7
     7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <enc28j60ReadOp+0x1e>
	{
		SPDR = 0x00;
     7ac:	1f b8       	out	0x0f, r1	; 15
		waitspi();
     7ae:	77 9b       	sbis	0x0e, 7	; 14
     7b0:	fe cf       	rjmp	.-4      	; 0x7ae <enc28j60ReadOp+0x1a>
	}
	// release CS
	CSPASSIVE;
     7b2:	c4 9a       	sbi	0x18, 4	; 24
	return(SPDR);
     7b4:	8f b1       	in	r24, 0x0f	; 15
}
     7b6:	99 27       	eor	r25, r25
     7b8:	08 95       	ret

000007ba <enc28j60WriteOp>:
//*******************************************************************************************
//
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60WriteOp(BYTE op, BYTE address, BYTE data)
{
     7ba:	c4 98       	cbi	0x18, 4	; 24
	CSACTIVE;
	// issue write command
	SPDR = op | (address & ADDR_MASK);
     7bc:	6f 71       	andi	r22, 0x1F	; 31
     7be:	68 2b       	or	r22, r24
     7c0:	6f b9       	out	0x0f, r22	; 15
	waitspi();
     7c2:	77 9b       	sbis	0x0e, 7	; 14
     7c4:	fe cf       	rjmp	.-4      	; 0x7c2 <enc28j60WriteOp+0x8>
	// write data
	SPDR = data;
     7c6:	4f b9       	out	0x0f, r20	; 15
	waitspi();
     7c8:	77 9b       	sbis	0x0e, 7	; 14
     7ca:	fe cf       	rjmp	.-4      	; 0x7c8 <enc28j60WriteOp+0xe>
	CSPASSIVE;
     7cc:	c4 9a       	sbi	0x18, 4	; 24
     7ce:	08 95       	ret

000007d0 <enc28j60SetBank>:
}
//*******************************************************************************************
//
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60SetBank(BYTE address)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	18 2f       	mov	r17, r24
	// set the bank (if needed)
	if((address & BANK_MASK) != Enc28j60Bank)
     7d8:	c8 2f       	mov	r28, r24
     7da:	dd 27       	eor	r29, r29
     7dc:	c0 76       	andi	r28, 0x60	; 96
     7de:	d0 70       	andi	r29, 0x00	; 0
     7e0:	80 91 ea 00 	lds	r24, 0x00EA
     7e4:	99 27       	eor	r25, r25
     7e6:	c8 17       	cp	r28, r24
     7e8:	d9 07       	cpc	r29, r25
     7ea:	91 f0       	breq	.+36     	; 0x810 <enc28j60SetBank+0x40>
	{
		// set the bank
		enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
     7ec:	43 e0       	ldi	r20, 0x03	; 3
     7ee:	6f e1       	ldi	r22, 0x1F	; 31
     7f0:	80 ea       	ldi	r24, 0xA0	; 160
     7f2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enc28j60WriteOp>
		enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	d5 95       	asr	r29
     7fa:	c7 95       	ror	r28
     7fc:	8a 95       	dec	r24
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <enc28j60SetBank+0x28>
     800:	4c 2f       	mov	r20, r28
     802:	6f e1       	ldi	r22, 0x1F	; 31
     804:	80 e8       	ldi	r24, 0x80	; 128
     806:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enc28j60WriteOp>
		Enc28j60Bank = (address & BANK_MASK);
     80a:	10 76       	andi	r17, 0x60	; 96
     80c:	10 93 ea 00 	sts	0x00EA, r17
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	08 95       	ret

00000818 <enc28j60Read>:
	}
}
//*******************************************************************************************
//
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
BYTE enc28j60Read(BYTE address)
{
     818:	1f 93       	push	r17
     81a:	18 2f       	mov	r17, r24
	// select bank to read
	enc28j60SetBank(address);
     81c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <enc28j60SetBank>
	
	// do the read
	return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     820:	61 2f       	mov	r22, r17
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 ca 03 	call	0x794	; 0x794 <enc28j60ReadOp>
}
     828:	99 27       	eor	r25, r25
     82a:	1f 91       	pop	r17
     82c:	08 95       	ret

0000082e <enc28j60Write>:
//*******************************************************************************************
//
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60Write(BYTE address, BYTE data)
{
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	08 2f       	mov	r16, r24
     834:	16 2f       	mov	r17, r22
	// select bank to write
	enc28j60SetBank(address);
     836:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <enc28j60SetBank>

	// do the write
	enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
     83a:	41 2f       	mov	r20, r17
     83c:	60 2f       	mov	r22, r16
     83e:	80 e4       	ldi	r24, 0x40	; 64
     840:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enc28j60WriteOp>
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <enc28j60_read_phyreg>:
}
//*******************************************************************************************
//
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
WORD enc28j60_read_phyreg(BYTE address)
{
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
	WORD data;
	
	// set the PHY register address
	enc28j60Write(MIREGADR, address);
     84e:	68 2f       	mov	r22, r24
     850:	84 ed       	ldi	r24, 0xD4	; 212
     852:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	82 ed       	ldi	r24, 0xD2	; 210
     85a:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
	
	// Loop to wait until the PHY register has been read through the MII
	// This requires 10.24us
	while( (enc28j60Read(MISTAT) & MISTAT_BUSY) );
     85e:	8a ee       	ldi	r24, 0xEA	; 234
     860:	0e 94 0c 04 	call	0x818	; 0x818 <enc28j60Read>
     864:	80 fd       	sbrc	r24, 0
     866:	fb cf       	rjmp	.-10     	; 0x85e <enc28j60_read_phyreg+0x14>
	
	// Stop reading
	enc28j60Write(MICMD, MICMD_MIIRD);
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	82 ed       	ldi	r24, 0xD2	; 210
     86c:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
	
	// Obtain results and return
	data = enc28j60Read ( MIRDL );
     870:	88 ed       	ldi	r24, 0xD8	; 216
     872:	0e 94 0c 04 	call	0x818	; 0x818 <enc28j60Read>
     876:	08 2f       	mov	r16, r24
     878:	11 27       	eor	r17, r17
	data |= enc28j60Read ( MIRDH );
     87a:	89 ed       	ldi	r24, 0xD9	; 217
     87c:	0e 94 0c 04 	call	0x818	; 0x818 <enc28j60Read>
     880:	99 27       	eor	r25, r25

	return data;
}
     882:	80 2b       	or	r24, r16
     884:	91 2b       	or	r25, r17
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	08 95       	ret

0000088c <enc28j60PhyWrite>:
//*******************************************************************************************
//
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void enc28j60PhyWrite(BYTE address, WORD_BYTES data)
{
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	8b 01       	movw	r16, r22
	// set the PHY register address
	enc28j60Write(MIREGADR, address);
     892:	68 2f       	mov	r22, r24
     894:	84 ed       	ldi	r24, 0xD4	; 212
     896:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
	// write the PHY data
	enc28j60Write(MIWRL, data.byte.low);
     89a:	60 2f       	mov	r22, r16
     89c:	86 ed       	ldi	r24, 0xD6	; 214
     89e:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
	enc28j60Write(MIWRH, data.byte.high);
     8a2:	61 2f       	mov	r22, r17
     8a4:	87 ed       	ldi	r24, 0xD7	; 215
     8a6:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <enc28j60PhyWrite+0x26>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8ac:	80 e5       	ldi	r24, 0x50	; 80
     8ae:	8a 95       	dec	r24
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <enc28j60PhyWrite+0x22>
	// wait until the PHY write completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY)
     8b2:	8a ee       	ldi	r24, 0xEA	; 234
     8b4:	0e 94 0c 04 	call	0x818	; 0x818 <enc28j60Read>
     8b8:	80 fd       	sbrc	r24, 0
     8ba:	f8 cf       	rjmp	.-16     	; 0x8ac <enc28j60PhyWrite+0x20>
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <enc28j60getrev>:
	{
		_delay_us(15);
	}
}
//*******************************************************************************************
//
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
/*
void enc28j60_init( BYTE *avr_mac)
{
	// initialize I/O
	//DDRB |= _BV( DDB4 );
	//CSPASSIVE;

	// enable PB0, reset as output /
	ENC28J60_DDR |= _BV(ENC28J60_RESET_PIN_DDR);

	// enable PD2/INT0, as input /
	ENC28J60_DDR &= ~_BV(ENC28J60_INT_PIN_DDR);

	// set output to gnd, reset the ethernet chip /
	ENC28J60_PORT &= ~_BV(ENC28J60_RESET_PIN);
	_delay_ms(10);
	// set output to Vcc, reset inactive /
	ENC28J60_PORT |= _BV(ENC28J60_RESET_PIN);
	_delay_ms(200);

	//initialize enc28j60/
	//enc28j60Init( avr_mac );
	//_delay_ms( 20 );


	DDRB  |= _BV( DDB4 ) | _BV( DDB5 ) | _BV( DDB7 ); // mosi, sck, ss output
	//DDRB &= ~_BV( DDB6 ); // MISO is input

	CSPASSIVE;
	PORTB &= ~(_BV( PB5 ) | _BV( PB7 ) );

	// initialize SPI interface
	// master mode and Fosc/2 clock:
	SPCR = _BV( SPE ) | _BV( MSTR );
	SPSR |= _BV( SPI2X );

	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
	_delay_ms(50);

	// check CLKRDY bit to see if reset is complete
	// The CLKRDY does not work. See Rev. B4 Silicon Errata point. Just wait.
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	next_packet_ptr.word = RXSTART_INIT;
	// Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
	// do bank 1 stuff, packet filter:
	// For broadcast packets we allow only ARP packtets
	// All other packets should be unicast only for our mac (MAADR)
	//
	// The pattern to match on is therefore
	// Type     ETH.DST
	// ARP      BROADCAST
	// 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
	// in binary these poitions are:11 0000 0011 1111
	// This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
	enc28j60Write(EPMM0, 0x3f);
	enc28j60Write(EPMM1, 0x30);
	enc28j60Write(EPMCSL, 0xf9);
	enc28j60Write(EPMCSH, 0xf7);
	
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
	// bring MAC out of reset
	//enc28j60Write(MACON2, 0x00);
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
	enc28j60Write(MAIPGH, 0x0C);
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
	// Set the maximum packet size which the controller will accept
	// Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
	// do bank 3 stuff
	// write MAC address
	// NOTE: MAC address in ENC28J60 is byte-backward
	// ENC28J60 is big-endian avr gcc is little-endian
	enc28j60Write(MAADR5, avr_mac[0]);
	enc28j60Write(MAADR4, avr_mac[1]);
	enc28j60Write(MAADR3, avr_mac[2]);
	enc28j60Write(MAADR2, avr_mac[3]);
	enc28j60Write(MAADR1, avr_mac[4]);
	enc28j60Write(MAADR0, avr_mac[5]);
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, (WORD_BYTES){PHCON2_HDLDIS});
	// switch to bank 0
	enc28j60SetBank(ECON1);
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);

	// Magjack leds configuration, see enc28j60 datasheet, page 11 /
	// LEDB=yellow LEDA=green
	//
	// 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	// enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
	enc28j60PhyWrite(PHLCON,(WORD_BYTES){0x0472});
	// set LED B to display recieve and transmit activate
	//enc28j60PhyWrite( PHLCON, 0x0476 );

	//enc28j60_flag.rx_buffer_is_free = 1;
	_delay_ms(20);
}
*/
void enc28j60_init( BYTE *avr_mac)
{
	// initialize I/O
	//DDRB |= _BV( DDB4 );
	//CSPASSIVE;

	// enable PB0, reset as output 
	ENC28J60_DDR |= _BV(ENC28J60_RESET_PIN_DDR);

	// enable PD2/INT0, as input
	ENC28J60_DDR &= ~_BV(ENC28J60_INT_PIN_DDR);
	ENC28J60_PORT |= _BV(ENC28J60_INT_PIN);

	// set output to gnd, reset the ethernet chip
	ENC28J60_PORT &= ~_BV(ENC28J60_RESET_PIN);
	_delay_ms(10);

	// set output to Vcc, reset inactive
	ENC28J60_PORT |= _BV(ENC28J60_RESET_PIN);
	_delay_ms(200);

    //	
	DDRB  |= _BV( DDB4 ) | _BV( DDB5 ) | _BV( DDB7 ); // mosi, sck, ss output
	//DDRB &= ~_BV( DDB6 ); // MISO is input

	CSPASSIVE;
	PORTB &= ~(_BV( PB5 ) | _BV( PB7 ) );
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
    SPCR = _BV( SPE ) | _BV( MSTR );
    SPSR |= _BV( SPI2X );

	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
	_delay_ms(50);

	// check CLKRDY bit to see if reset is complete
	// The CLKRDY does not work. See Rev. B4 Silicon Errata point. Just wait.
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	next_packet_ptr.word = RXSTART_INIT;
    // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);

	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
	
	// bring MAC out of reset
	//enc28j60Write(MACON2, 0x00);

	// enable automatic padding to 60bytes and CRC operations
	enc28j60Write(MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);

	// Allow infinite deferals if the medium is continuously busy 
    // (do not time out a transmission if the half duplex medium is 
    // completely saturated with other people's data)
    enc28j60Write(MACON4, MACON4_DEFER);

	// Late collisions occur beyond 63+8 bytes (8 bytes for preamble/start of frame delimiter)
	// 55 is all that is needed for IEEE 802.3, but ENC28J60 B5 errata for improper link pulse 
	// collisions will occur less often with a larger number.
    enc28j60Write(MACLCON2, 63);
	
	// Set non-back-to-back inter-packet gap to 9.6us.  The back-to-back 
	// inter-packet gap (MABBIPG) is set by MACSetDuplex() which is called 
	// later.
	enc28j60Write(MAIPGL, 0x12);
	enc28j60Write(MAIPGH, 0x0C);
	
	// Set the maximum packet size which the controller will accept
    // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
	
	// do bank 3 stuff
    // write MAC address
	// NOTE: MAC address in ENC28J60 is byte-backward
	// ENC28J60 is big-endian avr gcc is little-endian
	enc28j60Write(MAADR5, avr_mac[0]);
	enc28j60Write(MAADR4, avr_mac[1]);
	enc28j60Write(MAADR3, avr_mac[2]);
	enc28j60Write(MAADR2, avr_mac[3]);
	enc28j60Write(MAADR1, avr_mac[4]);
	enc28j60Write(MAADR0, avr_mac[5]);
	
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, (WORD_BYTES){PHCON2_HDLDIS});
	
	// Magjack leds configuration, see enc28j60 datasheet, page 11
	// 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	// enc28j60PhyWrite(PHLCON,0b0000 0100 0111 00 10);
	enc28j60PhyWrite(PHLCON,(WORD_BYTES){0x0472});

	// do bank 1 stuff, packet filter:
	// For broadcast packets we allow only ARP packtets
	// All other packets should be unicast only for our mac (MAADR)
	//
	// The pattern to match on is therefore
	// Type     ETH.DST
	// ARP      BROADCAST
 	// 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
	// in binary these poitions are:11 0000 0011 1111
	// This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
	enc28j60Write(EPMM0, 0x3f);
	enc28j60Write(EPMM1, 0x30);
	enc28j60Write(EPMCSL, 0xf9);
	enc28j60Write(EPMCSH, 0xf7);

	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
	
	// switch to bank 0
	enc28j60SetBank(ECON1);

	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);

	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);

	_delay_ms(20);
}
//*******************************************************************************************
//
// Function : enc28j60getrev
// Description : read the revision of the chip.
//
//*******************************************************************************************
BYTE enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
}
//*******************************************************************************************
//
// Function : enc28j60_packet_send
// Description : Send packet to network.
//
//*******************************************************************************************
void enc28j60_packet_send ( BYTE *buffer, WORD length )
{
	//Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, LOW(TXSTART_INIT) );
     8c2:	82 e7       	ldi	r24, 0x72	; 114
     8c4:	0e 94 0c 04 	call	0x818	; 0x818 <enc28j60Read>
	enc28j60Write(EWRPTH, HIGH(TXSTART_INIT) );

     8c8:	99 27       	eor	r25, r25
     8ca:	08 95       	ret

000008cc <enc28j60_packet_send>:
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, LOW((TXSTART_INIT+length)) );
	enc28j60Write(ETXNDH, HIGH((TXSTART_INIT+length)) );

	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);

	CSACTIVE;
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	8c 01       	movw	r16, r24
     8d6:	eb 01       	movw	r28, r22
	// issue write command
	SPDR = ENC28J60_WRITE_BUF_MEM;
     8d8:	64 e2       	ldi	r22, 0x24	; 36
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
	waitspi();
     8e0:	6a e1       	ldi	r22, 0x1A	; 26
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
	while(length)
	{
		length--;
     8e8:	ce 01       	movw	r24, r28
     8ea:	8c 5d       	subi	r24, 0xDC	; 220
     8ec:	68 2f       	mov	r22, r24
     8ee:	86 e0       	ldi	r24, 0x06	; 6
     8f0:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
		// write data
     8f4:	cc 5d       	subi	r28, 0xDC	; 220
     8f6:	d5 4e       	sbci	r29, 0xE5	; 229
     8f8:	6d 2f       	mov	r22, r29
     8fa:	77 27       	eor	r23, r23
     8fc:	c4 52       	subi	r28, 0x24	; 36
     8fe:	da 41       	sbci	r29, 0x1A	; 26
     900:	87 e0       	ldi	r24, 0x07	; 7
     902:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
		SPDR = *buffer++;
		waitspi();
	}
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	8a e7       	ldi	r24, 0x7A	; 122
     90c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enc28j60WriteOp>
	CSPASSIVE;
	
     910:	c4 98       	cbi	0x18, 4	; 24
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     912:	8a e7       	ldi	r24, 0x7A	; 122
     914:	8f b9       	out	0x0f, r24	; 15

     916:	77 99       	sbic	0x0e, 7	; 14
     918:	09 c0       	rjmp	.+18     	; 0x92c <enc28j60_packet_send+0x60>
     91a:	fd cf       	rjmp	.-6      	; 0x916 <enc28j60_packet_send+0x4a>
	// Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) )
	{
     91c:	21 97       	sbiw	r28, 0x01	; 1
		enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
	}
     91e:	f8 01       	movw	r30, r16
     920:	80 81       	ld	r24, Z
     922:	8f b9       	out	0x0f, r24	; 15
}
     924:	77 9b       	sbis	0x0e, 7	; 14
     926:	fe cf       	rjmp	.-4      	; 0x924 <enc28j60_packet_send+0x58>
     928:	0f 5f       	subi	r16, 0xFF	; 255
     92a:	1f 4f       	sbci	r17, 0xFF	; 255
     92c:	20 97       	sbiw	r28, 0x00	; 0
     92e:	b1 f7       	brne	.-20     	; 0x91c <enc28j60_packet_send+0x50>
//*******************************************************************************************
//
     930:	c4 9a       	sbi	0x18, 4	; 24
// Function : enc28j60_mac_is_linked
// Description : return MAC link status.
//
     932:	48 e0       	ldi	r20, 0x08	; 8
     934:	6f e1       	ldi	r22, 0x1F	; 31
     936:	80 e8       	ldi	r24, 0x80	; 128
     938:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enc28j60WriteOp>
//*******************************************************************************************
/*
BYTE enc28j60_mac_is_linked(void)
     93c:	8c e1       	ldi	r24, 0x1C	; 28
     93e:	0e 94 0c 04 	call	0x818	; 0x818 <enc28j60Read>
     942:	81 ff       	sbrs	r24, 1
     944:	05 c0       	rjmp	.+10     	; 0x950 <enc28j60_packet_send+0x84>
{
	if ( (enc28j60_read_phyreg(PHSTAT1) & PHSTAT1_LLSTAT ) )
     946:	48 e0       	ldi	r20, 0x08	; 8
     948:	6f e1       	ldi	r22, 0x1F	; 31
     94a:	80 ea       	ldi	r24, 0xA0	; 160
     94c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enc28j60WriteOp>
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	08 95       	ret

0000095a <enc28j60_packet_receive>:
		return 1;
	else
		return 0;
}
*/
//*******************************************************************************************
//
// Function : enc28j60_packet_receive
// Description : check received packet and return length of data
//
//*******************************************************************************************
//WORD data_length;
WORD enc28j60_packet_receive ( BYTE *rxtx_buffer, WORD max_length )
{
	WORD_BYTES rx_status, data_length;
	
	// check if a packet has been received and buffered
	// if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
	// The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) == 0 )
	{
		return 0;
	}

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, next_packet_ptr.bytes[0]);
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	6c 01       	movw	r12, r24
     96e:	7b 01       	movw	r14, r22
	enc28j60Write(ERDPTH, next_packet_ptr.bytes[1]);

	// read the next packet pointer
	next_packet_ptr.bytes[0] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	next_packet_ptr.bytes[1] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);

     970:	89 e3       	ldi	r24, 0x39	; 57
     972:	0e 94 0c 04 	call	0x818	; 0x818 <enc28j60Read>
     976:	88 23       	and	r24, r24
     978:	19 f4       	brne	.+6      	; 0x980 <enc28j60_packet_receive+0x26>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	5a c0       	rjmp	.+180    	; 0xa34 <enc28j60_packet_receive+0xda>
	// read the packet length (see datasheet page 43)
	data_length.bytes[0] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	data_length.bytes[1] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	data_length.word -=4; //remove the CRC count
	
	// read the receive status (see datasheet page 43)
     980:	60 91 eb 00 	lds	r22, 0x00EB
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
	rx_status.bytes[0] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     98a:	60 91 ec 00 	lds	r22, 0x00EC
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
	rx_status.bytes[1] = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	
	if ( data_length.word > (max_length-1) )
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	8a e3       	ldi	r24, 0x3A	; 58
     998:	0e 94 ca 03 	call	0x794	; 0x794 <enc28j60ReadOp>
     99c:	80 93 eb 00 	sts	0x00EB, r24
	{
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	8a e3       	ldi	r24, 0x3A	; 58
     9a4:	0e 94 ca 03 	call	0x794	; 0x794 <enc28j60ReadOp>
     9a8:	b8 2e       	mov	r11, r24
     9aa:	80 93 ec 00 	sts	0x00EC, r24
		data_length.word = max_length-1;
	}
	
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	8a e3       	ldi	r24, 0x3A	; 58
     9b2:	0e 94 ca 03 	call	0x794	; 0x794 <enc28j60ReadOp>
     9b6:	c8 2f       	mov	r28, r24
	// check CRC and symbol errors (see datasheet page 44, table 7-3):
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	8a e3       	ldi	r24, 0x3A	; 58
     9bc:	0e 94 ca 03 	call	0x794	; 0x794 <enc28j60ReadOp>
     9c0:	d8 2f       	mov	r29, r24
	// The ERXFCON.CRCEN is set by default. Normally we should not
     9c2:	24 97       	sbiw	r28, 0x04	; 4
	// need to check this.
	if ( (rx_status.word & 0x80)==0 )
	{
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	8a e3       	ldi	r24, 0x3A	; 58
     9c8:	0e 94 ca 03 	call	0x794	; 0x794 <enc28j60ReadOp>
     9cc:	08 2f       	mov	r16, r24
		// invalid
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	8a e3       	ldi	r24, 0x3A	; 58
     9d2:	0e 94 ca 03 	call	0x794	; 0x794 <enc28j60ReadOp>
		data_length.word = 0;
	}
     9d6:	b7 01       	movw	r22, r14
     9d8:	61 50       	subi	r22, 0x01	; 1
     9da:	70 40       	sbci	r23, 0x00	; 0
     9dc:	6c 17       	cp	r22, r28
     9de:	7d 07       	cpc	r23, r29
     9e0:	08 f4       	brcc	.+2      	; 0x9e4 <enc28j60_packet_receive+0x8a>
	else
	{
     9e2:	eb 01       	movw	r28, r22
		// read data from rx buffer and save to rxtx_buffer
		rx_status.word = data_length.word;
		CSACTIVE;
		// issue read command
		SPDR = ENC28J60_READ_BUF_MEM;
		waitspi();
     9e4:	07 fd       	sbrc	r16, 7
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <enc28j60_packet_receive+0x94>
		while(rx_status.word)
		{
			rx_status.word--;
     9e8:	c0 e0       	ldi	r28, 0x00	; 0
     9ea:	d0 e0       	ldi	r29, 0x00	; 0
     9ec:	14 c0       	rjmp	.+40     	; 0xa16 <enc28j60_packet_receive+0xbc>
			SPDR = 0x00;
			waitspi();
			*rxtx_buffer++ = SPDR;
		}
		CSPASSIVE;
     9ee:	9e 01       	movw	r18, r28
	}
     9f0:	c4 98       	cbi	0x18, 4	; 24
	
	// Move the RX read pointer to the start of the next received packet
     9f2:	8a e3       	ldi	r24, 0x3A	; 58
     9f4:	8f b9       	out	0x0f, r24	; 15
	// This frees the memory we just read out
     9f6:	77 99       	sbic	0x0e, 7	; 14
     9f8:	0a c0       	rjmp	.+20     	; 0xa0e <enc28j60_packet_receive+0xb4>
     9fa:	fd cf       	rjmp	.-6      	; 0x9f6 <enc28j60_packet_receive+0x9c>
	enc28j60Write(ERXRDPTL, next_packet_ptr.bytes[0]);
	enc28j60Write(ERXRDPTH, next_packet_ptr.bytes[1]);

	// decrement the packet counter indicate we are done with this packet
     9fc:	1f b8       	out	0x0f, r1	; 15
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     9fe:	77 9b       	sbis	0x0e, 7	; 14
     a00:	fe cf       	rjmp	.-4      	; 0x9fe <enc28j60_packet_receive+0xa4>

     a02:	8f b1       	in	r24, 0x0f	; 15
     a04:	f6 01       	movw	r30, r12
     a06:	81 93       	st	Z+, r24
     a08:	6f 01       	movw	r12, r30
     a0a:	21 50       	subi	r18, 0x01	; 1
     a0c:	30 40       	sbci	r19, 0x00	; 0
     a0e:	21 15       	cp	r18, r1
     a10:	31 05       	cpc	r19, r1
     a12:	a1 f7       	brne	.-24     	; 0x9fc <enc28j60_packet_receive+0xa2>
	return( data_length.word );
}
     a14:	c4 9a       	sbi	0x18, 4	; 24

     a16:	60 91 eb 00 	lds	r22, 0x00EB
     a1a:	8c e0       	ldi	r24, 0x0C	; 12
     a1c:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     a20:	6b 2d       	mov	r22, r11
     a22:	8d e0       	ldi	r24, 0x0D	; 13
     a24:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     a28:	40 e4       	ldi	r20, 0x40	; 64
     a2a:	6e e1       	ldi	r22, 0x1E	; 30
     a2c:	80 e8       	ldi	r24, 0x80	; 128
     a2e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enc28j60WriteOp>
     a32:	ce 01       	movw	r24, r28
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	08 95       	ret

00000a48 <enc28j60_init>:
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	7c 01       	movw	r14, r24
     a52:	8b 9a       	sbi	0x11, 3	; 17
     a54:	8a 98       	cbi	0x11, 2	; 17
     a56:	92 9a       	sbi	0x12, 2	; 18
     a58:	93 98       	cbi	0x12, 3	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a5a:	80 e4       	ldi	r24, 0x40	; 64
     a5c:	9c e9       	ldi	r25, 0x9C	; 156
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <enc28j60_init+0x16>
     a62:	93 9a       	sbi	0x12, 3	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	10 e0       	ldi	r17, 0x00	; 0
     a68:	c8 01       	movw	r24, r16
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <enc28j60_init+0x22>
     a6e:	87 b3       	in	r24, 0x17	; 23
     a70:	80 6b       	ori	r24, 0xB0	; 176
     a72:	87 bb       	out	0x17, r24	; 23
     a74:	c4 9a       	sbi	0x18, 4	; 24
     a76:	88 b3       	in	r24, 0x18	; 24
     a78:	8f 75       	andi	r24, 0x5F	; 95
     a7a:	88 bb       	out	0x18, r24	; 24
     a7c:	80 e5       	ldi	r24, 0x50	; 80
     a7e:	8d b9       	out	0x0d, r24	; 13
     a80:	70 9a       	sbi	0x0e, 0	; 14
     a82:	4f ef       	ldi	r20, 0xFF	; 255
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enc28j60WriteOp>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a8c:	c8 01       	movw	r24, r16
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <enc28j60_init+0x46>
     a92:	10 92 ec 00 	sts	0x00EC, r1
     a96:	10 92 eb 00 	sts	0x00EB, r1
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	88 e0       	ldi	r24, 0x08	; 8
     a9e:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	89 e0       	ldi	r24, 0x09	; 9
     aa6:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	8c e0       	ldi	r24, 0x0C	; 12
     aae:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	8d e0       	ldi	r24, 0x0D	; 13
     ab6:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     aba:	63 e2       	ldi	r22, 0x23	; 35
     abc:	8a e0       	ldi	r24, 0x0A	; 10
     abe:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     ac2:	6a e1       	ldi	r22, 0x1A	; 26
     ac4:	8b e0       	ldi	r24, 0x0B	; 11
     ac6:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     aca:	64 e2       	ldi	r22, 0x24	; 36
     acc:	84 e0       	ldi	r24, 0x04	; 4
     ace:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     ad2:	6a e1       	ldi	r22, 0x1A	; 26
     ad4:	85 e0       	ldi	r24, 0x05	; 5
     ad6:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	86 e0       	ldi	r24, 0x06	; 6
     ade:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     ae2:	60 e2       	ldi	r22, 0x20	; 32
     ae4:	87 e0       	ldi	r24, 0x07	; 7
     ae6:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     aea:	6d e0       	ldi	r22, 0x0D	; 13
     aec:	80 ec       	ldi	r24, 0xC0	; 192
     aee:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     af2:	62 e3       	ldi	r22, 0x32	; 50
     af4:	82 ec       	ldi	r24, 0xC2	; 194
     af6:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     afa:	60 e4       	ldi	r22, 0x40	; 64
     afc:	83 ec       	ldi	r24, 0xC3	; 195
     afe:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b02:	6f e3       	ldi	r22, 0x3F	; 63
     b04:	89 ec       	ldi	r24, 0xC9	; 201
     b06:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b0a:	62 e1       	ldi	r22, 0x12	; 18
     b0c:	86 ec       	ldi	r24, 0xC6	; 198
     b0e:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b12:	6c e0       	ldi	r22, 0x0C	; 12
     b14:	87 ec       	ldi	r24, 0xC7	; 199
     b16:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b1a:	6e ee       	ldi	r22, 0xEE	; 238
     b1c:	8a ec       	ldi	r24, 0xCA	; 202
     b1e:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b22:	65 e0       	ldi	r22, 0x05	; 5
     b24:	8b ec       	ldi	r24, 0xCB	; 203
     b26:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b2a:	f7 01       	movw	r30, r14
     b2c:	60 81       	ld	r22, Z
     b2e:	84 ee       	ldi	r24, 0xE4	; 228
     b30:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b34:	f7 01       	movw	r30, r14
     b36:	61 81       	ldd	r22, Z+1	; 0x01
     b38:	85 ee       	ldi	r24, 0xE5	; 229
     b3a:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b3e:	f7 01       	movw	r30, r14
     b40:	62 81       	ldd	r22, Z+2	; 0x02
     b42:	82 ee       	ldi	r24, 0xE2	; 226
     b44:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b48:	f7 01       	movw	r30, r14
     b4a:	63 81       	ldd	r22, Z+3	; 0x03
     b4c:	83 ee       	ldi	r24, 0xE3	; 227
     b4e:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b52:	f7 01       	movw	r30, r14
     b54:	64 81       	ldd	r22, Z+4	; 0x04
     b56:	80 ee       	ldi	r24, 0xE0	; 224
     b58:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b5c:	f7 01       	movw	r30, r14
     b5e:	65 81       	ldd	r22, Z+5	; 0x05
     b60:	81 ee       	ldi	r24, 0xE1	; 225
     b62:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	71 e0       	ldi	r23, 0x01	; 1
     b6a:	80 e1       	ldi	r24, 0x10	; 16
     b6c:	0e 94 46 04 	call	0x88c	; 0x88c <enc28j60PhyWrite>
     b70:	62 e7       	ldi	r22, 0x72	; 114
     b72:	74 e0       	ldi	r23, 0x04	; 4
     b74:	84 e1       	ldi	r24, 0x14	; 20
     b76:	0e 94 46 04 	call	0x88c	; 0x88c <enc28j60PhyWrite>
     b7a:	60 eb       	ldi	r22, 0xB0	; 176
     b7c:	88 e3       	ldi	r24, 0x38	; 56
     b7e:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b82:	6f e3       	ldi	r22, 0x3F	; 63
     b84:	88 e2       	ldi	r24, 0x28	; 40
     b86:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b8a:	60 e3       	ldi	r22, 0x30	; 48
     b8c:	89 e2       	ldi	r24, 0x29	; 41
     b8e:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b92:	69 ef       	ldi	r22, 0xF9	; 249
     b94:	80 e3       	ldi	r24, 0x30	; 48
     b96:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     b9a:	67 ef       	ldi	r22, 0xF7	; 247
     b9c:	81 e3       	ldi	r24, 0x31	; 49
     b9e:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     ba2:	62 e1       	ldi	r22, 0x12	; 18
     ba4:	84 ec       	ldi	r24, 0xC4	; 196
     ba6:	0e 94 17 04 	call	0x82e	; 0x82e <enc28j60Write>
     baa:	8f e1       	ldi	r24, 0x1F	; 31
     bac:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <enc28j60SetBank>
     bb0:	40 ec       	ldi	r20, 0xC0	; 192
     bb2:	6b e1       	ldi	r22, 0x1B	; 27
     bb4:	80 e8       	ldi	r24, 0x80	; 128
     bb6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enc28j60WriteOp>
     bba:	44 e0       	ldi	r20, 0x04	; 4
     bbc:	6f e1       	ldi	r22, 0x1F	; 31
     bbe:	80 e8       	ldi	r24, 0x80	; 128
     bc0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enc28j60WriteOp>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bc4:	c8 01       	movw	r24, r16
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <enc28j60_init+0x17e>
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	08 95       	ret

00000bd4 <software_reset>:
//*****************************************************************************************
#ifndef REMOVE_BOOTLOADER_SUPPORT
void software_reset(void) __attribute__ ((naked));
void software_reset(void)
{
     bd4:	88 e1       	ldi	r24, 0x18	; 24
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	28 e0       	ldi	r18, 0x08	; 8
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	a8 95       	wdr
     be0:	81 bd       	out	0x21, r24	; 33
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	21 bd       	out	0x21, r18	; 33
     be6:	ff cf       	rjmp	.-2      	; 0xbe6 <software_reset+0x12>

00000be8 <client_process>:
	wdt_enable(WDTO_15MS);
	for(;;);
}
#endif
// end added in V1.1 ======================================================================
//*****************************************************************************************
//
// Function : server_process
// Description : Run web server and listen on port 80
//
//*****************************************************************************************
void server_process ( void )
{
	MAC_ADDR client_mac;
	IP_ADDR client_ip;
	// you can change rx,tx buffer size in includes.h
	BYTE rxtx_buffer[MAX_RXTX_BUFFER];
	WORD plen;
	
	if ( flag1.bits.syn_is_sent )
		return;
	// get new packet
	plen = enc28j60_packet_receive( (BYTE*)&rxtx_buffer, MAX_RXTX_BUFFER );
	
	//plen will ne unequal to zero if there is a valid packet (without crc error)
	if(plen==0)
		return;

	// copy client mac address from buffer to client mac variable
	memcpy ( (BYTE*)&client_mac, &rxtx_buffer[ ETH_SRC_MAC_P ], sizeof(MAC_ADDR) );
	
	// check arp packet if match with avr ip let's send reply
	if ( arp_packet_is_arp( rxtx_buffer, (WORD_BYTES){ARP_OPCODE_REQUEST_V} ) )
	{
		arp_send_reply ( (BYTE*)&rxtx_buffer, (BYTE*)&client_mac );
		return;
	}

	// get client ip address
	memcpy ( (BYTE*)&client_ip, &rxtx_buffer[ IP_SRC_IP_P ], sizeof(IP_ADDR) );
	// check ip packet send to avr or not?
	if ( ip_packet_is_ip ( (BYTE*)&rxtx_buffer ) == 0 )
	{
		return;
	}

	// check ICMP packet, if packet is icmp packet let's send icmp echo reply
	if ( icmp_send_reply ( (BYTE*)&rxtx_buffer, (BYTE*)&client_mac, (BYTE*)&client_ip ) )
	{
		return;
	}

	// check UDP packet
	if (udp_receive ( (BYTE *)&rxtx_buffer, (BYTE *)&client_mac, (BYTE *)&client_ip ))
	{
// added in V1.1 ***********************************
#ifndef REMOVE_BOOTLOADER_SUPPORT
		if( flag2.bits.software_reset )
			software_reset();
#endif
// end added in V1.1 *******************************
		return;
	}
	
	// tcp start here
	// start web server at port 80, see http.c
	http_webserver_process ( (BYTE*)rxtx_buffer, (BYTE*)&client_mac, (BYTE*)&client_ip );
}
//*****************************************************************************************
//
// Function : client_process
// Description : send temparature to web server, this option is disabled by default.
// YOU MUST install webserver and server script before enable this option, 
// I recommented Apache webserver and PHP script. 
// More detail about Apache and PHP installation please visit http://www.avrportal.com/
//
//*****************************************************************************************
void client_process ( void )
{
     be8:	4f 92       	push	r4
     bea:	5f 92       	push	r5
     bec:	6f 92       	push	r6
     bee:	7f 92       	push	r7
     bf0:	8f 92       	push	r8
     bf2:	9f 92       	push	r9
     bf4:	af 92       	push	r10
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	ce 5e       	subi	r28, 0xEE	; 238
     c0c:	d5 40       	sbci	r29, 0x05	; 5
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
	WORD dlength;
	// you can change rx,tx buffer size in includes.h
	BYTE rxtx_buffer[MAX_RXTX_BUFFER];

	// wait for send temparature flag is set, this flag set by time_base function (menu.c)
	if ( flag1.bits.send_temp == 0 )
     c18:	80 91 02 01 	lds	r24, 0x0102
     c1c:	84 ff       	sbrs	r24, 4
     c1e:	be c0       	rjmp	.+380    	; 0xd9c <client_process+0x1b4>
		return;	
	// AVR busy now and wait untill transfer data to web browser completed.
	if ( flag1.bits.syn_is_received )
     c20:	86 fd       	sbrc	r24, 6
     c22:	bc c0       	rjmp	.+376    	; 0xd9c <client_process+0x1b4>
		return;
	// AVR sent temparature to web server but not found web server on port 80
	//if ( flag1.bits.not_found_server )
	//	return;
	// send SYN to initial connection
	if ( flag1.bits.syn_is_sent == 0 )
     c24:	85 fd       	sbrc	r24, 5
     c26:	2e c0       	rjmp	.+92     	; 0xc84 <client_process+0x9c>
	{
		// start arp 
		// server ip was not found on network
		if ( arp_who_is ( rxtx_buffer, (BYTE*)&server_mac, (BYTE*)&server_ip ) == 0 )
     c28:	09 e0       	ldi	r16, 0x09	; 9
     c2a:	11 e0       	ldi	r17, 0x01	; 1
     c2c:	a8 01       	movw	r20, r16
     c2e:	61 e1       	ldi	r22, 0x11	; 17
     c30:	71 e0       	ldi	r23, 0x01	; 1
     c32:	2e 01       	movw	r4, r28
     c34:	08 94       	sec
     c36:	41 1c       	adc	r4, r1
     c38:	51 1c       	adc	r5, r1
     c3a:	c2 01       	movw	r24, r4
     c3c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <arp_who_is>
     c40:	88 23       	and	r24, r24
     c42:	21 f4       	brne	.+8      	; 0xc4c <client_process+0x64>
		{
			flag1.bits.send_temp = 0;
     c44:	80 91 02 01 	lds	r24, 0x0102
     c48:	8f 7e       	andi	r24, 0xEF	; 239
     c4a:	2c c0       	rjmp	.+88     	; 0xca4 <client_process+0xbc>
			return;
		}
	
		// send SYN packet to initial connection
		tcp_send_packet (
     c4c:	1f 93       	push	r17
     c4e:	0f 93       	push	r16
     c50:	e1 e1       	ldi	r30, 0x11	; 17
     c52:	8e 2e       	mov	r8, r30
     c54:	e1 e0       	ldi	r30, 0x01	; 1
     c56:	9e 2e       	mov	r9, r30
     c58:	aa 24       	eor	r10, r10
     c5a:	bb 24       	eor	r11, r11
     c5c:	cc 24       	eor	r12, r12
     c5e:	dd 24       	eor	r13, r13
     c60:	71 e0       	ldi	r23, 0x01	; 1
     c62:	e7 2e       	mov	r14, r23
     c64:	01 e0       	ldi	r16, 0x01	; 1
     c66:	22 e0       	ldi	r18, 0x02	; 2
     c68:	40 eb       	ldi	r20, 0xB0	; 176
     c6a:	54 e0       	ldi	r21, 0x04	; 4
     c6c:	60 e5       	ldi	r22, 0x50	; 80
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	c2 01       	movw	r24, r4
     c72:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <tcp_send_packet>
			rxtx_buffer,
			(WORD_BYTES){80},						// destination port
			(WORD_BYTES){1200},					// source port
			TCP_FLAG_SYN_V,			// flag
			1,						// (bool)maximum segment size
			1,						// (bool)clear sequence ack number
			0,						// 0=use old seq, seqack : 1=new seq,seqack no data : new seq,seqack with data
			0,						// tcp data length
			(BYTE*)&server_mac,		// server mac address
			(BYTE*)&server_ip );	// server ip address
		flag1.bits.syn_is_sent = 1;
     c76:	80 91 02 01 	lds	r24, 0x0102
     c7a:	80 62       	ori	r24, 0x20	; 32
     c7c:	80 93 02 01 	sts	0x0102, r24
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
	}
	// get new packet
	dlength = enc28j60_packet_receive( (BYTE*)&rxtx_buffer, MAX_RXTX_BUFFER );
     c84:	6e ee       	ldi	r22, 0xEE	; 238
     c86:	75 e0       	ldi	r23, 0x05	; 5
     c88:	2e 01       	movw	r4, r28
     c8a:	08 94       	sec
     c8c:	41 1c       	adc	r4, r1
     c8e:	51 1c       	adc	r5, r1
     c90:	c2 01       	movw	r24, r4
     c92:	0e 94 ad 04 	call	0x95a	; 0x95a <enc28j60_packet_receive>
	
	// no new packet incoming
	if ( dlength == 0 )
     c96:	89 2b       	or	r24, r25
     c98:	41 f4       	brne	.+16     	; 0xcaa <client_process+0xc2>
	{
		// timeout occured, when SYN has been sent but no response from web server
		// reset send_temp and syn_is_sent flags
		if ( flag1.bits.send_temp_timeout )
     c9a:	80 91 02 01 	lds	r24, 0x0102
     c9e:	87 ff       	sbrs	r24, 7
     ca0:	7d c0       	rjmp	.+250    	; 0xd9c <client_process+0x1b4>
		{
			flag1.bits.send_temp_timeout = 0;
			flag1.bits.send_temp = 0;
			flag1.bits.syn_is_sent = 0;
     ca2:	8f 74       	andi	r24, 0x4F	; 79
     ca4:	80 93 02 01 	sts	0x0102, r24
     ca8:	79 c0       	rjmp	.+242    	; 0xd9c <client_process+0x1b4>
		}
		return;
	}
	
	// check ip packet send to avr or not?
	// accept ip packet only
	if ( ip_packet_is_ip ( (BYTE*)&rxtx_buffer ) == 0 )
     caa:	c2 01       	movw	r24, r4
     cac:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <ip_packet_is_ip>
     cb0:	88 23       	and	r24, r24
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <client_process+0xce>
     cb4:	73 c0       	rjmp	.+230    	; 0xd9c <client_process+0x1b4>
	{
		return;
	}

	// check SYNACK flag, after AVR send SYN server response by send SYNACK to AVR
	if ( rxtx_buffer [ TCP_FLAGS_P ] == ( TCP_FLAG_SYN_V | TCP_FLAG_ACK_V ) )
     cb6:	88 a9       	ldd	r24, Y+48	; 0x30
     cb8:	82 31       	cpi	r24, 0x12	; 18
     cba:	19 f5       	brne	.+70     	; 0xd02 <client_process+0x11a>
	{
		// send ACK to answer SYNACK
		tcp_send_packet (
     cbc:	69 e0       	ldi	r22, 0x09	; 9
     cbe:	66 2e       	mov	r6, r22
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	76 2e       	mov	r7, r22
     cc4:	7f 92       	push	r7
     cc6:	6f 92       	push	r6
     cc8:	51 e1       	ldi	r21, 0x11	; 17
     cca:	85 2e       	mov	r8, r21
     ccc:	51 e0       	ldi	r21, 0x01	; 1
     cce:	95 2e       	mov	r9, r21
     cd0:	aa 24       	eor	r10, r10
     cd2:	bb 24       	eor	r11, r11
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	c4 2e       	mov	r12, r20
     cd8:	d1 2c       	mov	r13, r1
     cda:	ee 24       	eor	r14, r14
     cdc:	00 e0       	ldi	r16, 0x00	; 0
     cde:	20 e1       	ldi	r18, 0x10	; 16
     ce0:	40 eb       	ldi	r20, 0xB0	; 176
     ce2:	54 e0       	ldi	r21, 0x04	; 4
     ce4:	60 e5       	ldi	r22, 0x50	; 80
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	c2 01       	movw	r24, r4
     cea:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <tcp_send_packet>
					(BYTE*)&rxtx_buffer,
					(WORD_BYTES){80},						// destination port
					(WORD_BYTES){1200},					// source port
					TCP_FLAG_ACK_V,			// flag
					0,						// (bool)maximum segment size
					0,						// (bool)clear sequence ack number
					1,						// 0=use old seq, seqack : 1=new seq,seqack no data : >1 new seq,seqack with data
					0,						// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		// setup http request to server
		dlength = http_put_request( (BYTE*)&rxtx_buffer );
     cee:	c2 01       	movw	r24, r4
     cf0:	0e 94 29 08 	call	0x1052	; 0x1052 <http_put_request>
		// send http request packet
		// send packet with PSHACK
		tcp_send_packet (
     cf4:	7f 92       	push	r7
     cf6:	6f 92       	push	r6
     cf8:	5c 01       	movw	r10, r24
     cfa:	cc 24       	eor	r12, r12
     cfc:	dd 24       	eor	r13, r13
     cfe:	28 e1       	ldi	r18, 0x18	; 24
     d00:	21 c0       	rjmp	.+66     	; 0xd44 <client_process+0x15c>
					(BYTE*)&rxtx_buffer,
					(WORD_BYTES){80},						// destination port
					(WORD_BYTES){1200},					// source port
					TCP_FLAG_ACK_V | TCP_FLAG_PSH_V,			// flag
					0,						// (bool)maximum segment size
					0,						// (bool)clear sequence ack number
					0,						// 0=use old seq, seqack : 1=new seq,seqack no data : >1 new seq,seqack with data
					dlength,				// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		return;
	}
	// after AVR send http request to server, server response by send data with PSHACK to AVR
	// AVR answer by send ACK and FINACK to server
	if ( rxtx_buffer [ TCP_FLAGS_P ] == (TCP_FLAG_ACK_V|TCP_FLAG_PSH_V) )
     d02:	88 31       	cpi	r24, 0x18	; 24
     d04:	59 f5       	brne	.+86     	; 0xd5c <client_process+0x174>
	{
		dlength = tcp_get_dlength( (BYTE*)&rxtx_buffer );
     d06:	c2 01       	movw	r24, r4
     d08:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <tcp_get_dlength>

		// send ACK to answer PSHACK from server
		tcp_send_packet (
     d0c:	39 e0       	ldi	r19, 0x09	; 9
     d0e:	63 2e       	mov	r6, r19
     d10:	31 e0       	ldi	r19, 0x01	; 1
     d12:	73 2e       	mov	r7, r19
     d14:	7f 92       	push	r7
     d16:	6f 92       	push	r6
     d18:	21 e1       	ldi	r18, 0x11	; 17
     d1a:	82 2e       	mov	r8, r18
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	92 2e       	mov	r9, r18
     d20:	aa 24       	eor	r10, r10
     d22:	bb 24       	eor	r11, r11
     d24:	6c 01       	movw	r12, r24
     d26:	ee 24       	eor	r14, r14
     d28:	00 e0       	ldi	r16, 0x00	; 0
     d2a:	20 e1       	ldi	r18, 0x10	; 16
     d2c:	40 eb       	ldi	r20, 0xB0	; 176
     d2e:	54 e0       	ldi	r21, 0x04	; 4
     d30:	60 e5       	ldi	r22, 0x50	; 80
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	c2 01       	movw	r24, r4
     d36:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <tcp_send_packet>
					(BYTE*)&rxtx_buffer,
					(WORD_BYTES){80},						// destination port
					(WORD_BYTES){1200},					// source port
					TCP_FLAG_ACK_V,			// flag
					0,						// (bool)maximum segment size
					0,						// (bool)clear sequence ack number
					dlength,						// 0=use old seq, seqack : 1=new seq,seqack no data : >1 new seq,seqack with data
					0,				// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		// send finack to disconnect from web server
		
		tcp_send_packet (
     d3a:	7f 92       	push	r7
     d3c:	6f 92       	push	r6
     d3e:	cc 24       	eor	r12, r12
     d40:	dd 24       	eor	r13, r13
     d42:	21 e1       	ldi	r18, 0x11	; 17
     d44:	40 eb       	ldi	r20, 0xB0	; 176
     d46:	54 e0       	ldi	r21, 0x04	; 4
     d48:	60 e5       	ldi	r22, 0x50	; 80
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	c2 01       	movw	r24, r4
     d4e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <tcp_send_packet>
					(BYTE*)&rxtx_buffer,
					(WORD_BYTES){80},						// destination port
					(WORD_BYTES){1200},					// source port
					TCP_FLAG_FIN_V|TCP_FLAG_ACK_V,			// flag
					0,						// (bool)maximum segment size
					0,						// (bool)clear sequence ack number
					0,						// (bool)calculate new seq and seqack number
					0,						// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		return;
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	20 c0       	rjmp	.+64     	; 0xd9c <client_process+0x1b4>
		//menu_flag.bits.send_temp = 0;
		//send_syn = 0;
	}
	// answer FINACK from web server by send ACK to web server
	if ( rxtx_buffer [ TCP_FLAGS_P ] == (TCP_FLAG_FIN_V|TCP_FLAG_ACK_V) )
     d5c:	81 31       	cpi	r24, 0x11	; 17
     d5e:	f1 f4       	brne	.+60     	; 0xd9c <client_process+0x1b4>
	{
		// send ACK with seqack = 1
		tcp_send_packet (
     d60:	89 e0       	ldi	r24, 0x09	; 9
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	9f 93       	push	r25
     d66:	8f 93       	push	r24
     d68:	91 e1       	ldi	r25, 0x11	; 17
     d6a:	89 2e       	mov	r8, r25
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	99 2e       	mov	r9, r25
     d70:	aa 24       	eor	r10, r10
     d72:	bb 24       	eor	r11, r11
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	c8 2e       	mov	r12, r24
     d78:	d1 2c       	mov	r13, r1
     d7a:	ee 24       	eor	r14, r14
     d7c:	00 e0       	ldi	r16, 0x00	; 0
     d7e:	20 e1       	ldi	r18, 0x10	; 16
     d80:	40 eb       	ldi	r20, 0xB0	; 176
     d82:	54 e0       	ldi	r21, 0x04	; 4
     d84:	60 e5       	ldi	r22, 0x50	; 80
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	c2 01       	movw	r24, r4
     d8a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <tcp_send_packet>
					(BYTE*)&rxtx_buffer,
					(WORD_BYTES){80},						// destination port
					(WORD_BYTES){1200},					// source port
					TCP_FLAG_ACK_V,			// flag
					0,						// (bool)maximum segment size
					0,						// (bool)clear sequence ack number
					1,						// 0=use old seq, seqack : 1=new seq,seqack no data : >1 new seq,seqack with data
					0,				// tcp data length
					(BYTE*)&server_mac,		// server mac address
					(BYTE*)&server_ip );	// server ip address
		// temparature has been sent
		// and wait for next schedule to send temparature
		flag1.bits.send_temp = 0;
     d8e:	80 91 02 01 	lds	r24, 0x0102
		flag1.bits.syn_is_sent = 0;
     d92:	8f 7c       	andi	r24, 0xCF	; 207
     d94:	80 93 02 01 	sts	0x0102, r24
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	c2 51       	subi	r28, 0x12	; 18
     d9e:	da 4f       	sbci	r29, 0xFA	; 250
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	bf 90       	pop	r11
     dba:	af 90       	pop	r10
     dbc:	9f 90       	pop	r9
     dbe:	8f 90       	pop	r8
     dc0:	7f 90       	pop	r7
     dc2:	6f 90       	pop	r6
     dc4:	5f 90       	pop	r5
     dc6:	4f 90       	pop	r4
     dc8:	08 95       	ret

00000dca <server_process>:
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	c8 5f       	subi	r28, 0xF8	; 248
     de0:	d5 40       	sbci	r29, 0x05	; 5
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	80 91 02 01 	lds	r24, 0x0102
     df0:	85 fd       	sbrc	r24, 5
     df2:	50 c0       	rjmp	.+160    	; 0xe94 <server_process+0xca>
     df4:	6e ee       	ldi	r22, 0xEE	; 238
     df6:	75 e0       	ldi	r23, 0x05	; 5
     df8:	ce 01       	movw	r24, r28
     dfa:	0b 96       	adiw	r24, 0x0b	; 11
     dfc:	0e 94 ad 04 	call	0x95a	; 0x95a <enc28j60_packet_receive>
     e00:	89 2b       	or	r24, r25
     e02:	09 f4       	brne	.+2      	; 0xe06 <server_process+0x3c>
     e04:	47 c0       	rjmp	.+142    	; 0xe94 <server_process+0xca>
     e06:	f5 e0       	ldi	r31, 0x05	; 5
     e08:	cf 2e       	mov	r12, r31
     e0a:	d1 2c       	mov	r13, r1
     e0c:	cc 0e       	add	r12, r28
     e0e:	dd 1e       	adc	r13, r29
     e10:	d6 01       	movw	r26, r12
     e12:	fe 01       	movw	r30, r28
     e14:	71 96       	adiw	r30, 0x11	; 17
     e16:	86 e0       	ldi	r24, 0x06	; 6
     e18:	01 90       	ld	r0, Z+
     e1a:	0d 92       	st	X+, r0
     e1c:	81 50       	subi	r24, 0x01	; 1
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <server_process+0x4e>
     e20:	8e 01       	movw	r16, r28
     e22:	05 5f       	subi	r16, 0xF5	; 245
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	c8 01       	movw	r24, r16
     e2c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <arp_packet_is_arp>
     e30:	88 23       	and	r24, r24
     e32:	29 f0       	breq	.+10     	; 0xe3e <server_process+0x74>
     e34:	b6 01       	movw	r22, r12
     e36:	c8 01       	movw	r24, r16
     e38:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <arp_send_reply>
     e3c:	2b c0       	rjmp	.+86     	; 0xe94 <server_process+0xca>
     e3e:	7e 01       	movw	r14, r28
     e40:	08 94       	sec
     e42:	e1 1c       	adc	r14, r1
     e44:	f1 1c       	adc	r15, r1
     e46:	8d a1       	ldd	r24, Y+37	; 0x25
     e48:	9e a1       	ldd	r25, Y+38	; 0x26
     e4a:	af a1       	ldd	r26, Y+39	; 0x27
     e4c:	b8 a5       	ldd	r27, Y+40	; 0x28
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	ab 83       	std	Y+3, r26	; 0x03
     e54:	bc 83       	std	Y+4, r27	; 0x04
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <ip_packet_is_ip>
     e5c:	88 23       	and	r24, r24
     e5e:	d1 f0       	breq	.+52     	; 0xe94 <server_process+0xca>
     e60:	a7 01       	movw	r20, r14
     e62:	b6 01       	movw	r22, r12
     e64:	c8 01       	movw	r24, r16
     e66:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <icmp_send_reply>
     e6a:	88 23       	and	r24, r24
     e6c:	99 f4       	brne	.+38     	; 0xe94 <server_process+0xca>
     e6e:	a7 01       	movw	r20, r14
     e70:	b6 01       	movw	r22, r12
     e72:	c8 01       	movw	r24, r16
     e74:	0e 94 7e 14 	call	0x28fc	; 0x28fc <udp_receive>
     e78:	88 23       	and	r24, r24
     e7a:	39 f0       	breq	.+14     	; 0xe8a <server_process+0xc0>
     e7c:	80 91 01 01 	lds	r24, 0x0101
     e80:	81 ff       	sbrs	r24, 1
     e82:	08 c0       	rjmp	.+16     	; 0xe94 <server_process+0xca>
     e84:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <software_reset>
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <server_process+0xca>
     e8a:	a7 01       	movw	r20, r14
     e8c:	b6 01       	movw	r22, r12
     e8e:	c8 01       	movw	r24, r16
     e90:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <http_webserver_process>
     e94:	c8 50       	subi	r28, 0x08	; 8
     e96:	da 4f       	sbci	r29, 0xFA	; 250
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	08 95       	ret

00000eb4 <main>:
	}
}
//*****************************************************************************************
//
// Function : main
// Description : main program, 
//
//*****************************************************************************************
int main (void)
{
     eb4:	81 e4       	ldi	r24, 0x41	; 65
     eb6:	80 93 03 01 	sts	0x0103, r24
	// change your mac address here
	avr_mac.byte[0] = 'A';
	avr_mac.byte[1] = 'V';
     eba:	86 e5       	ldi	r24, 0x56	; 86
     ebc:	80 93 04 01 	sts	0x0104, r24
	avr_mac.byte[2] = 'R';
     ec0:	92 e5       	ldi	r25, 0x52	; 82
     ec2:	90 93 05 01 	sts	0x0105, r25
	avr_mac.byte[3] = 'P';
     ec6:	80 e5       	ldi	r24, 0x50	; 80
     ec8:	80 93 06 01 	sts	0x0106, r24
	avr_mac.byte[4] = 'O';
     ecc:	8f e4       	ldi	r24, 0x4F	; 79
     ece:	80 93 07 01 	sts	0x0107, r24
	avr_mac.byte[5] = 'R';
     ed2:	90 93 08 01 	sts	0x0108, r25
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 

              __asm__ __volatile__ (
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	ed e0       	ldi	r30, 0x0D	; 13
     eda:	f1 e0       	ldi	r31, 0x01	; 1
     edc:	a0 e0       	ldi	r26, 0x00	; 0
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	18 2e       	mov	r1, r24
     ee2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>

	// read avr and server ip from eeprom
	eeprom_read_block ( &avr_ip, ee_avr_ip, 4 );
	eeprom_read_block ( &server_ip, ee_server_ip, 4 );
	
	// setup port as input and enable pull-up
	SW_DDR &= ~ ( _BV( SW_MENU ) | _BV( SW_EXIT ) | _BV( SW_UP ) | _BV( SW_DW ) );
     ee6:	e9 e0       	ldi	r30, 0x09	; 9
     ee8:	f1 e0       	ldi	r31, 0x01	; 1
     eea:	a4 e0       	ldi	r26, 0x04	; 4
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	18 2e       	mov	r1, r24
     ef0:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>
     ef4:	8a b3       	in	r24, 0x1a	; 26
     ef6:	8f 70       	andi	r24, 0x0F	; 15
     ef8:	8a bb       	out	0x1a, r24	; 26
	SW_PORT |= _BV( SW_MENU ) | _BV( SW_EXIT ) | _BV( SW_UP ) | _BV( SW_DW );
     efa:	8b b3       	in	r24, 0x1b	; 27
     efc:	80 6f       	ori	r24, 0xF0	; 240
     efe:	8b bb       	out	0x1b, r24	; 27
	SFIOR &= ~_BV( PUD );
     f00:	80 b7       	in	r24, 0x30	; 48
     f02:	8b 7f       	andi	r24, 0xFB	; 251
     f04:	80 bf       	out	0x30, r24	; 48

	// setup lcd backlight as output
	LCD_BL_DDR |= _BV( LCD_BL_PIN );
     f06:	bb 9a       	sbi	0x17, 3	; 23
	// lcd backlight on
	LCD_BL_PORT |= _BV( LCD_BL_PIN );
     f08:	c3 9a       	sbi	0x18, 3	; 24
	
	// setup clock for timer1
	TCCR1B = 0x01;	// clk/1 no prescaling
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	8e bd       	out	0x2e, r24	; 46

	// initial adc, lcd, and menu
	adc_init();
     f0e:	0e 94 01 14 	call	0x2802	; 0x2802 <adc_init>
	lcd_init ();
     f12:	0e 94 c1 13 	call	0x2782	; 0x2782 <lcd_init>
	menu_init ();
     f16:	0e 94 07 11 	call	0x220e	; 0x220e <menu_init>

	// set LED1, LED2 as output */
	LED_DDR |= _BV( LED_PIN1_DDR ) | _BV( LED_PIN2_DDR );
     f1a:	84 b3       	in	r24, 0x14	; 20
     f1c:	80 6c       	ori	r24, 0xC0	; 192
     f1e:	84 bb       	out	0x14, r24	; 20
	// set LED pin to "1" ( LED1,LED2 off)
	LED_PORT |= _BV( LED_PIN1 ) | _BV( LED_PIN2 );
     f20:	85 b3       	in	r24, 0x15	; 21
     f22:	80 6c       	ori	r24, 0xC0	; 192
     f24:	85 bb       	out	0x15, r24	; 21

	// initial enc28j60
	enc28j60_init( (BYTE*)&avr_mac );
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 24 05 	call	0xa48	; 0xa48 <enc28j60_init>
	
// added in V1.1
	lcd_print_p( (PGM_P)version );
     f2e:	84 e5       	ldi	r24, 0x54	; 84
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 b3 13 	call	0x2766	; 0x2766 <lcd_print_p>
// end added in V1.1

	// loop forever
	for(;;)
	{
		// wait until timer1 overflow
		while ( (TIFR & _BV ( TOV1 )) == 0 );
     f36:	08 b6       	in	r0, 0x38	; 56
     f38:	02 fe       	sbrs	r0, 2
     f3a:	fd cf       	rjmp	.-6      	; 0xf36 <main+0x82>
		TIFR |= _BV(TOV1);
     f3c:	88 b7       	in	r24, 0x38	; 56
     f3e:	84 60       	ori	r24, 0x04	; 4
     f40:	88 bf       	out	0x38, r24	; 56
		TCNT1 = 1536;	// Timer1 overflow every 1/16MHz * ( 65536 - 1536 ) = 4ms, 250Hz
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	96 e0       	ldi	r25, 0x06	; 6
     f46:	9d bd       	out	0x2d, r25	; 45
     f48:	8c bd       	out	0x2c, r24	; 44

		// general time base, generate by timer1
		// overflow every 1/250 seconds
		time_base ();
     f4a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <time_base>
		
		// read temparature
		adc_read_temp();
     f4e:	0e 94 06 14 	call	0x280c	; 0x280c <adc_read_temp>

		// server process response for arp, icmp, http
		server_process ();
     f52:	0e 94 e5 06 	call	0xdca	; 0xdca <server_process>

		// send temparature to web server unsing http protocol
		// disable by default.
		client_process ();
     f56:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <client_process>

		// lcd user interface menu
		// setup IP address, countdown timer
		menu_process ();
     f5a:	0e 94 8c 11 	call	0x2318	; 0x2318 <menu_process>

		// display AVR ethernet status
		// temparature, AVR ip, server ip, countdown time
		standby_display ();
     f5e:	0e 94 a4 12 	call	0x2548	; 0x2548 <standby_display>
     f62:	e9 cf       	rjmp	.-46     	; 0xf36 <main+0x82>

00000f64 <http_get_ip>:
// in BYTE *dest
//
//********************************************************************************************
unsigned char http_get_ip ( unsigned char *buf, BYTE *dest )
{
     f64:	dc 01       	movw	r26, r24
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	31 e0       	ldi	r19, 0x01	; 1
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	5a e0       	ldi	r21, 0x0A	; 10
	unsigned char i, ch, digit, temp;

	i = 0;
	digit = 1;
	temp = 0;

	while ( 1 )
	{
		ch = *buf++;
     f6e:	8d 91       	ld	r24, X+

		if ( ch >= '0' && ch <= '9' )
     f70:	98 2f       	mov	r25, r24
     f72:	90 53       	subi	r25, 0x30	; 48
     f74:	9a 30       	cpi	r25, 0x0A	; 10
     f76:	40 f4       	brcc	.+16     	; 0xf88 <http_get_ip+0x24>
		{
			ch = ch - '0';
			temp = (temp * digit) + ch;
     f78:	23 9f       	mul	r18, r19
     f7a:	20 2d       	mov	r18, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	29 0f       	add	r18, r25
			digit *= 10;
     f80:	35 9f       	mul	r19, r21
     f82:	30 2d       	mov	r19, r0
     f84:	11 24       	eor	r1, r1
     f86:	0e c0       	rjmp	.+28     	; 0xfa4 <http_get_ip+0x40>
		}
		else if ( ch == '.' || ch == '\0' )
     f88:	8e 32       	cpi	r24, 0x2E	; 46
     f8a:	29 f0       	breq	.+10     	; 0xf96 <http_get_ip+0x32>
     f8c:	88 23       	and	r24, r24
     f8e:	19 f0       	breq	.+6      	; 0xf96 <http_get_ip+0x32>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	08 95       	ret
		{
			dest[ i ] = temp;
     f96:	fb 01       	movw	r30, r22
     f98:	e4 0f       	add	r30, r20
     f9a:	f1 1d       	adc	r31, r1
     f9c:	20 83       	st	Z, r18
			i++;
     f9e:	4f 5f       	subi	r20, 0xFF	; 255
     fa0:	31 e0       	ldi	r19, 0x01	; 1
     fa2:	20 e0       	ldi	r18, 0x00	; 0
			digit = 1;
			temp = 0;
		}
		else
		{
			return 0;
		}
		if ( i == 4 )
     fa4:	44 30       	cpi	r20, 0x04	; 4
     fa6:	19 f7       	brne	.-58     	; 0xf6e <http_get_ip+0xa>
     fa8:	84 e0       	ldi	r24, 0x04	; 4
     faa:	90 e0       	ldi	r25, 0x00	; 0
			return i;
	}
}
     fac:	08 95       	ret

00000fae <hex2int>:
//********************************************************************************************
//
// Function : http_get_variable
// Description : Get http variable from GET method, example http://10.1.1.1/?pwd=123456
//		when you call http_get_variable with val_key="pwd", then function stored "123456"
//		to dest buffer.
//
//********************************************************************************************
BYTE http_get_variable ( BYTE *rxtx_buffer, WORD dlength, PGM_P val_key, BYTE *dest )
{
	WORD data_p;
	PGM_P key;
	BYTE match=0, temp;

	key = val_key;
	
	// get data position
	data_p = tcp_get_hlength( rxtx_buffer ) + sizeof(ETH_HEADER) + sizeof(IP_HEADER);

	// Find '?' in rx buffer, if found '?' in rx buffer then let's find variable key (val_key)
	for ( ; data_p<dlength; data_p++ )
	{
		if ( rxtx_buffer [ data_p ] == '?' )
			break;
	}
	// not found '?' in buffer
	if ( data_p == dlength )
		return 0;
	
	// find variable key in buffer 
	for ( ; data_p<dlength; data_p++ )
	{
		temp = pgm_read_byte ( key );

		// end of variable keyword
		if ( rxtx_buffer [ data_p ] == '=' && match != 0 )
		{
			if ( temp == '\0' )
			{
				data_p++;
				break;
			}
		}
		// variable keyword match with rx buffer
		if ( rxtx_buffer [ data_p ] == temp )
		{
			key++;
			match++;
		}
		else
		{
			// no match in rx buffer reset match and find again
			key = val_key;
			match = 0;
		}
	}
	
	// if found variable keyword, then store variable value in destination buffer ( dest )
	if ( match != 0 )
	{
		match = 0;

		for ( ;; )
		{
			// end of variable value break from loop
			if ( rxtx_buffer [ data_p ] == '&' || rxtx_buffer [ data_p ] == ' ' )
			{
				dest [ match ] = '\0';
				break;
			}
			dest [ match ] = rxtx_buffer [ data_p ];
			match++;
			data_p++;
		}
	}

	// return with variable value length
	return match;
}
//********************************************************************************************
//
// Function : hex2int
// Description : convert a single hex digit character to its integer value
//
//********************************************************************************************
unsigned char hex2int(char c)
{
     fae:	98 2f       	mov	r25, r24
	if (c >= '0' && c <='9')
     fb0:	80 53       	subi	r24, 0x30	; 48
     fb2:	8a 30       	cpi	r24, 0x0A	; 10
     fb4:	10 f4       	brcc	.+4      	; 0xfba <hex2int+0xc>
		return((unsigned char)c - '0');
     fb6:	99 27       	eor	r25, r25
     fb8:	08 95       	ret

	if (c >= 'a' && c <='f')
     fba:	89 2f       	mov	r24, r25
     fbc:	81 56       	subi	r24, 0x61	; 97
     fbe:	86 30       	cpi	r24, 0x06	; 6
     fc0:	20 f4       	brcc	.+8      	; 0xfca <hex2int+0x1c>
		return((unsigned char)c - 'a' + 10);
     fc2:	97 55       	subi	r25, 0x57	; 87
     fc4:	89 2f       	mov	r24, r25
     fc6:	99 27       	eor	r25, r25
     fc8:	08 95       	ret
	
	if (c >= 'A' && c <='F')
     fca:	89 2f       	mov	r24, r25
     fcc:	81 54       	subi	r24, 0x41	; 65
     fce:	86 30       	cpi	r24, 0x06	; 6
     fd0:	18 f0       	brcs	.+6      	; 0xfd8 <hex2int+0x2a>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	08 95       	ret
		return((unsigned char)c - 'A' + 10);
     fd8:	97 53       	subi	r25, 0x37	; 55
     fda:	89 2f       	mov	r24, r25
     fdc:	99 27       	eor	r25, r25

	return 0;
}
     fde:	08 95       	ret

00000fe0 <urldecode>:
//********************************************************************************************
//
// Function : urldecode
// Description : decode a url string e.g "hello%20joe" or "hello+joe" becomes "hello joe"
//
//********************************************************************************************
void urldecode(unsigned char *urlbuf)
{
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	6c 01       	movw	r12, r24
     ff2:	ec 01       	movw	r28, r24
     ff4:	20 c0       	rjmp	.+64     	; 0x1036 <urldecode+0x56>
	unsigned char c;
	unsigned char *dst;

	dst=urlbuf;
	while ((c = *urlbuf))
	{
		if (c == '+') c = ' ';
     ff6:	8b 32       	cpi	r24, 0x2B	; 43
     ff8:	11 f4       	brne	.+4      	; 0xffe <urldecode+0x1e>
     ffa:	80 e2       	ldi	r24, 0x20	; 32
     ffc:	18 c0       	rjmp	.+48     	; 0x102e <urldecode+0x4e>
		if (c == '%')
     ffe:	85 32       	cpi	r24, 0x25	; 37
    1000:	b1 f4       	brne	.+44     	; 0x102e <urldecode+0x4e>
		{
			urlbuf++;
    1002:	7e 01       	movw	r14, r28
    1004:	08 94       	sec
    1006:	e1 1c       	adc	r14, r1
    1008:	f1 1c       	adc	r15, r1
			c = *urlbuf;
			urlbuf++;
    100a:	e7 01       	movw	r28, r14
    100c:	21 96       	adiw	r28, 0x01	; 1
			c = (hex2int(c) << 4) | hex2int(*urlbuf);
    100e:	f7 01       	movw	r30, r14
    1010:	80 81       	ld	r24, Z
    1012:	0e 94 d7 07 	call	0xfae	; 0xfae <hex2int>
    1016:	08 2f       	mov	r16, r24
    1018:	11 27       	eor	r17, r17
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	00 0f       	add	r16, r16
    101e:	11 1f       	adc	r17, r17
    1020:	8a 95       	dec	r24
    1022:	e1 f7       	brne	.-8      	; 0x101c <urldecode+0x3c>
    1024:	f7 01       	movw	r30, r14
    1026:	81 81       	ldd	r24, Z+1	; 0x01
    1028:	0e 94 d7 07 	call	0xfae	; 0xfae <hex2int>
    102c:	80 2b       	or	r24, r16
		}
		*dst = c;
    102e:	f6 01       	movw	r30, r12
    1030:	81 93       	st	Z+, r24
    1032:	6f 01       	movw	r12, r30
		dst++;
		urlbuf++;
    1034:	21 96       	adiw	r28, 0x01	; 1
    1036:	88 81       	ld	r24, Y
    1038:	88 23       	and	r24, r24
    103a:	e9 f6       	brne	.-70     	; 0xff6 <urldecode+0x16>
	}
	*dst = '\0';
    103c:	f6 01       	movw	r30, r12
    103e:	10 82       	st	Z, r1
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	08 95       	ret

00001052 <http_put_request>:
}
//*****************************************************************************************
//
// Function : http_put_request
// Description : put http request to tx buffer contain 2-variables pwd and temp.
// webserver receive pwd, temp and save to text file by PHP script on webserver.
//
//*****************************************************************************************
WORD http_put_request ( BYTE *rxtx_buffer )
{
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	c0 54       	subi	r28, 0x40	; 64
    1064:	d0 40       	sbci	r29, 0x00	; 0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	8c 01       	movw	r16, r24
	BYTE temp_value;
	WORD dlength;
	BYTE generic_buf[64];
	
	temp_value = adc_read_temp();
    1072:	0e 94 06 14 	call	0x280c	; 0x280c <adc_read_temp>
	print_decimal ( generic_buf, 2, temp_value );
    1076:	99 27       	eor	r25, r25
    1078:	ac 01       	movw	r20, r24
    107a:	62 e0       	ldi	r22, 0x02	; 2
    107c:	7e 01       	movw	r14, r28
    107e:	08 94       	sec
    1080:	e1 1c       	adc	r14, r1
    1082:	f1 1c       	adc	r15, r1
    1084:	c7 01       	movw	r24, r14
    1086:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
	generic_buf[ 2 ] = '\0';
    108a:	1b 82       	std	Y+3, r1	; 0x03

	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "GET /avrnet/save.php?pwd=secret&temp=" ), 0 );
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	6f ed       	ldi	r22, 0xDF	; 223
    1092:	75 e0       	ldi	r23, 0x05	; 5
    1094:	c8 01       	movw	r24, r16
    1096:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlength = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength );
    109a:	ac 01       	movw	r20, r24
    109c:	b7 01       	movw	r22, r14
    109e:	c8 01       	movw	r24, r16
    10a0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <tcp_puts_data>
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( " HTTP/1.0\r\n" ), dlength );
    10a4:	ac 01       	movw	r20, r24
    10a6:	63 ed       	ldi	r22, 0xD3	; 211
    10a8:	75 e0       	ldi	r23, 0x05	; 5
    10aa:	c8 01       	movw	r24, r16
    10ac:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Host: 10.1.1.76\r\n" ), dlength );
    10b0:	ac 01       	movw	r20, r24
    10b2:	61 ec       	ldi	r22, 0xC1	; 193
    10b4:	75 e0       	ldi	r23, 0x05	; 5
    10b6:	c8 01       	movw	r24, r16
    10b8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "User-Agent: AVR ethernet\r\n" ), dlength );
    10bc:	ac 01       	movw	r20, r24
    10be:	66 ea       	ldi	r22, 0xA6	; 166
    10c0:	75 e0       	ldi	r23, 0x05	; 5
    10c2:	c8 01       	movw	r24, r16
    10c4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Accept: text/html\r\n" ), dlength );
    10c8:	ac 01       	movw	r20, r24
    10ca:	62 e9       	ldi	r22, 0x92	; 146
    10cc:	75 e0       	ldi	r23, 0x05	; 5
    10ce:	c8 01       	movw	r24, r16
    10d0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Keep-Alive: 300\r\n" ), dlength );
    10d4:	ac 01       	movw	r20, r24
    10d6:	60 e8       	ldi	r22, 0x80	; 128
    10d8:	75 e0       	ldi	r23, 0x05	; 5
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlength = tcp_puts_data_p ( rxtx_buffer, PSTR ( "Connection: keep-alive\r\n\r\n" ), dlength );
    10e0:	ac 01       	movw	r20, r24
    10e2:	65 e6       	ldi	r22, 0x65	; 101
    10e4:	75 e0       	ldi	r23, 0x05	; 5
    10e6:	c8 01       	movw	r24, r16
    10e8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    10ec:	c0 5c       	subi	r28, 0xC0	; 192
    10ee:	df 4f       	sbci	r29, 0xFF	; 255
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	08 95       	ret

00001108 <http_home>:

	return dlength;
}
//*****************************************************************************************
//
// Function : http_home
// Description : prepare the webpage by writing the data to the tcp send buffer
//
//*****************************************************************************************
WORD http_home( BYTE *rxtx_buffer )
{
    1108:	cf 92       	push	r12
    110a:	df 92       	push	r13
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	c3 54       	subi	r28, 0x43	; 67
    111e:	d0 40       	sbci	r29, 0x00	; 0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	7c 01       	movw	r14, r24
	WORD dlen, adc0_value;
	BYTE temp_value;
	BYTE count_time_temp[3];
	BYTE generic_buf[64];

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n" ), 0 );
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	68 e3       	ldi	r22, 0x38	; 56
    1132:	75 e0       	ldi	r23, 0x05	; 5
    1134:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR  ( "<title>" ), dlen );
    1138:	ac 01       	movw	r20, r24
    113a:	60 e3       	ldi	r22, 0x30	; 48
    113c:	75 e0       	ldi	r23, 0x05	; 5
    113e:	c7 01       	movw	r24, r14
    1140:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P)web_title, dlen );
    1144:	ac 01       	movw	r20, r24
    1146:	60 e6       	ldi	r22, 0x60	; 96
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	c7 01       	movw	r24, r14
    114c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</title>" ), dlen );
    1150:	ac 01       	movw	r20, r24
    1152:	67 e2       	ldi	r22, 0x27	; 39
    1154:	75 e0       	ldi	r23, 0x05	; 5
    1156:	c7 01       	movw	r24, r14
    1158:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<a href=\"http://www.avrportal.com/\" target=\"_blank\"><b><font color=\"#000099\" size=\"+1\">" ), dlen );
    115c:	ac 01       	movw	r20, r24
    115e:	6f ec       	ldi	r22, 0xCF	; 207
    1160:	74 e0       	ldi	r23, 0x04	; 4
    1162:	c7 01       	movw	r24, r14
    1164:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P)web_title, dlen );
    1168:	ac 01       	movw	r20, r24
    116a:	60 e6       	ldi	r22, 0x60	; 96
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	c7 01       	movw	r24, r14
    1170:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font></b></a><br>" ), dlen );
    1174:	ac 01       	movw	r20, r24
    1176:	6b eb       	ldi	r22, 0xBB	; 187
    1178:	74 e0       	ldi	r23, 0x04	; 4
    117a:	c7 01       	movw	r24, r14
    117c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>

	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P)tag_hr, dlen );
    1180:	ac 01       	movw	r20, r24
    1182:	62 e8       	ldi	r22, 0x82	; 130
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	c7 01       	movw	r24, r14
    1188:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "LED 1 : " ), dlen );
    118c:	ac 01       	movw	r20, r24
    118e:	62 eb       	ldi	r22, 0xB2	; 178
    1190:	74 e0       	ldi	r23, 0x04	; 4
    1192:	c7 01       	movw	r24, r14
    1194:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    1198:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN1 )) )
    119a:	ae 9b       	sbis	0x15, 6	; 21
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <http_home+0x9c>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    119e:	6e e9       	ldi	r22, 0x9E	; 158
    11a0:	74 e0       	ldi	r23, 0x04	; 4
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <http_home+0xa0>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    11a4:	69 e8       	ldi	r22, 0x89	; 137
    11a6:	74 e0       	ldi	r23, 0x04	; 4
    11a8:	c7 01       	movw	r24, r14
    11aa:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    11ae:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l1=" ), dlen );
    11b0:	6f e6       	ldi	r22, 0x6F	; 111
    11b2:	74 e0       	ldi	r23, 0x04	; 4
    11b4:	c7 01       	movw	r24, r14
    11b6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    11ba:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN1 )) )
    11bc:	ae 9b       	sbis	0x15, 6	; 21
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <http_home+0xbe>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    11c0:	69 e6       	ldi	r22, 0x69	; 105
    11c2:	74 e0       	ldi	r23, 0x04	; 4
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <http_home+0xc2>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    11c6:	62 e6       	ldi	r22, 0x62	; 98
    11c8:	74 e0       	ldi	r23, 0x04	; 4
    11ca:	c7 01       	movw	r24, r14
    11cc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    11d0:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ], LED 2 : " ), dlen );
    11d2:	61 e5       	ldi	r22, 0x51	; 81
    11d4:	74 e0       	ldi	r23, 0x04	; 4
    11d6:	c7 01       	movw	r24, r14
    11d8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    11dc:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN2 )) )
    11de:	af 9b       	sbis	0x15, 7	; 21
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <http_home+0xe0>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=red>OFF" ), dlen );
    11e2:	6d e3       	ldi	r22, 0x3D	; 61
    11e4:	74 e0       	ldi	r23, 0x04	; 4
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <http_home+0xe4>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<font color=green>ON" ), dlen );
    11e8:	68 e2       	ldi	r22, 0x28	; 40
    11ea:	74 e0       	ldi	r23, 0x04	; 4
    11ec:	c7 01       	movw	r24, r14
    11ee:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    11f2:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</font> [ <a href=\"./?l2=" ), dlen );
    11f4:	6e e0       	ldi	r22, 0x0E	; 14
    11f6:	74 e0       	ldi	r23, 0x04	; 4
    11f8:	c7 01       	movw	r24, r14
    11fa:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    11fe:	ac 01       	movw	r20, r24
	if ( (LED_PORT & _BV ( LED_PIN2 )) )
    1200:	af 9b       	sbis	0x15, 7	; 21
    1202:	03 c0       	rjmp	.+6      	; 0x120a <http_home+0x102>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "1\">ON" ), dlen );
    1204:	68 e0       	ldi	r22, 0x08	; 8
    1206:	74 e0       	ldi	r23, 0x04	; 4
    1208:	02 c0       	rjmp	.+4      	; 0x120e <http_home+0x106>
	else
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "0\">OFF" ), dlen );
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	74 e0       	ldi	r23, 0x04	; 4
    120e:	c7 01       	movw	r24, r14
    1210:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    1214:	ac 01       	movw	r20, r24

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "</a> ]<br><br>" ), dlen );
    1216:	62 ef       	ldi	r22, 0xF2	; 242
    1218:	73 e0       	ldi	r23, 0x03	; 3
    121a:	c7 01       	movw	r24, r14
    121c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	// read adc0
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "ACD0 = " ), dlen );
    1220:	ac 01       	movw	r20, r24
    1222:	6a ee       	ldi	r22, 0xEA	; 234
    1224:	73 e0       	ldi	r23, 0x03	; 3
    1226:	c7 01       	movw	r24, r14
    1228:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    122c:	8c 01       	movw	r16, r24
	adc0_value = adc_read ( 0 );
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <adc_read>
	print_decimal ( generic_buf, 4, adc0_value );
    1234:	24 e0       	ldi	r18, 0x04	; 4
    1236:	c2 2e       	mov	r12, r18
    1238:	d1 2c       	mov	r13, r1
    123a:	cc 0e       	add	r12, r28
    123c:	dd 1e       	adc	r13, r29
    123e:	ac 01       	movw	r20, r24
    1240:	64 e0       	ldi	r22, 0x04	; 4
    1242:	c6 01       	movw	r24, r12
    1244:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
	generic_buf[ 4 ] = '\0';
    1248:	18 86       	std	Y+8, r1	; 0x08
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    124a:	a8 01       	movw	r20, r16
    124c:	b6 01       	movw	r22, r12
    124e:	c7 01       	movw	r24, r14
    1250:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <tcp_puts_data>
	
	// read temp
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<br><br>Temparature = " ), dlen );
    1254:	ac 01       	movw	r20, r24
    1256:	63 ed       	ldi	r22, 0xD3	; 211
    1258:	73 e0       	ldi	r23, 0x03	; 3
    125a:	c7 01       	movw	r24, r14
    125c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    1260:	8c 01       	movw	r16, r24
	temp_value = adc_read_temp();
    1262:	0e 94 06 14 	call	0x280c	; 0x280c <adc_read_temp>
	print_decimal ( generic_buf, 2, temp_value );
    1266:	99 27       	eor	r25, r25
    1268:	ac 01       	movw	r20, r24
    126a:	62 e0       	ldi	r22, 0x02	; 2
    126c:	c6 01       	movw	r24, r12
    126e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
	generic_buf[ 2 ] = '\0';
    1272:	1e 82       	std	Y+6, r1	; 0x06
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    1274:	a8 01       	movw	r20, r16
    1276:	b6 01       	movw	r22, r12
    1278:	c7 01       	movw	r24, r14
    127a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <tcp_puts_data>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "&deg;C<br>" ), dlen );
    127e:	ac 01       	movw	r20, r24
    1280:	68 ec       	ldi	r22, 0xC8	; 200
    1282:	73 e0       	ldi	r23, 0x03	; 3
    1284:	c7 01       	movw	r24, r14
    1286:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	
	// send temp to server configuration
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P)tag_form, dlen );
    128a:	ac 01       	movw	r20, r24
    128c:	61 ea       	ldi	r22, 0xA1	; 161
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	c7 01       	movw	r24, r14
    1292:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<INPUT TYPE=\"hidden\" NAME=\"tc\" VALUE=\"1\">Send Temparature in <INPUT TYPE=\"checkbox\" NAME=\"en\"" ), dlen );
    1296:	ac 01       	movw	r20, r24
    1298:	6a e6       	ldi	r22, 0x6A	; 106
    129a:	73 e0       	ldi	r23, 0x03	; 3
    129c:	c7 01       	movw	r24, r14
    129e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    12a2:	ac 01       	movw	r20, r24
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 

              __asm__ __volatile__ (
    12a4:	83 e0       	ldi	r24, 0x03	; 3
    12a6:	a8 e0       	ldi	r26, 0x08	; 8
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	fe 01       	movw	r30, r28
    12ac:	31 96       	adiw	r30, 0x01	; 1
    12ae:	18 2e       	mov	r1, r24
    12b0:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>
	eeprom_read_block ( count_time_temp, ee_count_time, 3 );
	if ( count_time_temp[0] )
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	88 23       	and	r24, r24
    12b8:	31 f0       	breq	.+12     	; 0x12c6 <http_home+0x1be>
		dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "CHECKED" ), dlen );
    12ba:	62 e6       	ldi	r22, 0x62	; 98
    12bc:	73 e0       	ldi	r23, 0x03	; 3
    12be:	c7 01       	movw	r24, r14
    12c0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    12c4:	ac 01       	movw	r20, r24
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "> Enable " ), dlen );
    12c6:	68 e5       	ldi	r22, 0x58	; 88
    12c8:	73 e0       	ldi	r23, 0x03	; 3
    12ca:	c7 01       	movw	r24, r14
    12cc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<INPUT TYPE=\"text\" NAME=\"h\" size=\"2\" maxlength=\"2\" VALUE=\"" ), dlen );
    12d0:	ac 01       	movw	r20, r24
    12d2:	6d e1       	ldi	r22, 0x1D	; 29
    12d4:	73 e0       	ldi	r23, 0x03	; 3
    12d6:	c7 01       	movw	r24, r14
    12d8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    12dc:	8c 01       	movw	r16, r24
	print_decimal ( generic_buf, 2, count_time_temp[1] );
    12de:	4a 81       	ldd	r20, Y+2	; 0x02
    12e0:	55 27       	eor	r21, r21
    12e2:	62 e0       	ldi	r22, 0x02	; 2
    12e4:	c6 01       	movw	r24, r12
    12e6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
	generic_buf[ 2 ] = '\0';
    12ea:	1e 82       	std	Y+6, r1	; 0x06
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    12ec:	a8 01       	movw	r20, r16
    12ee:	b6 01       	movw	r22, r12
    12f0:	c7 01       	movw	r24, r14
    12f2:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <tcp_puts_data>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"> Hours <INPUT TYPE=\"text\" NAME=\"m\" size=\"2\" maxlength=\"2\" VALUE=\"" ), dlen );
    12f6:	ac 01       	movw	r20, r24
    12f8:	69 ed       	ldi	r22, 0xD9	; 217
    12fa:	72 e0       	ldi	r23, 0x02	; 2
    12fc:	c7 01       	movw	r24, r14
    12fe:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    1302:	8c 01       	movw	r16, r24
	print_decimal ( generic_buf, 2, count_time_temp[2] );
    1304:	4b 81       	ldd	r20, Y+3	; 0x03
    1306:	55 27       	eor	r21, r21
    1308:	62 e0       	ldi	r22, 0x02	; 2
    130a:	c6 01       	movw	r24, r12
    130c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
	generic_buf[ 2 ] = '\0';
    1310:	1e 82       	std	Y+6, r1	; 0x06
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    1312:	a8 01       	movw	r20, r16
    1314:	b6 01       	movw	r22, r12
    1316:	c7 01       	movw	r24, r14
    1318:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <tcp_puts_data>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"> Minutes<input type=\"submit\" value=\"OK\"></form>" ), dlen );
    131c:	ac 01       	movw	r20, r24
    131e:	67 ea       	ldi	r22, 0xA7	; 167
    1320:	72 e0       	ldi	r23, 0x02	; 2
    1322:	c7 01       	movw	r24, r14
    1324:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	
	// AVR IP address
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P) tag_form, dlen );
    1328:	ac 01       	movw	r20, r24
    132a:	61 ea       	ldi	r22, 0xA1	; 161
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	c7 01       	movw	r24, r14
    1330:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input name=\"aip\" type=\"text\" size=\"15\" maxlength=\"15\" value=\"" ), dlen );
    1334:	ac 01       	movw	r20, r24
    1336:	68 e6       	ldi	r22, 0x68	; 104
    1338:	72 e0       	ldi	r23, 0x02	; 2
    133a:	c7 01       	movw	r24, r14
    133c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    1340:	8c 01       	movw	r16, r24
	print_ip ( generic_buf, (BYTE*)&avr_ip, 0 );
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	6d e0       	ldi	r22, 0x0D	; 13
    1346:	71 e0       	ldi	r23, 0x01	; 1
    1348:	c6 01       	movw	r24, r12
    134a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <print_ip>
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    134e:	a8 01       	movw	r20, r16
    1350:	b6 01       	movw	r22, r12
    1352:	c7 01       	movw	r24, r14
    1354:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <tcp_puts_data>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"> <input type=\"submit\" value=\"AVR IP\"></form>" ), dlen );
    1358:	ac 01       	movw	r20, r24
    135a:	69 e3       	ldi	r22, 0x39	; 57
    135c:	72 e0       	ldi	r23, 0x02	; 2
    135e:	c7 01       	movw	r24, r14
    1360:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	
	// Server IP address
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P)tag_form, dlen );
    1364:	ac 01       	movw	r20, r24
    1366:	61 ea       	ldi	r22, 0xA1	; 161
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	c7 01       	movw	r24, r14
    136c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input name=\"sip\" type=\"text\" size=\"15\" maxlength=\"15\" value=\"" ), dlen );
    1370:	ac 01       	movw	r20, r24
    1372:	6a ef       	ldi	r22, 0xFA	; 250
    1374:	71 e0       	ldi	r23, 0x01	; 1
    1376:	c7 01       	movw	r24, r14
    1378:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    137c:	8c 01       	movw	r16, r24
	print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	69 e0       	ldi	r22, 0x09	; 9
    1382:	71 e0       	ldi	r23, 0x01	; 1
    1384:	c6 01       	movw	r24, r12
    1386:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <print_ip>
	dlen = tcp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlen );
    138a:	a8 01       	movw	r20, r16
    138c:	b6 01       	movw	r22, r12
    138e:	c7 01       	movw	r24, r14
    1390:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <tcp_puts_data>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "\"> <input type=\"submit\" value=\"Server IP\"></form>" ), dlen );
    1394:	ac 01       	movw	r20, r24
    1396:	68 ec       	ldi	r22, 0xC8	; 200
    1398:	71 e0       	ldi	r23, 0x01	; 1
    139a:	c7 01       	movw	r24, r14
    139c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	
	// Write LCD form
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P) tag_form, dlen );
    13a0:	ac 01       	movw	r20, r24
    13a2:	61 ea       	ldi	r22, 0xA1	; 161
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	c7 01       	movw	r24, r14
    13a8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input name=\"lcd1\" type=\"text\" size=\"16\" maxlength=\"16\"> LCD Line 1<br>" ), dlen );
    13ac:	ac 01       	movw	r20, r24
    13ae:	60 e8       	ldi	r22, 0x80	; 128
    13b0:	71 e0       	ldi	r23, 0x01	; 1
    13b2:	c7 01       	movw	r24, r14
    13b4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input name=\"lcd2\" type=\"text\" size=\"16\" maxlength=\"16\"> LCD Line 2<br>" ), dlen );
    13b8:	ac 01       	movw	r20, r24
    13ba:	68 e3       	ldi	r22, 0x38	; 56
    13bc:	71 e0       	ldi	r23, 0x01	; 1
    13be:	c7 01       	movw	r24, r14
    13c0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<input type=\"submit\" value=\"Write LCD\"></form>" ), dlen );
    13c4:	ac 01       	movw	r20, r24
    13c6:	69 e0       	ldi	r22, 0x09	; 9
    13c8:	71 e0       	ldi	r23, 0x01	; 1
    13ca:	c7 01       	movw	r24, r14
    13cc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
	
	dlen = tcp_puts_data_p ( rxtx_buffer, (PGM_P)tag_hr, dlen );
    13d0:	ac 01       	movw	r20, r24
    13d2:	62 e8       	ldi	r22, 0x82	; 130
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	c7 01       	movw	r24, r14
    13d8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>

	dlen = tcp_puts_data_p ( rxtx_buffer, PSTR ( "<a href=\"./\"><b><font color=\"#000099\" size=\"+1\">Refresh</font></b></a>" ), dlen );
    13dc:	ac 01       	movw	r20, r24
    13de:	62 ec       	ldi	r22, 0xC2	; 194
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	c7 01       	movw	r24, r14
    13e4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <tcp_puts_data_p>
    13e8:	cd 5b       	subi	r28, 0xBD	; 189
    13ea:	df 4f       	sbci	r29, 0xFF	; 255
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	df 90       	pop	r13
    1404:	cf 90       	pop	r12
    1406:	08 95       	ret

00001408 <http_get_variable>:
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
    141a:	8b 01       	movw	r16, r22
    141c:	6a 01       	movw	r12, r20
    141e:	79 01       	movw	r14, r18
    1420:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <tcp_get_hlength>
    1424:	99 27       	eor	r25, r25
    1426:	9c 01       	movw	r18, r24
    1428:	2e 5d       	subi	r18, 0xDE	; 222
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	fe 01       	movw	r30, r28
    142e:	e8 0f       	add	r30, r24
    1430:	f9 1f       	adc	r31, r25
    1432:	b2 96       	adiw	r30, 0x22	; 34
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <http_get_variable+0x38>
    1436:	81 91       	ld	r24, Z+
    1438:	8f 33       	cpi	r24, 0x3F	; 63
    143a:	29 f0       	breq	.+10     	; 0x1446 <http_get_variable+0x3e>
    143c:	2f 5f       	subi	r18, 0xFF	; 255
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	20 17       	cp	r18, r16
    1442:	31 07       	cpc	r19, r17
    1444:	c0 f3       	brcs	.-16     	; 0x1436 <http_get_variable+0x2e>
    1446:	20 17       	cp	r18, r16
    1448:	31 07       	cpc	r19, r17
    144a:	31 f4       	brne	.+12     	; 0x1458 <http_get_variable+0x50>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	39 c0       	rjmp	.+114    	; 0x14c4 <http_get_variable+0xbc>
    1452:	2f 5f       	subi	r18, 0xFF	; 255
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	1d c0       	rjmp	.+58     	; 0x1492 <http_get_variable+0x8a>
    1458:	de 01       	movw	r26, r28
    145a:	a2 0f       	add	r26, r18
    145c:	b3 1f       	adc	r27, r19
    145e:	f6 01       	movw	r30, r12
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	12 c0       	rjmp	.+36     	; 0x1488 <http_get_variable+0x80>
    1464:	54 91       	lpm	r21, Z
    1466:	4c 91       	ld	r20, X
    1468:	4d 33       	cpi	r20, 0x3D	; 61
    146a:	21 f4       	brne	.+8      	; 0x1474 <http_get_variable+0x6c>
    146c:	88 23       	and	r24, r24
    146e:	11 f0       	breq	.+4      	; 0x1474 <http_get_variable+0x6c>
    1470:	55 23       	and	r21, r21
    1472:	79 f3       	breq	.-34     	; 0x1452 <http_get_variable+0x4a>
    1474:	45 17       	cp	r20, r21
    1476:	19 f0       	breq	.+6      	; 0x147e <http_get_variable+0x76>
    1478:	f6 01       	movw	r30, r12
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <http_get_variable+0x7a>
    147e:	31 96       	adiw	r30, 0x01	; 1
    1480:	8f 5f       	subi	r24, 0xFF	; 255
    1482:	2f 5f       	subi	r18, 0xFF	; 255
    1484:	3f 4f       	sbci	r19, 0xFF	; 255
    1486:	11 96       	adiw	r26, 0x01	; 1
    1488:	20 17       	cp	r18, r16
    148a:	31 07       	cpc	r19, r17
    148c:	58 f3       	brcs	.-42     	; 0x1464 <http_get_variable+0x5c>
    148e:	88 23       	and	r24, r24
    1490:	c1 f0       	breq	.+48     	; 0x14c2 <http_get_variable+0xba>
    1492:	de 01       	movw	r26, r28
    1494:	a2 0f       	add	r26, r18
    1496:	b3 1f       	adc	r27, r19
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	84 2f       	mov	r24, r20
    149e:	2c 91       	ld	r18, X
    14a0:	26 32       	cpi	r18, 0x26	; 38
    14a2:	29 f0       	breq	.+10     	; 0x14ae <http_get_variable+0xa6>
    14a4:	4f 5f       	subi	r20, 0xFF	; 255
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
    14a8:	11 96       	adiw	r26, 0x01	; 1
    14aa:	20 32       	cpi	r18, 0x20	; 32
    14ac:	29 f4       	brne	.+10     	; 0x14b8 <http_get_variable+0xb0>
    14ae:	e8 0e       	add	r14, r24
    14b0:	f1 1c       	adc	r15, r1
    14b2:	f7 01       	movw	r30, r14
    14b4:	10 82       	st	Z, r1
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <http_get_variable+0xba>
    14b8:	f7 01       	movw	r30, r14
    14ba:	e8 0f       	add	r30, r24
    14bc:	f1 1d       	adc	r31, r1
    14be:	20 83       	st	Z, r18
    14c0:	ed cf       	rjmp	.-38     	; 0x149c <http_get_variable+0x94>
    14c2:	99 27       	eor	r25, r25
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	08 95       	ret

000014d6 <http_webserver_process>:
    14d6:	2f 92       	push	r2
    14d8:	3f 92       	push	r3
    14da:	4f 92       	push	r4
    14dc:	5f 92       	push	r5
    14de:	6f 92       	push	r6
    14e0:	7f 92       	push	r7
    14e2:	8f 92       	push	r8
    14e4:	9f 92       	push	r9
    14e6:	af 92       	push	r10
    14e8:	bf 92       	push	r11
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	c7 54       	subi	r28, 0x47	; 71
    14fe:	d0 40       	sbci	r29, 0x00	; 0
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	2c 01       	movw	r4, r24
    150c:	26 96       	adiw	r28, 0x06	; 6
    150e:	7f af       	std	Y+63, r23	; 0x3f
    1510:	6e af       	std	Y+62, r22	; 0x3e
    1512:	26 97       	sbiw	r28, 0x06	; 6
    1514:	28 96       	adiw	r28, 0x08	; 8
    1516:	5f af       	std	Y+63, r21	; 0x3f
    1518:	4e af       	std	Y+62, r20	; 0x3e
    151a:	28 97       	sbiw	r28, 0x08	; 8
    151c:	fc 01       	movw	r30, r24
    151e:	92 a1       	ldd	r25, Z+34	; 0x22
    1520:	23 a1       	ldd	r18, Z+35	; 0x23
    1522:	87 89       	ldd	r24, Z+23	; 0x17
    1524:	86 30       	cpi	r24, 0x06	; 6
    1526:	09 f0       	breq	.+2      	; 0x152a <http_webserver_process+0x54>
    1528:	76 c1       	rjmp	.+748    	; 0x1816 <http_webserver_process+0x340>
    152a:	84 a1       	ldd	r24, Z+36	; 0x24
    152c:	88 23       	and	r24, r24
    152e:	09 f0       	breq	.+2      	; 0x1532 <http_webserver_process+0x5c>
    1530:	72 c1       	rjmp	.+740    	; 0x1816 <http_webserver_process+0x340>
    1532:	85 a1       	ldd	r24, Z+37	; 0x25
    1534:	80 35       	cpi	r24, 0x50	; 80
    1536:	09 f0       	breq	.+2      	; 0x153a <http_webserver_process+0x64>
    1538:	6e c1       	rjmp	.+732    	; 0x1816 <http_webserver_process+0x340>
    153a:	89 2f       	mov	r24, r25
    153c:	99 27       	eor	r25, r25
    153e:	38 2e       	mov	r3, r24
    1540:	22 24       	eor	r2, r2
    1542:	82 2f       	mov	r24, r18
    1544:	99 27       	eor	r25, r25
    1546:	28 2a       	or	r2, r24
    1548:	39 2a       	or	r3, r25
    154a:	87 a5       	ldd	r24, Z+47	; 0x2f
    154c:	99 27       	eor	r25, r25
    154e:	81 ff       	sbrs	r24, 1
    1550:	1a c0       	rjmp	.+52     	; 0x1586 <http_webserver_process+0xb0>
    1552:	5f 93       	push	r21
    1554:	4f 93       	push	r20
    1556:	26 96       	adiw	r28, 0x06	; 6
    1558:	8e ac       	ldd	r8, Y+62	; 0x3e
    155a:	9f ac       	ldd	r9, Y+63	; 0x3f
    155c:	26 97       	sbiw	r28, 0x06	; 6
    155e:	aa 24       	eor	r10, r10
    1560:	bb 24       	eor	r11, r11
    1562:	71 e0       	ldi	r23, 0x01	; 1
    1564:	c7 2e       	mov	r12, r23
    1566:	d1 2c       	mov	r13, r1
    1568:	ee 24       	eor	r14, r14
    156a:	01 e0       	ldi	r16, 0x01	; 1
    156c:	22 e1       	ldi	r18, 0x12	; 18
    156e:	40 e5       	ldi	r20, 0x50	; 80
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	b1 01       	movw	r22, r2
    1574:	c2 01       	movw	r24, r4
    1576:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <tcp_send_packet>
    157a:	80 91 02 01 	lds	r24, 0x0102
    157e:	80 64       	ori	r24, 0x40	; 64
    1580:	80 93 02 01 	sts	0x0102, r24
    1584:	24 c0       	rjmp	.+72     	; 0x15ce <http_webserver_process+0xf8>
    1586:	84 ff       	sbrs	r24, 4
    1588:	46 c1       	rjmp	.+652    	; 0x1816 <http_webserver_process+0x340>
    158a:	c2 01       	movw	r24, r4
    158c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <tcp_get_dlength>
    1590:	5c 01       	movw	r10, r24
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	f9 f4       	brne	.+62     	; 0x15d4 <http_webserver_process+0xfe>
    1596:	f2 01       	movw	r30, r4
    1598:	87 a5       	ldd	r24, Z+47	; 0x2f
    159a:	80 ff       	sbrs	r24, 0
    159c:	3c c1       	rjmp	.+632    	; 0x1816 <http_webserver_process+0x340>
    159e:	28 96       	adiw	r28, 0x08	; 8
    15a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    15a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    15a4:	28 97       	sbiw	r28, 0x08	; 8
    15a6:	9f 93       	push	r25
    15a8:	8f 93       	push	r24
    15aa:	26 96       	adiw	r28, 0x06	; 6
    15ac:	8e ac       	ldd	r8, Y+62	; 0x3e
    15ae:	9f ac       	ldd	r9, Y+63	; 0x3f
    15b0:	26 97       	sbiw	r28, 0x06	; 6
    15b2:	aa 24       	eor	r10, r10
    15b4:	bb 24       	eor	r11, r11
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	c6 2e       	mov	r12, r22
    15ba:	d1 2c       	mov	r13, r1
    15bc:	ee 24       	eor	r14, r14
    15be:	00 e0       	ldi	r16, 0x00	; 0
    15c0:	20 e1       	ldi	r18, 0x10	; 16
    15c2:	40 e5       	ldi	r20, 0x50	; 80
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	b1 01       	movw	r22, r2
    15c8:	c2 01       	movw	r24, r4
    15ca:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <tcp_send_packet>
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	21 c1       	rjmp	.+578    	; 0x1816 <http_webserver_process+0x340>
    15d4:	8e 01       	movw	r16, r28
    15d6:	0c 5f       	subi	r16, 0xFC	; 252
    15d8:	1f 4f       	sbci	r17, 0xFF	; 255
    15da:	98 01       	movw	r18, r16
    15dc:	43 e2       	ldi	r20, 0x23	; 35
    15de:	56 e0       	ldi	r21, 0x06	; 6
    15e0:	bc 01       	movw	r22, r24
    15e2:	c2 01       	movw	r24, r4
    15e4:	0e 94 04 0a 	call	0x1408	; 0x1408 <http_get_variable>
    15e8:	88 23       	and	r24, r24
    15ea:	b9 f0       	breq	.+46     	; 0x161a <http_webserver_process+0x144>
    15ec:	5d e0       	ldi	r21, 0x0D	; 13
    15ee:	c5 2e       	mov	r12, r21
    15f0:	51 e0       	ldi	r21, 0x01	; 1
    15f2:	d5 2e       	mov	r13, r21
    15f4:	b6 01       	movw	r22, r12
    15f6:	c8 01       	movw	r24, r16
    15f8:	0e 94 b2 07 	call	0xf64	; 0xf64 <http_get_ip>
    15fc:	84 30       	cpi	r24, 0x04	; 4
    15fe:	31 f4       	brne	.+12     	; 0x160c <http_webserver_process+0x136>
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    1600:	a0 e0       	ldi	r26, 0x00	; 0
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	f6 01       	movw	r30, r12
    1606:	18 2e       	mov	r1, r24
    1608:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__eeprom_write_block_1C1D1E>
    160c:	84 e0       	ldi	r24, 0x04	; 4
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	f6 01       	movw	r30, r12
    1614:	18 2e       	mov	r1, r24
    1616:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>
    161a:	8e 01       	movw	r16, r28
    161c:	0c 5f       	subi	r16, 0xFC	; 252
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	98 01       	movw	r18, r16
    1622:	4f e1       	ldi	r20, 0x1F	; 31
    1624:	56 e0       	ldi	r21, 0x06	; 6
    1626:	b5 01       	movw	r22, r10
    1628:	c2 01       	movw	r24, r4
    162a:	0e 94 04 0a 	call	0x1408	; 0x1408 <http_get_variable>
    162e:	88 23       	and	r24, r24
    1630:	b9 f0       	breq	.+46     	; 0x1660 <http_webserver_process+0x18a>
    1632:	49 e0       	ldi	r20, 0x09	; 9
    1634:	c4 2e       	mov	r12, r20
    1636:	41 e0       	ldi	r20, 0x01	; 1
    1638:	d4 2e       	mov	r13, r20
    163a:	b6 01       	movw	r22, r12
    163c:	c8 01       	movw	r24, r16
    163e:	0e 94 b2 07 	call	0xf64	; 0xf64 <http_get_ip>
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	31 f4       	brne	.+12     	; 0x1652 <http_webserver_process+0x17c>
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    1646:	a4 e0       	ldi	r26, 0x04	; 4
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	f6 01       	movw	r30, r12
    164c:	18 2e       	mov	r1, r24
    164e:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__eeprom_write_block_1C1D1E>
    1652:	84 e0       	ldi	r24, 0x04	; 4
    1654:	a4 e0       	ldi	r26, 0x04	; 4
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	f6 01       	movw	r30, r12
    165a:	18 2e       	mov	r1, r24
    165c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>
    1660:	9e 01       	movw	r18, r28
    1662:	2c 5f       	subi	r18, 0xFC	; 252
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
    1666:	4c e1       	ldi	r20, 0x1C	; 28
    1668:	56 e0       	ldi	r21, 0x06	; 6
    166a:	b5 01       	movw	r22, r10
    166c:	c2 01       	movw	r24, r4
    166e:	0e 94 04 0a 	call	0x1408	; 0x1408 <http_get_variable>
    1672:	88 23       	and	r24, r24
    1674:	31 f0       	breq	.+12     	; 0x1682 <http_webserver_process+0x1ac>
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	80 33       	cpi	r24, 0x30	; 48
    167a:	11 f4       	brne	.+4      	; 0x1680 <http_webserver_process+0x1aa>
    167c:	ae 9a       	sbi	0x15, 6	; 21
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <http_webserver_process+0x1ac>
    1680:	ae 98       	cbi	0x15, 6	; 21
    1682:	9e 01       	movw	r18, r28
    1684:	2c 5f       	subi	r18, 0xFC	; 252
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	49 e1       	ldi	r20, 0x19	; 25
    168a:	56 e0       	ldi	r21, 0x06	; 6
    168c:	b5 01       	movw	r22, r10
    168e:	c2 01       	movw	r24, r4
    1690:	0e 94 04 0a 	call	0x1408	; 0x1408 <http_get_variable>
    1694:	88 23       	and	r24, r24
    1696:	31 f0       	breq	.+12     	; 0x16a4 <http_webserver_process+0x1ce>
    1698:	8c 81       	ldd	r24, Y+4	; 0x04
    169a:	80 33       	cpi	r24, 0x30	; 48
    169c:	11 f4       	brne	.+4      	; 0x16a2 <http_webserver_process+0x1cc>
    169e:	af 9a       	sbi	0x15, 7	; 21
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <http_webserver_process+0x1ce>
    16a2:	af 98       	cbi	0x15, 7	; 21
    16a4:	8e 01       	movw	r16, r28
    16a6:	0c 5f       	subi	r16, 0xFC	; 252
    16a8:	1f 4f       	sbci	r17, 0xFF	; 255
    16aa:	98 01       	movw	r18, r16
    16ac:	44 e1       	ldi	r20, 0x14	; 20
    16ae:	56 e0       	ldi	r21, 0x06	; 6
    16b0:	b5 01       	movw	r22, r10
    16b2:	c2 01       	movw	r24, r4
    16b4:	0e 94 04 0a 	call	0x1408	; 0x1408 <http_get_variable>
    16b8:	88 23       	and	r24, r24
    16ba:	71 f0       	breq	.+28     	; 0x16d8 <http_webserver_process+0x202>
    16bc:	c8 01       	movw	r24, r16
    16be:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <urldecode>
    16c2:	8c e0       	ldi	r24, 0x0C	; 12
    16c4:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
    16c8:	c8 01       	movw	r24, r16
    16ca:	0e 94 a6 13 	call	0x274c	; 0x274c <lcd_print>
    16ce:	80 91 02 01 	lds	r24, 0x0102
    16d2:	84 60       	ori	r24, 0x04	; 4
    16d4:	80 93 02 01 	sts	0x0102, r24
    16d8:	98 01       	movw	r18, r16
    16da:	4f e0       	ldi	r20, 0x0F	; 15
    16dc:	56 e0       	ldi	r21, 0x06	; 6
    16de:	b5 01       	movw	r22, r10
    16e0:	c2 01       	movw	r24, r4
    16e2:	0e 94 04 0a 	call	0x1408	; 0x1408 <http_get_variable>
    16e6:	88 23       	and	r24, r24
    16e8:	71 f0       	breq	.+28     	; 0x1706 <http_webserver_process+0x230>
    16ea:	c8 01       	movw	r24, r16
    16ec:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <urldecode>
    16f0:	8a e0       	ldi	r24, 0x0A	; 10
    16f2:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
    16f6:	c8 01       	movw	r24, r16
    16f8:	0e 94 a6 13 	call	0x274c	; 0x274c <lcd_print>
    16fc:	80 91 02 01 	lds	r24, 0x0102
    1700:	84 60       	ori	r24, 0x04	; 4
    1702:	80 93 02 01 	sts	0x0102, r24
    1706:	98 01       	movw	r18, r16
    1708:	4c e0       	ldi	r20, 0x0C	; 12
    170a:	56 e0       	ldi	r21, 0x06	; 6
    170c:	b5 01       	movw	r22, r10
    170e:	c2 01       	movw	r24, r4
    1710:	0e 94 04 0a 	call	0x1408	; 0x1408 <http_get_variable>
    1714:	88 23       	and	r24, r24
    1716:	09 f4       	brne	.+2      	; 0x171a <http_webserver_process+0x244>
    1718:	45 c0       	rjmp	.+138    	; 0x17a4 <http_webserver_process+0x2ce>
    171a:	98 01       	movw	r18, r16
    171c:	49 e0       	ldi	r20, 0x09	; 9
    171e:	56 e0       	ldi	r21, 0x06	; 6
    1720:	b5 01       	movw	r22, r10
    1722:	c2 01       	movw	r24, r4
    1724:	0e 94 04 0a 	call	0x1408	; 0x1408 <http_get_variable>
    1728:	88 23       	and	r24, r24
    172a:	19 f0       	breq	.+6      	; 0x1732 <http_webserver_process+0x25c>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <http_webserver_process+0x25e>
    1732:	19 82       	std	Y+1, r1	; 0x01
    1734:	8e 01       	movw	r16, r28
    1736:	0c 5f       	subi	r16, 0xFC	; 252
    1738:	1f 4f       	sbci	r17, 0xFF	; 255
    173a:	98 01       	movw	r18, r16
    173c:	47 e0       	ldi	r20, 0x07	; 7
    173e:	56 e0       	ldi	r21, 0x06	; 6
    1740:	b5 01       	movw	r22, r10
    1742:	c2 01       	movw	r24, r4
    1744:	0e 94 04 0a 	call	0x1408	; 0x1408 <http_get_variable>
    1748:	88 23       	and	r24, r24
    174a:	49 f0       	breq	.+18     	; 0x175e <http_webserver_process+0x288>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	2a e0       	ldi	r18, 0x0A	; 10
    1750:	82 9f       	mul	r24, r18
    1752:	c0 01       	movw	r24, r0
    1754:	11 24       	eor	r1, r1
    1756:	2d 81       	ldd	r18, Y+5	; 0x05
    1758:	28 0f       	add	r18, r24
    175a:	20 51       	subi	r18, 0x10	; 16
    175c:	2a 83       	std	Y+2, r18	; 0x02
    175e:	98 01       	movw	r18, r16
    1760:	45 e0       	ldi	r20, 0x05	; 5
    1762:	56 e0       	ldi	r21, 0x06	; 6
    1764:	b5 01       	movw	r22, r10
    1766:	c2 01       	movw	r24, r4
    1768:	0e 94 04 0a 	call	0x1408	; 0x1408 <http_get_variable>
    176c:	88 23       	and	r24, r24
    176e:	49 f0       	breq	.+18     	; 0x1782 <http_webserver_process+0x2ac>
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	2a e0       	ldi	r18, 0x0A	; 10
    1774:	82 9f       	mul	r24, r18
    1776:	c0 01       	movw	r24, r0
    1778:	11 24       	eor	r1, r1
    177a:	2d 81       	ldd	r18, Y+5	; 0x05
    177c:	28 0f       	add	r18, r24
    177e:	20 51       	subi	r18, 0x10	; 16
    1780:	2b 83       	std	Y+3, r18	; 0x03
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	48 e0       	ldi	r20, 0x08	; 8
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	fe 01       	movw	r30, r28
    178a:	31 96       	adiw	r30, 0x01	; 1
    178c:	da 01       	movw	r26, r20
    178e:	18 2e       	mov	r1, r24
    1790:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__eeprom_write_block_1C1D1E>
    1794:	e7 e1       	ldi	r30, 0x17	; 23
    1796:	f1 e0       	ldi	r31, 0x01	; 1
    1798:	da 01       	movw	r26, r20
    179a:	18 2e       	mov	r1, r24
    179c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>
    17a0:	10 92 1a 01 	sts	0x011A, r1
    17a4:	c2 01       	movw	r24, r4
    17a6:	0e 94 84 08 	call	0x1108	; 0x1108 <http_home>
    17aa:	3c 01       	movw	r6, r24
    17ac:	28 96       	adiw	r28, 0x08	; 8
    17ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    17b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    17b2:	28 97       	sbiw	r28, 0x08	; 8
    17b4:	ff 93       	push	r31
    17b6:	ef 93       	push	r30
    17b8:	26 96       	adiw	r28, 0x06	; 6
    17ba:	8e ac       	ldd	r8, Y+62	; 0x3e
    17bc:	9f ac       	ldd	r9, Y+63	; 0x3f
    17be:	26 97       	sbiw	r28, 0x06	; 6
    17c0:	aa 24       	eor	r10, r10
    17c2:	bb 24       	eor	r11, r11
    17c4:	31 e0       	ldi	r19, 0x01	; 1
    17c6:	c3 2e       	mov	r12, r19
    17c8:	d1 2c       	mov	r13, r1
    17ca:	ee 24       	eor	r14, r14
    17cc:	00 e0       	ldi	r16, 0x00	; 0
    17ce:	20 e1       	ldi	r18, 0x10	; 16
    17d0:	40 e5       	ldi	r20, 0x50	; 80
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	b1 01       	movw	r22, r2
    17d6:	c2 01       	movw	r24, r4
    17d8:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <tcp_send_packet>
    17dc:	28 96       	adiw	r28, 0x08	; 8
    17de:	8e ad       	ldd	r24, Y+62	; 0x3e
    17e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    17e2:	28 97       	sbiw	r28, 0x08	; 8
    17e4:	9f 93       	push	r25
    17e6:	8f 93       	push	r24
    17e8:	26 96       	adiw	r28, 0x06	; 6
    17ea:	8e ac       	ldd	r8, Y+62	; 0x3e
    17ec:	9f ac       	ldd	r9, Y+63	; 0x3f
    17ee:	26 97       	sbiw	r28, 0x06	; 6
    17f0:	53 01       	movw	r10, r6
    17f2:	cc 24       	eor	r12, r12
    17f4:	dd 24       	eor	r13, r13
    17f6:	29 e1       	ldi	r18, 0x19	; 25
    17f8:	40 e5       	ldi	r20, 0x50	; 80
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	b1 01       	movw	r22, r2
    17fe:	c2 01       	movw	r24, r4
    1800:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <tcp_send_packet>
    1804:	80 91 02 01 	lds	r24, 0x0102
    1808:	8f 7b       	andi	r24, 0xBF	; 191
    180a:	80 93 02 01 	sts	0x0102, r24
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	c9 5b       	subi	r28, 0xB9	; 185
    1818:	df 4f       	sbci	r29, 0xFF	; 255
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	9f 90       	pop	r9
    1838:	8f 90       	pop	r8
    183a:	7f 90       	pop	r7
    183c:	6f 90       	pop	r6
    183e:	5f 90       	pop	r5
    1840:	4f 90       	pop	r4
    1842:	3f 90       	pop	r3
    1844:	2f 90       	pop	r2
    1846:	08 95       	ret

00001848 <arp_generate_packet>:
// Description : generate arp packet
//
//********************************************************************************************
void arp_generate_packet ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	fc 01       	movw	r30, r24
	unsigned char i;
	
	// setup hardware type to ethernet 0x0001
	rxtx_buffer[ ARP_HARDWARE_TYPE_H_P ] = ARP_HARDWARE_TYPE_H_V;
    184e:	16 86       	std	Z+14, r1	; 0x0e
	rxtx_buffer[ ARP_HARDWARE_TYPE_L_P ] = ARP_HARDWARE_TYPE_L_V;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	87 87       	std	Z+15, r24	; 0x0f
	
	// setup protocol type to ip 0x0800
	rxtx_buffer[ ARP_PROTOCOL_H_P ] = ARP_PROTOCOL_H_V;
    1854:	88 e0       	ldi	r24, 0x08	; 8
    1856:	80 8b       	std	Z+16, r24	; 0x10
	rxtx_buffer[ ARP_PROTOCOL_L_P ] = ARP_PROTOCOL_L_V;
    1858:	11 8a       	std	Z+17, r1	; 0x11

	// setup hardware length to 0x06
	rxtx_buffer[ ARP_HARDWARE_SIZE_P ] = ARP_HARDWARE_SIZE_V;
    185a:	86 e0       	ldi	r24, 0x06	; 6
    185c:	82 8b       	std	Z+18, r24	; 0x12

	// setup protocol length to 0x04
	rxtx_buffer[ ARP_PROTOCOL_SIZE_P ] = ARP_PROTOCOL_SIZE_V;
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	83 8b       	std	Z+19, r24	; 0x13
    1862:	9b 01       	movw	r18, r22
    1864:	df 01       	movw	r26, r30
    1866:	63 e0       	ldi	r22, 0x03	; 3
    1868:	71 e0       	ldi	r23, 0x01	; 1

	// setup arp destination and source mac address
	for ( i=0; i<sizeof(MAC_ADDR); i++)
	{
		rxtx_buffer[ ARP_DST_MAC_P + i ] = dest_mac[i];
    186a:	e9 01       	movw	r28, r18
    186c:	89 91       	ld	r24, Y+
    186e:	9e 01       	movw	r18, r28
    1870:	ed 01       	movw	r28, r26
    1872:	88 a3       	std	Y+32, r24	; 0x20
		rxtx_buffer[ ARP_SRC_MAC_P + i ] = avr_mac.byte[i];
    1874:	eb 01       	movw	r28, r22
    1876:	89 91       	ld	r24, Y+
    1878:	be 01       	movw	r22, r28
    187a:	ed 01       	movw	r28, r26
    187c:	8e 8b       	std	Y+22, r24	; 0x16
    187e:	11 96       	adiw	r26, 0x01	; 1
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	69 30       	cpi	r22, 0x09	; 9
    1884:	78 07       	cpc	r23, r24
    1886:	89 f7       	brne	.-30     	; 0x186a <arp_generate_packet+0x22>
    1888:	ea 01       	movw	r28, r20
    188a:	7c 96       	adiw	r30, 0x1c	; 28
    188c:	ad e0       	ldi	r26, 0x0D	; 13
    188e:	b1 e0       	ldi	r27, 0x01	; 1
	}
	
	// setup arp destination and source ip address
	for ( i=0; i<sizeof(IP_ADDR); i++)
	{
		rxtx_buffer[ ARP_DST_IP_P + i ] = dest_ip[i];
    1890:	89 91       	ld	r24, Y+
    1892:	82 87       	std	Z+10, r24	; 0x0a
		rxtx_buffer[ ARP_SRC_IP_P + i ] = avr_ip.byte[i];
    1894:	8d 91       	ld	r24, X+
    1896:	81 93       	st	Z+, r24
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	a1 31       	cpi	r26, 0x11	; 17
    189c:	b8 07       	cpc	r27, r24
    189e:	c1 f7       	brne	.-16     	; 0x1890 <arp_generate_packet+0x48>
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <arp_packet_is_arp>:
	}
}
//********************************************************************************************
//
// Function : arp_send_request
// Description : send arp request packet (who is?) to network.
//
//********************************************************************************************
void arp_send_request ( BYTE *rxtx_buffer, BYTE *dest_ip )
{
	unsigned char i;
	MAC_ADDR dest_mac;

	// generate ethernet header
	for ( i=0; i<sizeof(MAC_ADDR); i++)
		dest_mac.byte[i] = 0xff;
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_ARP_V}, (BYTE*)&dest_mac );

	// generate arp packet
	for ( i=0; i<sizeof(MAC_ADDR); i++)
		dest_mac.byte[i] = 0x00;
	
	// set arp opcode is request
	rxtx_buffer[ ARP_OPCODE_H_P ] = ARP_OPCODE_REQUEST_H_V;
	rxtx_buffer[ ARP_OPCODE_L_P ] = ARP_OPCODE_REQUEST_L_V;
	arp_generate_packet ( rxtx_buffer, (BYTE*)&dest_mac, dest_ip );
	
	// send arp packet to network
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER) + sizeof(ARP_PACKET) );
}
//*******************************************************************************************
//
// Function : arp_packet_is_arp
// Description : check received packet, that packet is match with arp and avr ip or not?
//
//*******************************************************************************************
BYTE arp_packet_is_arp ( BYTE *rxtx_buffer, WORD_BYTES opcode )
{
    18a6:	fc 01       	movw	r30, r24
	BYTE i;

	// if packet type is not arp packet exit from function
	if( rxtx_buffer[ ETH_TYPE_H_P ] != ETH_TYPE_ARP_H_V || rxtx_buffer[ ETH_TYPE_L_P ] != ETH_TYPE_ARP_L_V)
    18a8:	84 85       	ldd	r24, Z+12	; 0x0c
    18aa:	88 30       	cpi	r24, 0x08	; 8
    18ac:	c9 f4       	brne	.+50     	; 0x18e0 <arp_packet_is_arp+0x3a>
    18ae:	85 85       	ldd	r24, Z+13	; 0x0d
    18b0:	86 30       	cpi	r24, 0x06	; 6
    18b2:	b1 f4       	brne	.+44     	; 0x18e0 <arp_packet_is_arp+0x3a>
		return 0;
	// check arp request opcode
	if ( rxtx_buffer[ ARP_OPCODE_H_P ] != opcode.byte.high || rxtx_buffer[ ARP_OPCODE_L_P ] != opcode.byte.low )
    18b4:	84 89       	ldd	r24, Z+20	; 0x14
    18b6:	87 17       	cp	r24, r23
    18b8:	99 f4       	brne	.+38     	; 0x18e0 <arp_packet_is_arp+0x3a>
    18ba:	85 89       	ldd	r24, Z+21	; 0x15
    18bc:	86 17       	cp	r24, r22
    18be:	81 f4       	brne	.+32     	; 0x18e0 <arp_packet_is_arp+0x3a>
    18c0:	b6 96       	adiw	r30, 0x26	; 38
    18c2:	ad e0       	ldi	r26, 0x0D	; 13
    18c4:	b1 e0       	ldi	r27, 0x01	; 1
		return 0;
	// if destination ip address in arp packet not match with avr ip address
	for ( i=0; i<sizeof(IP_ADDR); i++ )
	{
		if ( rxtx_buffer[ ARP_DST_IP_P + i] != avr_ip.byte[i] )
    18c6:	90 81       	ld	r25, Z
    18c8:	8c 91       	ld	r24, X
    18ca:	98 17       	cp	r25, r24
    18cc:	49 f4       	brne	.+18     	; 0x18e0 <arp_packet_is_arp+0x3a>
    18ce:	31 96       	adiw	r30, 0x01	; 1
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	a1 31       	cpi	r26, 0x11	; 17
    18d6:	b8 07       	cpc	r27, r24
    18d8:	b1 f7       	brne	.-20     	; 0x18c6 <arp_packet_is_arp+0x20>
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	08 95       	ret
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	return 1;
}
    18e4:	08 95       	ret

000018e6 <arp_send_reply>:
//*******************************************************************************************
//
// Function : arp_send_reply
// Description : Send reply if recieved packet is ARP and IP address is match with avr_ip
//
//*******************************************************************************************
void arp_send_reply ( BYTE *rxtx_buffer, BYTE *dest_mac )
{
    18e6:	ef 92       	push	r14
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	8c 01       	movw	r16, r24
    18f0:	7b 01       	movw	r14, r22
	// generate ethernet header
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_ARP_V}, dest_mac );
    18f2:	ab 01       	movw	r20, r22
    18f4:	66 e0       	ldi	r22, 0x06	; 6
    18f6:	78 e0       	ldi	r23, 0x08	; 8
    18f8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eth_generate_header>

	// change packet type to echo reply
	rxtx_buffer[ ARP_OPCODE_H_P ] = ARP_OPCODE_REPLY_H_V;
    18fc:	f8 01       	movw	r30, r16
    18fe:	14 8a       	std	Z+20, r1	; 0x14
	rxtx_buffer[ ARP_OPCODE_L_P ] = ARP_OPCODE_REPLY_L_V;
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	85 8b       	std	Z+21, r24	; 0x15
	arp_generate_packet ( rxtx_buffer, dest_mac, &rxtx_buffer[ ARP_SRC_IP_P ] );
    1904:	a8 01       	movw	r20, r16
    1906:	44 5e       	subi	r20, 0xE4	; 228
    1908:	5f 4f       	sbci	r21, 0xFF	; 255
    190a:	b7 01       	movw	r22, r14
    190c:	c8 01       	movw	r24, r16
    190e:	0e 94 24 0c 	call	0x1848	; 0x1848 <arp_generate_packet>
	
	// send arp packet
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER) + sizeof(ARP_PACKET) );
    1912:	6a e2       	ldi	r22, 0x2A	; 42
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	c8 01       	movw	r24, r16
    1918:	0e 94 66 04 	call	0x8cc	; 0x8cc <enc28j60_packet_send>
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	ff 90       	pop	r15
    1922:	ef 90       	pop	r14
    1924:	08 95       	ret

00001926 <arp_send_request>:
    1926:	cf 92       	push	r12
    1928:	df 92       	push	r13
    192a:	ef 92       	push	r14
    192c:	ff 92       	push	r15
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	26 97       	sbiw	r28, 0x06	; 6
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	8c 01       	movw	r16, r24
    1948:	6b 01       	movw	r12, r22
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	8a 83       	std	Y+2, r24	; 0x02
    1950:	8b 83       	std	Y+3, r24	; 0x03
    1952:	8c 83       	std	Y+4, r24	; 0x04
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	8e 83       	std	Y+6, r24	; 0x06
    1958:	7e 01       	movw	r14, r28
    195a:	08 94       	sec
    195c:	e1 1c       	adc	r14, r1
    195e:	f1 1c       	adc	r15, r1
    1960:	a7 01       	movw	r20, r14
    1962:	66 e0       	ldi	r22, 0x06	; 6
    1964:	78 e0       	ldi	r23, 0x08	; 8
    1966:	c8 01       	movw	r24, r16
    1968:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eth_generate_header>
    196c:	19 82       	std	Y+1, r1	; 0x01
    196e:	1a 82       	std	Y+2, r1	; 0x02
    1970:	1b 82       	std	Y+3, r1	; 0x03
    1972:	1c 82       	std	Y+4, r1	; 0x04
    1974:	1d 82       	std	Y+5, r1	; 0x05
    1976:	1e 82       	std	Y+6, r1	; 0x06
    1978:	f8 01       	movw	r30, r16
    197a:	14 8a       	std	Z+20, r1	; 0x14
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	85 8b       	std	Z+21, r24	; 0x15
    1980:	a6 01       	movw	r20, r12
    1982:	b7 01       	movw	r22, r14
    1984:	c8 01       	movw	r24, r16
    1986:	0e 94 24 0c 	call	0x1848	; 0x1848 <arp_generate_packet>
    198a:	6a e2       	ldi	r22, 0x2A	; 42
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	c8 01       	movw	r24, r16
    1990:	0e 94 66 04 	call	0x8cc	; 0x8cc <enc28j60_packet_send>
    1994:	26 96       	adiw	r28, 0x06	; 6
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	df 90       	pop	r13
    19ae:	cf 90       	pop	r12
    19b0:	08 95       	ret

000019b2 <arp_who_is>:
}
//*******************************************************************************************
//
// Function : arp_who_is
// Description : send arp request to destination ip, and save destination mac to dest_mac.
// call this function to find the destination mac address before send other packet.
//
//*******************************************************************************************
BYTE arp_who_is ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	ec 01       	movw	r28, r24
    19be:	7b 01       	movw	r14, r22
	BYTE i;
	WORD dlength;

	// send arp request packet to network
	arp_send_request ( rxtx_buffer, dest_ip );
    19c0:	ba 01       	movw	r22, r20
    19c2:	0e 94 93 0c 	call	0x1926	; 0x1926 <arp_send_request>
    19c6:	10 e0       	ldi	r17, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19c8:	80 e4       	ldi	r24, 0x40	; 64
    19ca:	9c e9       	ldi	r25, 0x9C	; 156
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <arp_who_is+0x1a>

	for ( i=0; i<10; i++ )
	{
		// Time out 10x10ms = 100ms
		_delay_ms ( 10 );
		dlength = enc28j60_packet_receive( rxtx_buffer, MAX_RXTX_BUFFER );
    19d0:	6e ee       	ldi	r22, 0xEE	; 238
    19d2:	75 e0       	ldi	r23, 0x05	; 5
    19d4:	ce 01       	movw	r24, r28
    19d6:	0e 94 ad 04 	call	0x95a	; 0x95a <enc28j60_packet_receive>

		// destination ip address was found on network
		if ( dlength )
    19da:	89 2b       	or	r24, r25
    19dc:	91 f0       	breq	.+36     	; 0x1a02 <arp_who_is+0x50>
		{
			if ( arp_packet_is_arp ( rxtx_buffer, (WORD_BYTES){ARP_OPCODE_REPLY_V} ) )
    19de:	62 e0       	ldi	r22, 0x02	; 2
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	ce 01       	movw	r24, r28
    19e4:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <arp_packet_is_arp>
    19e8:	88 23       	and	r24, r24
    19ea:	59 f0       	breq	.+22     	; 0x1a02 <arp_who_is+0x50>
			{
				// copy destination mac address from arp reply packet to destination mac address
				memcpy ( dest_mac, &rxtx_buffer[ ETH_SRC_MAC_P ], sizeof(MAC_ADDR) );
    19ec:	d7 01       	movw	r26, r14
    19ee:	fe 01       	movw	r30, r28
    19f0:	36 96       	adiw	r30, 0x06	; 6
    19f2:	86 e0       	ldi	r24, 0x06	; 6
    19f4:	01 90       	ld	r0, Z+
    19f6:	0d 92       	st	X+, r0
    19f8:	81 50       	subi	r24, 0x01	; 1
    19fa:	e1 f7       	brne	.-8      	; 0x19f4 <arp_who_is+0x42>
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <arp_who_is+0x5a>
    1a02:	1f 5f       	subi	r17, 0xFF	; 255
    1a04:	1a 30       	cpi	r17, 0x0A	; 10
    1a06:	01 f7       	brne	.-64     	; 0x19c8 <arp_who_is+0x16>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	08 95       	ret

00001a18 <tcp_get_dlength>:
// Description : claculate tcp received data length
//
//*****************************************************************************************
WORD tcp_get_dlength ( BYTE *rxtx_buffer )
{
    1a18:	fc 01       	movw	r30, r24
	int dlength, hlength;

	dlength = ( rxtx_buffer[ IP_TOTLEN_H_P ] <<8 ) | ( rxtx_buffer[ IP_TOTLEN_L_P ] );
	dlength -= sizeof(IP_HEADER);
    1a1a:	80 89       	ldd	r24, Z+16	; 0x10
    1a1c:	99 27       	eor	r25, r25
    1a1e:	38 2f       	mov	r19, r24
    1a20:	22 27       	eor	r18, r18
    1a22:	81 89       	ldd	r24, Z+17	; 0x11
    1a24:	99 27       	eor	r25, r25
    1a26:	28 2b       	or	r18, r24
    1a28:	39 2b       	or	r19, r25
    1a2a:	24 51       	subi	r18, 0x14	; 20
    1a2c:	30 40       	sbci	r19, 0x00	; 0
	hlength = (rxtx_buffer[ TCP_HEADER_LEN_P ]>>4) * 4; // generate len in bytes;
	dlength -= hlength;
    1a2e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1a30:	82 95       	swap	r24
    1a32:	8f 70       	andi	r24, 0x0F	; 15
    1a34:	99 27       	eor	r25, r25
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	28 1b       	sub	r18, r24
    1a40:	39 0b       	sbc	r19, r25
    1a42:	37 ff       	sbrs	r19, 7
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <tcp_get_dlength+0x32>
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
	if ( dlength <= 0 )
		dlength=0;
	
	return ((WORD)dlength);
}
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	08 95       	ret

00001a4e <tcp_get_hlength>:
//*****************************************************************************************
//
// Function : tcp_get_hlength
// Description : claculate tcp received header length
//
//*****************************************************************************************
BYTE tcp_get_hlength ( BYTE *rxtx_buffer )
{
    1a4e:	fc 01       	movw	r30, r24
    1a50:	86 a5       	ldd	r24, Z+46	; 0x2e
    1a52:	82 95       	swap	r24
    1a54:	8f 70       	andi	r24, 0x0F	; 15
    1a56:	88 0f       	add	r24, r24
    1a58:	88 0f       	add	r24, r24
	return ((rxtx_buffer[ TCP_HEADER_LEN_P ]>>4) * 4); // generate len in bytes;
}
    1a5a:	99 27       	eor	r25, r25
    1a5c:	08 95       	ret

00001a5e <tcp_puts_data_p>:
//********************************************************************************************
//
// Function : tcp_puts_data_p
// Description : puts data from program memory to tx buffer
//
//********************************************************************************************
WORD tcp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
    1a5e:	dc 01       	movw	r26, r24
    1a60:	a4 0f       	add	r26, r20
    1a62:	b5 1f       	adc	r27, r21
    1a64:	d6 96       	adiw	r26, 0x36	; 54
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <tcp_puts_data_p+0x10>
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ TCP_DATA_P + offset ] = ch;
    1a68:	8d 93       	st	X+, r24
		offset++;
    1a6a:	4f 5f       	subi	r20, 0xFF	; 255
    1a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6e:	fb 01       	movw	r30, r22
    1a70:	6f 5f       	subi	r22, 0xFF	; 255
    1a72:	7f 4f       	sbci	r23, 0xFF	; 255
    1a74:	84 91       	lpm	r24, Z
    1a76:	88 23       	and	r24, r24
    1a78:	b9 f7       	brne	.-18     	; 0x1a68 <tcp_puts_data_p+0xa>
	}

	return offset;
}
    1a7a:	ca 01       	movw	r24, r20
    1a7c:	08 95       	ret

00001a7e <tcp_puts_data>:
//********************************************************************************************
//
// Function : tcp_puts_data
// Description : puts data from RAM to tx buffer
//
//********************************************************************************************
WORD tcp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
    1a7e:	db 01       	movw	r26, r22
    1a80:	fc 01       	movw	r30, r24
    1a82:	e4 0f       	add	r30, r20
    1a84:	f5 1f       	adc	r31, r21
    1a86:	f6 96       	adiw	r30, 0x36	; 54
    1a88:	04 c0       	rjmp	.+8      	; 0x1a92 <tcp_puts_data+0x14>
	while( *data )
	{
		rxtx_buffer[ TCP_DATA_P + offset ] = *data++;
    1a8a:	81 93       	st	Z+, r24
    1a8c:	11 96       	adiw	r26, 0x01	; 1
		offset++;
    1a8e:	4f 5f       	subi	r20, 0xFF	; 255
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255
    1a92:	8c 91       	ld	r24, X
    1a94:	88 23       	and	r24, r24
    1a96:	c9 f7       	brne	.-14     	; 0x1a8a <tcp_puts_data+0xc>
	}

	return offset;
}
    1a98:	ca 01       	movw	r24, r20
    1a9a:	08 95       	ret

00001a9c <tcp_send_packet>:
//********************************************************************************************
//
// Function : tcp_send_packet
// Description : send tcp packet to network.
//
//********************************************************************************************
void tcp_send_packet (
	BYTE *rxtx_buffer,
	WORD_BYTES dest_port,
	WORD_BYTES src_port,
	BYTE flags,
	BYTE max_segment_size,
	BYTE clear_seqack,
	WORD next_ack_num,
	WORD dlength,
	BYTE *dest_mac,
	BYTE *dest_ip )
{
    1a9c:	2f 92       	push	r2
    1a9e:	3f 92       	push	r3
    1aa0:	4f 92       	push	r4
    1aa2:	5f 92       	push	r5
    1aa4:	6f 92       	push	r6
    1aa6:	7f 92       	push	r7
    1aa8:	8f 92       	push	r8
    1aaa:	9f 92       	push	r9
    1aac:	af 92       	push	r10
    1aae:	bf 92       	push	r11
    1ab0:	cf 92       	push	r12
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	21 97       	sbiw	r28, 0x01	; 1
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	3c 01       	movw	r6, r24
    1ad2:	2b 01       	movw	r4, r22
    1ad4:	1a 01       	movw	r2, r20
    1ad6:	29 83       	std	Y+1, r18	; 0x01
    1ad8:	f0 2e       	mov	r15, r16
    1ada:	85 01       	movw	r16, r10
    1adc:	a4 01       	movw	r20, r8
	BYTE i, tseq;
	WORD_BYTES ck;
	
	// generate ethernet header
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_IP_V}, dest_mac );		
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	78 e0       	ldi	r23, 0x08	; 8
    1ae2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eth_generate_header>

	// sequence numbers:
	// add the rel ack num to SEQACK
	if ( next_ack_num )
    1ae6:	c1 14       	cp	r12, r1
    1ae8:	d1 04       	cpc	r13, r1
    1aea:	79 f0       	breq	.+30     	; 0x1b0a <tcp_send_packet+0x6e>
    1aec:	f3 01       	movw	r30, r6
    1aee:	b9 96       	adiw	r30, 0x29	; 41
    1af0:	34 e0       	ldi	r19, 0x04	; 4
	{
		for( i=4; i>0; i-- )
		{
			next_ack_num = rxtx_buffer [ TCP_SEQ_P + i - 1] + next_ack_num;
    1af2:	80 81       	ld	r24, Z
    1af4:	c8 0e       	add	r12, r24
    1af6:	d1 1c       	adc	r13, r1
			tseq = rxtx_buffer [ TCP_SEQACK_P + i - 1];
    1af8:	24 81       	ldd	r18, Z+4	; 0x04
			rxtx_buffer [ TCP_SEQACK_P + i - 1] = 0xff & next_ack_num;
    1afa:	c4 82       	std	Z+4, r12	; 0x04

			// copy the acknum sent to us into the sequence number
			rxtx_buffer[ TCP_SEQ_P + i - 1 ] = tseq;
    1afc:	20 83       	st	Z, r18

			next_ack_num >>= 8;
    1afe:	cd 2c       	mov	r12, r13
    1b00:	dd 24       	eor	r13, r13
    1b02:	31 50       	subi	r19, 0x01	; 1
    1b04:	31 97       	sbiw	r30, 0x01	; 1
    1b06:	33 23       	and	r19, r19
    1b08:	a1 f7       	brne	.-24     	; 0x1af2 <tcp_send_packet+0x56>
		}
	}
	
	// initial tcp sequence number
	// setup maximum segment size
	// require to setup first packet is receive or transmit only
	if ( max_segment_size )
    1b0a:	ff 20       	and	r15, r15
    1b0c:	b9 f0       	breq	.+46     	; 0x1b3c <tcp_send_packet+0xa0>
	{
		// initial sequence number
		rxtx_buffer[ TCP_SEQ_P + 0 ] = 0;
    1b0e:	f3 01       	movw	r30, r6
    1b10:	16 a2       	std	Z+38, r1	; 0x26
		rxtx_buffer[ TCP_SEQ_P + 1 ] = 0;
    1b12:	17 a2       	std	Z+39, r1	; 0x27
		rxtx_buffer[ TCP_SEQ_P + 2 ] = seqnum;
    1b14:	80 91 60 00 	lds	r24, 0x0060
    1b18:	80 a7       	std	Z+40, r24	; 0x28
		rxtx_buffer[ TCP_SEQ_P + 3 ] = 0;
    1b1a:	11 a6       	std	Z+41, r1	; 0x29
		seqnum += 2;
    1b1c:	8e 5f       	subi	r24, 0xFE	; 254
    1b1e:	80 93 60 00 	sts	0x0060, r24

		// setup maximum segment size
		rxtx_buffer[ TCP_OPTIONS_P + 0 ] = 2;
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	86 ab       	std	Z+54, r24	; 0x36
		rxtx_buffer[ TCP_OPTIONS_P + 1 ] = 4;
    1b26:	84 e0       	ldi	r24, 0x04	; 4
    1b28:	87 ab       	std	Z+55, r24	; 0x37
		rxtx_buffer[ TCP_OPTIONS_P + 2 ] = HIGH(1408);
    1b2a:	85 e0       	ldi	r24, 0x05	; 5
    1b2c:	80 af       	std	Z+56, r24	; 0x38
		rxtx_buffer[ TCP_OPTIONS_P + 3 ] = LOW(1408);
    1b2e:	80 e8       	ldi	r24, 0x80	; 128
    1b30:	81 af       	std	Z+57, r24	; 0x39
		// setup tcp header length 24 bytes: 6*32/8 = 24
		rxtx_buffer[ TCP_HEADER_LEN_P ] = 0x60;
    1b32:	80 e6       	ldi	r24, 0x60	; 96
    1b34:	86 a7       	std	Z+46, r24	; 0x2e
		dlength += 4;
    1b36:	0c 5f       	subi	r16, 0xFC	; 252
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	03 c0       	rjmp	.+6      	; 0x1b42 <tcp_send_packet+0xa6>
	}
	else
	{
		// no options: 20 bytes: 5*32/8 = 20
		rxtx_buffer[ TCP_HEADER_LEN_P ] = 0x50;
    1b3c:	80 e5       	ldi	r24, 0x50	; 80
    1b3e:	f3 01       	movw	r30, r6
    1b40:	86 a7       	std	Z+46, r24	; 0x2e
	}

	// generate ip header and checksum
	ip_generate_header ( rxtx_buffer, (WORD_BYTES){(sizeof(IP_HEADER) + sizeof(TCP_HEADER) + dlength)}, IP_PROTO_TCP_V, dest_ip );
    1b42:	b8 01       	movw	r22, r16
    1b44:	68 5d       	subi	r22, 0xD8	; 216
    1b46:	7f 4f       	sbci	r23, 0xFF	; 255
    1b48:	2e 89       	ldd	r18, Y+22	; 0x16
    1b4a:	3f 89       	ldd	r19, Y+23	; 0x17
    1b4c:	46 e0       	ldi	r20, 0x06	; 6
    1b4e:	c3 01       	movw	r24, r6
    1b50:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <ip_generate_header>
	
	// clear sequence ack number before send tcp SYN packet
	if ( clear_seqack )
    1b54:	ee 20       	and	r14, r14
    1b56:	29 f0       	breq	.+10     	; 0x1b62 <tcp_send_packet+0xc6>
	{
		rxtx_buffer[ TCP_SEQACK_P + 0 ] = 0;
    1b58:	f3 01       	movw	r30, r6
    1b5a:	12 a6       	std	Z+42, r1	; 0x2a
		rxtx_buffer[ TCP_SEQACK_P + 1 ] = 0;
    1b5c:	13 a6       	std	Z+43, r1	; 0x2b
		rxtx_buffer[ TCP_SEQACK_P + 2 ] = 0;
    1b5e:	14 a6       	std	Z+44, r1	; 0x2c
		rxtx_buffer[ TCP_SEQACK_P + 3 ] = 0;
    1b60:	15 a6       	std	Z+45, r1	; 0x2d
	}
		
	// setup tcp flags
	rxtx_buffer [ TCP_FLAGS_P ] = flags;
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	f3 01       	movw	r30, r6
    1b66:	87 a7       	std	Z+47, r24	; 0x2f
	
	// setup destination port
	rxtx_buffer [ TCP_DST_PORT_H_P ] = dest_port.byte.high;
    1b68:	54 a2       	std	Z+36, r5	; 0x24
	rxtx_buffer [ TCP_DST_PORT_L_P ] = dest_port.byte.low;
    1b6a:	45 a2       	std	Z+37, r4	; 0x25

	// setup source port
	rxtx_buffer [ TCP_SRC_PORT_H_P ] = src_port.byte.high;
    1b6c:	32 a2       	std	Z+34, r3	; 0x22
	rxtx_buffer [ TCP_SRC_PORT_L_P ] = src_port.byte.low;
    1b6e:	23 a2       	std	Z+35, r2	; 0x23

	// setup maximum windows size
	rxtx_buffer [ TCP_WINDOWSIZE_H_P ] = HIGH((MAX_RX_BUFFER-sizeof(IP_HEADER)-sizeof(ETH_HEADER)));
    1b70:	85 e0       	ldi	r24, 0x05	; 5
    1b72:	80 ab       	std	Z+48, r24	; 0x30
	rxtx_buffer [ TCP_WINDOWSIZE_L_P ] = LOW((MAX_RX_BUFFER-sizeof(IP_HEADER)-sizeof(ETH_HEADER)));
    1b74:	8a eb       	ldi	r24, 0xBA	; 186
    1b76:	81 ab       	std	Z+49, r24	; 0x31
	
	// setup urgend pointer (not used -> 0)
	rxtx_buffer[ TCP_URGENT_PTR_H_P ] = 0;
    1b78:	14 aa       	std	Z+52, r1	; 0x34
	rxtx_buffer[ TCP_URGENT_PTR_L_P ] = 0;
    1b7a:	15 aa       	std	Z+53, r1	; 0x35

	// clear old checksum and calculate new checksum
	rxtx_buffer[ TCP_CHECKSUM_H_P ] = 0;
    1b7c:	12 aa       	std	Z+50, r1	; 0x32
	rxtx_buffer[ TCP_CHECKSUM_L_P ] = 0;
    1b7e:	13 aa       	std	Z+51, r1	; 0x33
	// This is computed as the 16-bit one's complement of the one's complement 
	// sum of a pseudo header of information from the 
	// IP header, the TCP header, and the data, padded 
	// as needed with zero bytes at the end to make a multiple of two bytes. 
	// The pseudo header contains the following fields:
	//
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// +00+01+02+03+04+05+06+07+08+09+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// +                                       Source IP address                                       +
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// +                                     Destination IP address                                    +
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// +           0           +      IP Protocol      +                    Total length               +
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	ck.word = software_checksum( &rxtx_buffer[IP_SRC_IP_P], sizeof(TCP_HEADER)+dlength+8, IP_PROTO_TCP_V + sizeof(TCP_HEADER) + dlength );
    1b80:	06 5e       	subi	r16, 0xE6	; 230
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	98 01       	movw	r18, r16
    1b86:	44 27       	eor	r20, r20
    1b88:	55 27       	eor	r21, r21
    1b8a:	0e 5f       	subi	r16, 0xFE	; 254
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8e:	b8 01       	movw	r22, r16
    1b90:	c3 01       	movw	r24, r6
    1b92:	4a 96       	adiw	r24, 0x1a	; 26
    1b94:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <software_checksum>
	rxtx_buffer[ TCP_CHECKSUM_H_P ] = ck.byte.high;
    1b98:	f3 01       	movw	r30, r6
    1b9a:	92 ab       	std	Z+50, r25	; 0x32
	rxtx_buffer[ TCP_CHECKSUM_L_P ] = ck.byte.low;
    1b9c:	83 ab       	std	Z+51, r24	; 0x33

	// send packet to ethernet media
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER)+sizeof(IP_HEADER)+sizeof(TCP_HEADER)+dlength );
    1b9e:	06 5e       	subi	r16, 0xE6	; 230
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	b8 01       	movw	r22, r16
    1ba4:	c3 01       	movw	r24, r6
    1ba6:	0e 94 66 04 	call	0x8cc	; 0x8cc <enc28j60_packet_send>
    1baa:	21 96       	adiw	r28, 0x01	; 1
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	bf 90       	pop	r11
    1bc8:	af 90       	pop	r10
    1bca:	9f 90       	pop	r9
    1bcc:	8f 90       	pop	r8
    1bce:	7f 90       	pop	r7
    1bd0:	6f 90       	pop	r6
    1bd2:	5f 90       	pop	r5
    1bd4:	4f 90       	pop	r4
    1bd6:	3f 90       	pop	r3
    1bd8:	2f 90       	pop	r2
    1bda:	08 95       	ret

00001bdc <ip_packet_is_ip>:
// Description : Check incoming packet
//
//********************************************************************************************
BYTE ip_packet_is_ip ( BYTE *rxtx_buffer )
{
    1bdc:	fc 01       	movw	r30, r24
	unsigned char i;
	
	// if ethernet type is not ip
	if ( rxtx_buffer[ ETH_TYPE_H_P ] != ETH_TYPE_IP_H_V || rxtx_buffer[ ETH_TYPE_L_P ] != ETH_TYPE_IP_L_V)
    1bde:	84 85       	ldd	r24, Z+12	; 0x0c
    1be0:	88 30       	cpi	r24, 0x08	; 8
    1be2:	91 f4       	brne	.+36     	; 0x1c08 <ip_packet_is_ip+0x2c>
    1be4:	85 85       	ldd	r24, Z+13	; 0x0d
    1be6:	88 23       	and	r24, r24
    1be8:	79 f4       	brne	.+30     	; 0x1c08 <ip_packet_is_ip+0x2c>
    1bea:	ad e0       	ldi	r26, 0x0D	; 13
    1bec:	b1 e0       	ldi	r27, 0x01	; 1
		return 0;
	
	// if ip packet not send to avr
	for ( i=0; i<sizeof(IP_ADDR); i++ )
	{
		if ( rxtx_buffer[ IP_DST_IP_P + i ] != avr_ip.byte[i] )
    1bee:	96 8d       	ldd	r25, Z+30	; 0x1e
    1bf0:	8c 91       	ld	r24, X
    1bf2:	98 17       	cp	r25, r24
    1bf4:	49 f4       	brne	.+18     	; 0x1c08 <ip_packet_is_ip+0x2c>
    1bf6:	31 96       	adiw	r30, 0x01	; 1
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	a1 31       	cpi	r26, 0x11	; 17
    1bfe:	b8 07       	cpc	r27, r24
    1c00:	b1 f7       	brne	.-20     	; 0x1bee <ip_packet_is_ip+0x12>
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	08 95       	ret
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}
	
	// destination ip address match with avr ip address
	return 1;
}
    1c0c:	08 95       	ret

00001c0e <ip_generate_header>:
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	ec 01       	movw	r28, r24
    1c18:	8c 01       	movw	r16, r24
    1c1a:	02 5f       	subi	r16, 0xF2	; 242
    1c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1e:	85 e4       	ldi	r24, 0x45	; 69
    1c20:	8e 87       	std	Y+14, r24	; 0x0e
    1c22:	1f 86       	std	Y+15, r1	; 0x0f
    1c24:	78 8b       	std	Y+16, r23	; 0x10
    1c26:	69 8b       	std	Y+17, r22	; 0x11
    1c28:	80 91 62 00 	lds	r24, 0x0062
    1c2c:	8a 8b       	std	Y+18, r24	; 0x12
    1c2e:	80 91 61 00 	lds	r24, 0x0061
    1c32:	8b 8b       	std	Y+19, r24	; 0x13
    1c34:	80 91 61 00 	lds	r24, 0x0061
    1c38:	90 91 62 00 	lds	r25, 0x0062
    1c3c:	01 96       	adiw	r24, 0x01	; 1
    1c3e:	90 93 62 00 	sts	0x0062, r25
    1c42:	80 93 61 00 	sts	0x0061, r24
    1c46:	1c 8a       	std	Y+20, r1	; 0x14
    1c48:	1d 8a       	std	Y+21, r1	; 0x15
    1c4a:	80 e8       	ldi	r24, 0x80	; 128
    1c4c:	8e 8b       	std	Y+22, r24	; 0x16
    1c4e:	4f 8b       	std	Y+23, r20	; 0x17
    1c50:	fe 01       	movw	r30, r28
    1c52:	4d e0       	ldi	r20, 0x0D	; 13
    1c54:	51 e0       	ldi	r21, 0x01	; 1
    1c56:	d9 01       	movw	r26, r18
    1c58:	8d 91       	ld	r24, X+
    1c5a:	9d 01       	movw	r18, r26
    1c5c:	86 8f       	std	Z+30, r24	; 0x1e
    1c5e:	da 01       	movw	r26, r20
    1c60:	8d 91       	ld	r24, X+
    1c62:	ad 01       	movw	r20, r26
    1c64:	82 8f       	std	Z+26, r24	; 0x1a
    1c66:	31 96       	adiw	r30, 0x01	; 1
    1c68:	b1 e0       	ldi	r27, 0x01	; 1
    1c6a:	41 31       	cpi	r20, 0x11	; 17
    1c6c:	5b 07       	cpc	r21, r27
    1c6e:	99 f7       	brne	.-26     	; 0x1c56 <ip_generate_header+0x48>
    1c70:	18 8e       	std	Y+24, r1	; 0x18
    1c72:	19 8e       	std	Y+25, r1	; 0x19
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	64 e1       	ldi	r22, 0x14	; 20
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	c8 01       	movw	r24, r16
    1c82:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <software_checksum>
    1c86:	98 8f       	std	Y+24, r25	; 0x18
    1c88:	89 8f       	std	Y+25, r24	; 0x19
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <eth_generate_header>:
// ethernet type.
//
//********************************************************************************************
void eth_generate_header ( BYTE *rxtx_buffer, WORD_BYTES type, BYTE *dest_mac )
{
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	8c 01       	movw	r16, r24
    1c9e:	9a 01       	movw	r18, r20
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	c3 e0       	ldi	r28, 0x03	; 3
    1ca4:	d1 e0       	ldi	r29, 0x01	; 1
	BYTE i;
	//copy the destination mac from the source and fill my mac into src
	for ( i=0; i<sizeof(MAC_ADDR); i++)
	{
		rxtx_buffer[ ETH_DST_MAC_P + i ] = dest_mac[i];
    1ca6:	d9 01       	movw	r26, r18
    1ca8:	8d 91       	ld	r24, X+
    1caa:	9d 01       	movw	r18, r26
    1cac:	80 83       	st	Z, r24
		rxtx_buffer[ ETH_SRC_MAC_P + i ] = avr_mac.byte[i];
    1cae:	89 91       	ld	r24, Y+
    1cb0:	86 83       	std	Z+6, r24	; 0x06
    1cb2:	31 96       	adiw	r30, 0x01	; 1
    1cb4:	b1 e0       	ldi	r27, 0x01	; 1
    1cb6:	c9 30       	cpi	r28, 0x09	; 9
    1cb8:	db 07       	cpc	r29, r27
    1cba:	a9 f7       	brne	.-22     	; 0x1ca6 <eth_generate_header+0x12>
	}
	rxtx_buffer[ ETH_TYPE_H_P ] = type.byte.high;//HIGH(type);
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	74 87       	std	Z+12, r23	; 0x0c
	rxtx_buffer[ ETH_TYPE_L_P ] = type.byte.low;//LOW(type);
    1cc0:	65 87       	std	Z+13, r22	; 0x0d
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	08 95       	ret

00001ccc <software_checksum>:
}
//********************************************************************************************
//
// Function : software_checksum
// Description : 
// The Ip checksum is calculated over the ip header only starting
// with the header length field and a total length of 20 bytes
// unitl ip.dst
// You must set the IP checksum field to zero before you start
// the calculation.
// len for ip is 20.
//
// For UDP/TCP we do not make up the required pseudo header. Instead we 
// use the ip.src and ip.dst fields of the real packet:
// The udp checksum calculation starts with the ip.src field
// Ip.src=4bytes,Ip.dst=4 bytes,Udp header=8bytes + data length=16+len
// In other words the len here is 8 + length over which you actually
// want to calculate the checksum.
// You must set the checksum field to zero before you start
// the calculation.
// len for udp is: 8 + 8 + data length
// len for tcp is: 4+4 + 20 + option len + data length
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
//
//********************************************************************************************
WORD software_checksum(BYTE *rxtx_buffer, WORD len, DWORD sum)
{
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	eb 01       	movw	r28, r22
    1cd4:	ba 01       	movw	r22, r20
    1cd6:	a9 01       	movw	r20, r18
    1cd8:	10 c0       	rjmp	.+32     	; 0x1cfa <software_checksum+0x2e>
	// build the sum of 16bit words
	while(len>1)
	{
		sum += 0xFFFF & (*rxtx_buffer<<8|*(rxtx_buffer+1));
    1cda:	80 81       	ld	r24, Z
    1cdc:	99 27       	eor	r25, r25
    1cde:	98 2f       	mov	r25, r24
    1ce0:	88 27       	eor	r24, r24
    1ce2:	21 81       	ldd	r18, Z+1	; 0x01
    1ce4:	33 27       	eor	r19, r19
    1ce6:	82 2b       	or	r24, r18
    1ce8:	93 2b       	or	r25, r19
    1cea:	aa 27       	eor	r26, r26
    1cec:	bb 27       	eor	r27, r27
    1cee:	48 0f       	add	r20, r24
    1cf0:	59 1f       	adc	r21, r25
    1cf2:	6a 1f       	adc	r22, r26
    1cf4:	7b 1f       	adc	r23, r27
		rxtx_buffer+=2;
    1cf6:	32 96       	adiw	r30, 0x02	; 2
		len-=2;
    1cf8:	22 97       	sbiw	r28, 0x02	; 2
    1cfa:	c2 30       	cpi	r28, 0x02	; 2
    1cfc:	d1 05       	cpc	r29, r1
    1cfe:	68 f7       	brcc	.-38     	; 0x1cda <software_checksum+0xe>
	}
	// if there is a byte left then add it (padded with zero)
	if (len)
    1d00:	cd 2b       	or	r28, r29
    1d02:	69 f0       	breq	.+26     	; 0x1d1e <software_checksum+0x52>
	{
		sum += 0xFFFF & (*rxtx_buffer<<8);
    1d04:	80 81       	ld	r24, Z
    1d06:	99 27       	eor	r25, r25
    1d08:	98 2f       	mov	r25, r24
    1d0a:	88 27       	eor	r24, r24
    1d0c:	aa 27       	eor	r26, r26
    1d0e:	bb 27       	eor	r27, r27
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <software_checksum+0x4a>
	}
	// now calculate the sum over the bytes in the sum
	// until the result is only 16bit long
	while (sum>>16)
	{
		sum = (sum & 0xFFFF)+(sum >> 16);
    1d12:	60 70       	andi	r22, 0x00	; 0
    1d14:	70 70       	andi	r23, 0x00	; 0
    1d16:	48 0f       	add	r20, r24
    1d18:	59 1f       	adc	r21, r25
    1d1a:	6a 1f       	adc	r22, r26
    1d1c:	7b 1f       	adc	r23, r27
    1d1e:	cb 01       	movw	r24, r22
    1d20:	aa 27       	eor	r26, r26
    1d22:	bb 27       	eor	r27, r27
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	a1 05       	cpc	r26, r1
    1d28:	b1 05       	cpc	r27, r1
    1d2a:	99 f7       	brne	.-26     	; 0x1d12 <software_checksum+0x46>
    1d2c:	ca 01       	movw	r24, r20
    1d2e:	80 95       	com	r24
    1d30:	90 95       	com	r25
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	08 95       	ret

00001d38 <icmp_generate_packet>:
// Description : Send ARP reply packet from ARP request packet
//
//*******************************************************************************************
void icmp_generate_packet ( BYTE *rxtx_buffer )
{
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
	BYTE i;
	WORD_BYTES ck;
	
	// In send ICMP request case, generate new ICMP data.
	if ( rxtx_buffer[ ICMP_TYPE_P ] == ICMP_TYPE_ECHOREQUEST_V )
    1d3e:	dc 01       	movw	r26, r24
    1d40:	92 96       	adiw	r26, 0x22	; 34
    1d42:	8a a1       	ldd	r24, Y+34	; 0x22
    1d44:	88 30       	cpi	r24, 0x08	; 8
    1d46:	39 f4       	brne	.+14     	; 0x1d56 <icmp_generate_packet+0x1e>
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ba 96       	adiw	r30, 0x2a	; 42
    1d4c:	81 e4       	ldi	r24, 0x41	; 65
	{
		for ( i=0; i<ICMP_MAX_DATA; i++ )
		{
			rxtx_buffer[ ICMP_DATA_P + i ] = 'A' + i;
    1d4e:	81 93       	st	Z+, r24
    1d50:	8f 5f       	subi	r24, 0xFF	; 255
    1d52:	81 36       	cpi	r24, 0x61	; 97
    1d54:	e1 f7       	brne	.-8      	; 0x1d4e <icmp_generate_packet+0x16>
		}
	}
	// clear icmp checksum
	rxtx_buffer[ ICMP_CHECKSUM_H_P ] = 0;
    1d56:	1c a2       	std	Y+36, r1	; 0x24
	rxtx_buffer[ ICMP_CHECKSUM_L_P ] = 0;
    1d58:	1d a2       	std	Y+37, r1	; 0x25

	// calculate new checksum.
	// ICMP checksum calculation begin at ICMP type to ICMP data.
	// Before calculate new checksum the checksum field must be zero.
	ck.word = software_checksum ( &rxtx_buffer[ ICMP_TYPE_P ], sizeof(ICMP_PACKET), 0 );
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	68 e2       	ldi	r22, 0x28	; 40
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <software_checksum>
	rxtx_buffer[ ICMP_CHECKSUM_H_P ] = ck.byte.high;
    1d6c:	9c a3       	std	Y+36, r25	; 0x24
	rxtx_buffer[ ICMP_CHECKSUM_L_P ] = ck.byte.low;
    1d6e:	8d a3       	std	Y+37, r24	; 0x25
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	08 95       	ret

00001d76 <icmp_send_reply>:
}
//*******************************************************************************************
//
// Function : icmp_send_request
// Description : Send ARP request packet to destination.
//
//*******************************************************************************************
void icmp_send_request ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{	
	// set ethernet header
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_IP_V}, dest_mac );
	
	// generate ip header and checksum
	ip_generate_header (	rxtx_buffer, (WORD_BYTES){sizeof(IP_HEADER) + sizeof(ICMP_PACKET)}, IP_PROTO_ICMP_V, dest_ip );

	// generate icmp packet and checksum
	rxtx_buffer[ ICMP_TYPE_P ] = ICMP_TYPE_ECHOREQUEST_V;
	rxtx_buffer[ ICMP_CODE_P ] = 0;
	rxtx_buffer[ ICMP_IDENTIFIER_H_P ] = icmp_id;
	rxtx_buffer[ ICMP_IDENTIFIER_L_P ] = 0;
	rxtx_buffer[ ICMP_SEQUENCE_H_P ] = icmp_seq;
	rxtx_buffer[ ICMP_SEQUENCE_L_P ] = 0;
	icmp_id++;
	icmp_seq++;
	icmp_generate_packet ( rxtx_buffer );	

	// send packet to ethernet media
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER) + sizeof(IP_HEADER) + sizeof(ICMP_PACKET) );
}
//*******************************************************************************************
//
// Function : icmp_send_reply
// Description : Send ARP reply packet to destination.
//
//*******************************************************************************************
BYTE icmp_send_reply ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	ec 01       	movw	r28, r24
    1d80:	8a 01       	movw	r16, r20
	
	// check protocol is icmp or not?
	if ( rxtx_buffer [ IP_PROTO_P ] != IP_PROTO_ICMP_V )
    1d82:	8f 89       	ldd	r24, Y+23	; 0x17
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	11 f5       	brne	.+68     	; 0x1dcc <icmp_send_reply+0x56>
		return 0;
	
	// check icmp packet type is echo request or not?
	if ( rxtx_buffer [ ICMP_TYPE_P ] != ICMP_TYPE_ECHOREQUEST_V )
    1d88:	8a a1       	ldd	r24, Y+34	; 0x22
    1d8a:	88 30       	cpi	r24, 0x08	; 8
    1d8c:	f9 f4       	brne	.+62     	; 0x1dcc <icmp_send_reply+0x56>
		return 0;

	// set ethernet header
	eth_generate_header ( rxtx_buffer, (WORD_BYTES){ETH_TYPE_IP_V}, dest_mac );
    1d8e:	ab 01       	movw	r20, r22
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	78 e0       	ldi	r23, 0x08	; 8
    1d94:	ce 01       	movw	r24, r28
    1d96:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eth_generate_header>
	
	// generate ip header and checksum
	ip_generate_header ( rxtx_buffer, (WORD_BYTES){(rxtx_buffer[IP_TOTLEN_H_P]<<8)|rxtx_buffer[IP_TOTLEN_L_P]}, IP_PROTO_ICMP_V, dest_ip );
    1d9a:	68 89       	ldd	r22, Y+16	; 0x10
    1d9c:	77 27       	eor	r23, r23
    1d9e:	76 2f       	mov	r23, r22
    1da0:	66 27       	eor	r22, r22
    1da2:	89 89       	ldd	r24, Y+17	; 0x11
    1da4:	99 27       	eor	r25, r25
    1da6:	68 2b       	or	r22, r24
    1da8:	79 2b       	or	r23, r25
    1daa:	98 01       	movw	r18, r16
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	ce 01       	movw	r24, r28
    1db0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <ip_generate_header>

	// generate icmp packet
	rxtx_buffer[ ICMP_TYPE_P ] = ICMP_TYPE_ECHOREPLY_V;
    1db4:	1a a2       	std	Y+34, r1	; 0x22
	icmp_generate_packet ( rxtx_buffer );
    1db6:	ce 01       	movw	r24, r28
    1db8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <icmp_generate_packet>

	// send packet to ethernet media
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER) + sizeof(IP_HEADER) + sizeof(ICMP_PACKET) );
    1dbc:	6a e4       	ldi	r22, 0x4A	; 74
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	0e 94 66 04 	call	0x8cc	; 0x8cc <enc28j60_packet_send>
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <icmp_send_reply+0x5a>
	return 1;
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	08 95       	ret

00001dda <icmp_send_request>:
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	8c 01       	movw	r16, r24
    1de4:	7a 01       	movw	r14, r20
    1de6:	ab 01       	movw	r20, r22
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	78 e0       	ldi	r23, 0x08	; 8
    1dec:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eth_generate_header>
    1df0:	97 01       	movw	r18, r14
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	6c e3       	ldi	r22, 0x3C	; 60
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	c8 01       	movw	r24, r16
    1dfa:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <ip_generate_header>
    1dfe:	88 e0       	ldi	r24, 0x08	; 8
    1e00:	f8 01       	movw	r30, r16
    1e02:	82 a3       	std	Z+34, r24	; 0x22
    1e04:	13 a2       	std	Z+35, r1	; 0x23
    1e06:	80 91 63 00 	lds	r24, 0x0063
    1e0a:	86 a3       	std	Z+38, r24	; 0x26
    1e0c:	17 a2       	std	Z+39, r1	; 0x27
    1e0e:	80 91 64 00 	lds	r24, 0x0064
    1e12:	80 a7       	std	Z+40, r24	; 0x28
    1e14:	11 a6       	std	Z+41, r1	; 0x29
    1e16:	80 91 63 00 	lds	r24, 0x0063
    1e1a:	8f 5f       	subi	r24, 0xFF	; 255
    1e1c:	80 93 63 00 	sts	0x0063, r24
    1e20:	80 91 64 00 	lds	r24, 0x0064
    1e24:	8f 5f       	subi	r24, 0xFF	; 255
    1e26:	80 93 64 00 	sts	0x0064, r24
    1e2a:	c8 01       	movw	r24, r16
    1e2c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <icmp_generate_packet>
    1e30:	6a e4       	ldi	r22, 0x4A	; 74
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	c8 01       	movw	r24, r16
    1e36:	0e 94 66 04 	call	0x8cc	; 0x8cc <enc28j60_packet_send>
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	08 95       	ret

00001e44 <icmp_ping>:
}
//*******************************************************************************************
//
// Function : icmp_ping_server
// Description : Send ARP reply packet to destination.
//
//*******************************************************************************************
BYTE icmp_ping ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    1e44:	0f 93       	push	r16
    1e46:	1f 93       	push	r17
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	ec 01       	movw	r28, r24
    1e4e:	8a 01       	movw	r16, r20
	BYTE i;
	WORD dlength;
	
	// destination ip was not found on network.
	if ( arp_who_is ( rxtx_buffer, dest_mac, dest_ip ) == 0 )
    1e50:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <arp_who_is>
    1e54:	88 23       	and	r24, r24
    1e56:	f1 f0       	breq	.+60     	; 0x1e94 <icmp_ping+0x50>
		return 0;

	// send icmp request packet (ping) to server
	icmp_send_request ( rxtx_buffer, (BYTE*)&server_mac, dest_ip );
    1e58:	a8 01       	movw	r20, r16
    1e5a:	61 e1       	ldi	r22, 0x11	; 17
    1e5c:	71 e0       	ldi	r23, 0x01	; 1
    1e5e:	ce 01       	movw	r24, r28
    1e60:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <icmp_send_request>
    1e64:	10 e0       	ldi	r17, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e66:	80 e4       	ldi	r24, 0x40	; 64
    1e68:	9c e9       	ldi	r25, 0x9C	; 156
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <icmp_ping+0x26>

	for ( i=0; i<10; i++ )
	{
		_delay_ms( 10 );
		dlength = enc28j60_packet_receive( rxtx_buffer, MAX_RXTX_BUFFER );
    1e6e:	6e ee       	ldi	r22, 0xEE	; 238
    1e70:	75 e0       	ldi	r23, 0x05	; 5
    1e72:	ce 01       	movw	r24, r28
    1e74:	0e 94 ad 04 	call	0x95a	; 0x95a <enc28j60_packet_receive>

		if ( dlength )
    1e78:	89 2b       	or	r24, r25
    1e7a:	49 f0       	breq	.+18     	; 0x1e8e <icmp_ping+0x4a>
		{
			// check protocol is icmp or not?
			if ( rxtx_buffer [ IP_PROTO_P ] != IP_PROTO_ICMP_V )
    1e7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	31 f4       	brne	.+12     	; 0x1e8e <icmp_ping+0x4a>
				continue;
	
			// check icmp packet type is echo reply or not?
			if ( rxtx_buffer [ ICMP_TYPE_P ] != ICMP_TYPE_ECHOREPLY_V )
    1e82:	8a a1       	ldd	r24, Y+34	; 0x22
    1e84:	88 23       	and	r24, r24
    1e86:	19 f4       	brne	.+6      	; 0x1e8e <icmp_ping+0x4a>
				continue;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	05 c0       	rjmp	.+10     	; 0x1e98 <icmp_ping+0x54>
    1e8e:	1f 5f       	subi	r17, 0xFF	; 255
    1e90:	1a 30       	cpi	r17, 0x0A	; 10
    1e92:	49 f7       	brne	.-46     	; 0x1e66 <icmp_ping+0x22>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	08 95       	ret

00001ea2 <my_strcpy>:
// to end of string
//
//*****************************************************************************************
BYTE *my_strcpy ( BYTE *dest, PGM_P src )
{
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <my_strcpy+0x6>
	BYTE ch;

	while ( (ch = pgm_read_byte( src++ )) )
	{
		*dest++ = ch;
    1ea6:	8d 93       	st	X+, r24
    1ea8:	fb 01       	movw	r30, r22
    1eaa:	6f 5f       	subi	r22, 0xFF	; 255
    1eac:	7f 4f       	sbci	r23, 0xFF	; 255
    1eae:	84 91       	lpm	r24, Z
    1eb0:	88 23       	and	r24, r24
    1eb2:	c9 f7       	brne	.-14     	; 0x1ea6 <my_strcpy+0x4>
	}
	return dest;
}
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	08 95       	ret

00001eb8 <print_decimal>:

//*****************************************************************************************
//
// Function : print_decimal
// Description : Print decimal to buffer, up to 5 digits
//
//*****************************************************************************************
BYTE * print_decimal ( BYTE *ptr, BYTE digit, WORD dec )
{
    1eb8:	fc 01       	movw	r30, r24
    1eba:	9a 01       	movw	r18, r20
	if ( digit >= 5 )
    1ebc:	65 30       	cpi	r22, 0x05	; 5
    1ebe:	40 f0       	brcs	.+16     	; 0x1ed0 <print_decimal+0x18>
		*ptr++ = ( (dec/10000) + '0' );
    1ec0:	ca 01       	movw	r24, r20
    1ec2:	60 e1       	ldi	r22, 0x10	; 16
    1ec4:	77 e2       	ldi	r23, 0x27	; 39
    1ec6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    1eca:	60 5d       	subi	r22, 0xD0	; 208
    1ecc:	61 93       	st	Z+, r22
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <print_decimal+0x1c>
	if ( digit >= 4 )
    1ed0:	64 30       	cpi	r22, 0x04	; 4
    1ed2:	61 f4       	brne	.+24     	; 0x1eec <print_decimal+0x34>
		*ptr++ = ( ((dec%10000)/1000) + '0' );
    1ed4:	c9 01       	movw	r24, r18
    1ed6:	60 e1       	ldi	r22, 0x10	; 16
    1ed8:	77 e2       	ldi	r23, 0x27	; 39
    1eda:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    1ede:	68 ee       	ldi	r22, 0xE8	; 232
    1ee0:	73 e0       	ldi	r23, 0x03	; 3
    1ee2:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    1ee6:	60 5d       	subi	r22, 0xD0	; 208
    1ee8:	61 93       	st	Z+, r22
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <print_decimal+0x38>
	if ( digit >= 3 )
    1eec:	63 30       	cpi	r22, 0x03	; 3
    1eee:	60 f0       	brcs	.+24     	; 0x1f08 <print_decimal+0x50>
		*ptr++ = ( ((dec%1000)/100) + '0' );
    1ef0:	c9 01       	movw	r24, r18
    1ef2:	68 ee       	ldi	r22, 0xE8	; 232
    1ef4:	73 e0       	ldi	r23, 0x03	; 3
    1ef6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    1efa:	64 e6       	ldi	r22, 0x64	; 100
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    1f02:	60 5d       	subi	r22, 0xD0	; 208
    1f04:	61 93       	st	Z+, r22
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <print_decimal+0x54>
	if ( digit >= 2 )
    1f08:	62 30       	cpi	r22, 0x02	; 2
    1f0a:	59 f4       	brne	.+22     	; 0x1f22 <print_decimal+0x6a>
		*ptr++ = ( ((dec%100)/10) + '0' );
    1f0c:	c9 01       	movw	r24, r18
    1f0e:	64 e6       	ldi	r22, 0x64	; 100
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    1f16:	6a e0       	ldi	r22, 0x0A	; 10
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    1f1e:	60 5d       	subi	r22, 0xD0	; 208
    1f20:	61 93       	st	Z+, r22
	*ptr++ = ( ((dec%10)) + '0' );
    1f22:	c9 01       	movw	r24, r18
    1f24:	6a e0       	ldi	r22, 0x0A	; 10
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodhi4>
    1f2c:	80 5d       	subi	r24, 0xD0	; 208
    1f2e:	81 93       	st	Z+, r24

	return ptr;
}
    1f30:	cf 01       	movw	r24, r30
    1f32:	08 95       	ret

00001f34 <print_ip>:
//*****************************************************************************************
//
// Function : print_temp
// Description : Print ADC0 and temparature to buffer
//
//*****************************************************************************************
void print_temp ( BYTE *dest )
{
	WORD adc0_value;
	BYTE temp_value;

	adc0_value = adc_read ( 0 );
	temp_value = adc_read_temp ( );

	dest = print_decimal ( dest, 4, adc0_value );
	*dest++ = ',';
	dest = print_decimal ( dest, 2, temp_value );
	*dest++ = ASCII_DEGREE;
	*dest++ = 'C';
	*dest = '\0';
}
//*****************************************************************************************
//
// Function : print_ip
// Description : Print ip address format to buffer e.g. 10.1.1.1
//
//*****************************************************************************************
void print_ip ( BYTE *ptr, BYTE *ip, BYTE cursor )
{
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	eb 01       	movw	r28, r22
    1f40:	04 2f       	mov	r16, r20
    1f42:	10 e0       	ldi	r17, 0x00	; 0
	BYTE i, digit, temp;

	for ( i=0; i<4; i++ )
	{
		temp = ip [ i ];
    1f44:	fe 01       	movw	r30, r28
    1f46:	e1 0f       	add	r30, r17
    1f48:	f1 1d       	adc	r31, r1
    1f4a:	40 81       	ld	r20, Z
		if ( temp > 99 )
    1f4c:	44 36       	cpi	r20, 0x64	; 100
    1f4e:	10 f0       	brcs	.+4      	; 0x1f54 <print_ip+0x20>
    1f50:	63 e0       	ldi	r22, 0x03	; 3
    1f52:	05 c0       	rjmp	.+10     	; 0x1f5e <print_ip+0x2a>
			digit = 3;
		else if ( temp > 9 )
    1f54:	4a 30       	cpi	r20, 0x0A	; 10
    1f56:	10 f0       	brcs	.+4      	; 0x1f5c <print_ip+0x28>
    1f58:	62 e0       	ldi	r22, 0x02	; 2
    1f5a:	01 c0       	rjmp	.+2      	; 0x1f5e <print_ip+0x2a>
    1f5c:	61 e0       	ldi	r22, 0x01	; 1
			digit = 2;
		else
			digit = 1;
		
		if ( (i+1) == cursor )
    1f5e:	81 2f       	mov	r24, r17
    1f60:	99 27       	eor	r25, r25
    1f62:	01 96       	adiw	r24, 0x01	; 1
    1f64:	20 2f       	mov	r18, r16
    1f66:	33 27       	eor	r19, r19
    1f68:	82 17       	cp	r24, r18
    1f6a:	93 07       	cpc	r25, r19
    1f6c:	11 f4       	brne	.+4      	; 0x1f72 <print_ip+0x3e>
		{
			*ptr = ASCII_CURSOR;
    1f6e:	8e e7       	ldi	r24, 0x7E	; 126
    1f70:	03 c0       	rjmp	.+6      	; 0x1f78 <print_ip+0x44>
			ptr++;
		}
		else if ( i > 0 )
    1f72:	11 23       	and	r17, r17
    1f74:	59 f0       	breq	.+22     	; 0x1f8c <print_ip+0x58>
		{
			*ptr = '.';
    1f76:	8e e2       	ldi	r24, 0x2E	; 46
    1f78:	8d 93       	st	X+, r24
			ptr++;
    1f7a:	cd 01       	movw	r24, r26
		}
		ptr = print_decimal ( ptr, digit, temp );
    1f7c:	55 27       	eor	r21, r21
    1f7e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
    1f82:	dc 01       	movw	r26, r24
    1f84:	1f 5f       	subi	r17, 0xFF	; 255
    1f86:	14 30       	cpi	r17, 0x04	; 4
    1f88:	e8 f2       	brcs	.-70     	; 0x1f44 <print_ip+0x10>
    1f8a:	07 c0       	rjmp	.+14     	; 0x1f9a <print_ip+0x66>
    1f8c:	55 27       	eor	r21, r21
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
    1f94:	dc 01       	movw	r26, r24
    1f96:	11 e0       	ldi	r17, 0x01	; 1
    1f98:	d5 cf       	rjmp	.-86     	; 0x1f44 <print_ip+0x10>

	}
	*ptr = '\0';
    1f9a:	1c 92       	st	X, r1
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	08 95       	ret

00001fa6 <print_time>:
}
//*****************************************************************************************
//
// Function : print_time
// Description : Print time format to buffer e.g. 01:23:45
//
//*****************************************************************************************
void print_time ( BYTE *ptr, BYTE *time, BYTE cursor )
{
    1fa6:	0f 93       	push	r16
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	fc 01       	movw	r30, r24
    1fb0:	db 01       	movw	r26, r22
    1fb2:	04 2f       	mov	r16, r20
	BYTE i;
	
	// show setting cursor when enter to setting mode
	if ( cursor == 0 )
    1fb4:	44 23       	and	r20, r20
    1fb6:	19 f5       	brne	.+70     	; 0x1ffe <print_time+0x58>
	{
		if ( time [ 0 ] )
    1fb8:	8c 91       	ld	r24, X
    1fba:	88 23       	and	r24, r24
    1fbc:	e1 f0       	breq	.+56     	; 0x1ff6 <print_time+0x50>
		{
			time++;
    1fbe:	eb 01       	movw	r28, r22
    1fc0:	21 96       	adiw	r28, 0x01	; 1
    1fc2:	10 e0       	ldi	r17, 0x00	; 0
			for ( i=0; i<3; i++ )
			{
				if ( (i+2) == cursor )
    1fc4:	81 2f       	mov	r24, r17
    1fc6:	99 27       	eor	r25, r25
    1fc8:	8e 5f       	subi	r24, 0xFE	; 254
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	11 f4       	brne	.+4      	; 0x1fd2 <print_time+0x2c>
				{
					*ptr++ = ASCII_CURSOR;
    1fce:	8e e7       	ldi	r24, 0x7E	; 126
    1fd0:	04 c0       	rjmp	.+8      	; 0x1fda <print_time+0x34>
				}
				else if ( i > 0 )
    1fd2:	11 23       	and	r17, r17
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <print_time+0x32>
    1fd6:	42 c0       	rjmp	.+132    	; 0x205c <print_time+0xb6>
				{
					*ptr++ = ':';
    1fd8:	8a e3       	ldi	r24, 0x3A	; 58
    1fda:	81 93       	st	Z+, r24
    1fdc:	cf 01       	movw	r24, r30
				}
				ptr = print_decimal ( ptr, 2, *time++ );
    1fde:	48 81       	ld	r20, Y
    1fe0:	55 27       	eor	r21, r21
    1fe2:	62 e0       	ldi	r22, 0x02	; 2
    1fe4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
    1fe8:	fc 01       	movw	r30, r24
    1fea:	1f 5f       	subi	r17, 0xFF	; 255
    1fec:	13 30       	cpi	r17, 0x03	; 3
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <print_time+0x4c>
    1ff0:	47 c0       	rjmp	.+142    	; 0x2080 <print_time+0xda>
    1ff2:	21 96       	adiw	r28, 0x01	; 1
    1ff4:	e7 cf       	rjmp	.-50     	; 0x1fc4 <print_time+0x1e>
			}
		}
		else
		{
			ptr = my_strcpy ( ptr, (PGM_P)str_disable );
    1ff6:	65 e3       	ldi	r22, 0x35	; 53
    1ff8:	76 e0       	ldi	r23, 0x06	; 6
    1ffa:	cf 01       	movw	r24, r30
    1ffc:	0e c0       	rjmp	.+28     	; 0x201a <print_time+0x74>
		}
	}
	else
	{
		if ( cursor == 1 )
    1ffe:	41 30       	cpi	r20, 0x01	; 1
    2000:	81 f4       	brne	.+32     	; 0x2022 <print_time+0x7c>
		{
			*ptr++ = ASCII_CURSOR;
    2002:	8e e7       	ldi	r24, 0x7E	; 126
    2004:	81 93       	st	Z+, r24
    2006:	9f 01       	movw	r18, r30
			// show Enable/Disable send temparature to server
			if ( time [ 0 ] )
    2008:	8c 91       	ld	r24, X
    200a:	88 23       	and	r24, r24
    200c:	19 f0       	breq	.+6      	; 0x2014 <print_time+0x6e>
				ptr = my_strcpy ( ptr, (PGM_P)str_enable );
    200e:	6e e2       	ldi	r22, 0x2E	; 46
    2010:	76 e0       	ldi	r23, 0x06	; 6
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <print_time+0x72>
			else
				ptr = my_strcpy ( ptr, (PGM_P)str_disable );
    2014:	65 e3       	ldi	r22, 0x35	; 53
    2016:	76 e0       	ldi	r23, 0x06	; 6
    2018:	c9 01       	movw	r24, r18
    201a:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <my_strcpy>
    201e:	fc 01       	movw	r30, r24
    2020:	2f c0       	rjmp	.+94     	; 0x2080 <print_time+0xda>
		}
		else
		{
			time++;
    2022:	eb 01       	movw	r28, r22
    2024:	21 96       	adiw	r28, 0x01	; 1
    2026:	10 e0       	ldi	r17, 0x00	; 0
			for ( i=0; i<3; i++ )
			{
				if ( (i+2) == cursor )
    2028:	81 2f       	mov	r24, r17
    202a:	99 27       	eor	r25, r25
    202c:	02 96       	adiw	r24, 0x02	; 2
    202e:	20 2f       	mov	r18, r16
    2030:	33 27       	eor	r19, r19
    2032:	82 17       	cp	r24, r18
    2034:	93 07       	cpc	r25, r19
    2036:	11 f4       	brne	.+4      	; 0x203c <print_time+0x96>
				{
					*ptr++ = ASCII_CURSOR;
    2038:	8e e7       	ldi	r24, 0x7E	; 126
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <print_time+0x9c>
				}
				else if ( i > 0 )
    203c:	11 23       	and	r17, r17
    203e:	b9 f0       	breq	.+46     	; 0x206e <print_time+0xc8>
				{
					*ptr++ = ':';
    2040:	8a e3       	ldi	r24, 0x3A	; 58
    2042:	81 93       	st	Z+, r24
    2044:	cf 01       	movw	r24, r30
				}
				ptr = print_decimal ( ptr, 2, *time++ );
    2046:	48 81       	ld	r20, Y
    2048:	55 27       	eor	r21, r21
    204a:	62 e0       	ldi	r22, 0x02	; 2
    204c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
    2050:	fc 01       	movw	r30, r24
    2052:	1f 5f       	subi	r17, 0xFF	; 255
    2054:	13 30       	cpi	r17, 0x03	; 3
    2056:	a0 f4       	brcc	.+40     	; 0x2080 <print_time+0xda>
    2058:	21 96       	adiw	r28, 0x01	; 1
    205a:	e6 cf       	rjmp	.-52     	; 0x2028 <print_time+0x82>
    205c:	49 91       	ld	r20, Y+
    205e:	55 27       	eor	r21, r21
    2060:	62 e0       	ldi	r22, 0x02	; 2
    2062:	cf 01       	movw	r24, r30
    2064:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
    2068:	fc 01       	movw	r30, r24
    206a:	11 e0       	ldi	r17, 0x01	; 1
    206c:	ab cf       	rjmp	.-170    	; 0x1fc4 <print_time+0x1e>
    206e:	49 91       	ld	r20, Y+
    2070:	55 27       	eor	r21, r21
    2072:	62 e0       	ldi	r22, 0x02	; 2
    2074:	cf 01       	movw	r24, r30
    2076:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
    207a:	fc 01       	movw	r30, r24
    207c:	11 e0       	ldi	r17, 0x01	; 1
    207e:	d4 cf       	rjmp	.-88     	; 0x2028 <print_time+0x82>
			}
		}
	}
	
	*ptr = '\0';
    2080:	10 82       	st	Z, r1
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	08 95       	ret

0000208c <key_dw_process>:
}
//*****************************************************************************************
//
// Function : time_base
// Description : count-down timer for send temparature to server. you can enable/disable and 
// adjust timer by "Send temp config" menu.
// 
//*****************************************************************************************
void time_base ( void )
{
	static BYTE send_temp_timeout=0;

	if ( ++sec_count == 250 )
	{
		sec_count = 0;

		// update lcd display
		flag1.bits.update_display = 1;
		
		// timeout for send temparature to webserver
		if ( flag1.bits.syn_is_sent )
		{
			// 5 seconds
			if ( ++send_temp_timeout == 5 )
			{
				send_temp_timeout = 0;
				flag1.bits.send_temp_timeout = 1;
			}
		}
		// send temparature to server countdown
		if ( count_time[ 0 ] && menu_index!=4 )
		{
			if ( --count_time[ 3 ] > 59 )
			{
				//count_time[ 3 ] = 59;
				count_time[ 3 ] = 20;	// debug
				if ( --count_time[ 2 ] > 59 )
				{
					count_time[ 2 ] = 59;
					if ( --count_time[ 1 ] > 23 )
					{
						// read hour
						count_time[ 1 ] = eeprom_read_byte( ee_count_time + 1 );
						// read minute
						count_time[ 2 ] = eeprom_read_byte( ee_count_time + 2 );
						// clear second
						count_time[ 3 ] = 0;
						flag1.bits.send_temp = 1;
					}
				}
			}
		}
	}
}
//*******************************************************************************************
//
// Function : standby_display
// Description : display board status such as AVR ip, server ip, countdown time, temparature
//
//*******************************************************************************************
void standby_display ( void )
{
	BYTE generic_buf[64];

	// update lcd display flag not set, exit from function
	if ( flag1.bits.update_display == 0 )
		return;
	flag1.bits.update_display = 0;
	// lcd display is displaying other information, wait until busy flag clear
	if ( flag1.bits.lcd_busy )
		return;
	// now displaying menu information, wait until exit from menu
	if ( menu_index )
		return;

	// display status on lcd line 1
	lcd_putc ( '\f' );
	lcd_print ( (BYTE*)standby_list[ standby_cursor - 1 ] );

	// display status on lcd line 2
	lcd_putc ( '\n' );
	// display avr ip
	if ( standby_cursor == 1 )
	{
		print_ip ( generic_buf, (BYTE*)&avr_ip, 0 );
	}
	// display server ip
	else if ( standby_cursor == 2 )
	{
		print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
	}
	// display countdown timer
	else if ( standby_cursor == 3 )
	{
		print_time ( generic_buf, count_time, 0 );
	}
	// display current temparature
	else if ( standby_cursor == 4 )
	{
		print_temp ( generic_buf );
	}
	lcd_print ( generic_buf );
}
//*******************************************************************************************
//
// Function : display_menu
// Description : display LCD user interface menu on LCD
//
//*******************************************************************************************
void display_menu(void)
{
	BYTE generic_buf[64];

	if( menu_index == 0)
		return;

	// display menu title on lcd first line
	lcd_putc( '\f' );
	lcd_print ( (BYTE *)menu_list[ menu_index - 1 ] );
	
	// display menu detail on lcd second line
	lcd_putc( '\n' );
	if( menu_index == 1 )//MENU_MAIN)
	{
		lcd_print( (BYTE *)menu_list[ submenu_index ] );
	}
	// setup avr ip address
	else if( menu_index == 2 )
	{
		print_ip ( generic_buf, (BYTE*)&avr_ip, setting_cursor+1 );
		lcd_print ( generic_buf );
	}
	// setup server ip address
	else if(menu_index == 3 )
	{
		print_ip ( generic_buf, (BYTE*)&server_ip, setting_cursor+1 );
		lcd_print ( generic_buf );
	}
	// setup countdown timer for send temparature
	else if ( menu_index == 4 )
	{
		print_time ( generic_buf, count_time, setting_cursor+1 );
		lcd_print ( generic_buf );
	}
	// ping server
	else if ( menu_index == 5 )
	{
		print_ip ( generic_buf, (BYTE*)&server_ip, 1 );
		lcd_print ( generic_buf );
	}
	// send temparature now
	//else if ( menu_index == 6 )
	//{
	//	lcd_put ( ASCII_CURSOR );
	//	lcd_print_p ( PSTR ( "OK" ) );
	//}
}
//*******************************************************************************************
//
// Function : key_up_process
// Description : 
//
//*******************************************************************************************
void key_up_process ( void )
{
	BYTE temp;
	
	// standby display, display board status
	if(menu_index == 0)
	{
		if ( ++ standby_cursor == ((sizeof(standby_list)/2)+1) )
			standby_cursor = 1;
		flag1.bits.update_display = 1;
	}
	// main menu
	else if(menu_index == 1)
	{
		if( ++submenu_index == (sizeof(menu_list)/2) )
		{
			submenu_index = 1;
		}
	}
	// setup avr ip
	else if( menu_index == 2 )
	{
		avr_ip.byte [ setting_cursor ]++;
		eeprom_write_block ( &avr_ip, ee_avr_ip, 4 );
	}
	// setup server ip
	else if( menu_index == 3 )
	{
		server_ip.byte [ setting_cursor ]++;
		eeprom_write_block ( &server_ip, ee_server_ip, 4 );
	}
	// setup countdown timer
	else if( menu_index == 4 )
	{
		temp = pgm_read_byte ( (PGM_P)(count_time_max + setting_cursor) );
		if ( ++count_time [ setting_cursor ] == temp )
			count_time [ setting_cursor ] = 0;
		eeprom_write_block ( count_time, ee_count_time, 4 );
	}
}
//*******************************************************************************************
//
// Function : key_dw_process
// Description : 
//
//*******************************************************************************************
void key_dw_process ( void )
{
    208c:	20 91 1c 01 	lds	r18, 0x011C
    2090:	22 23       	and	r18, r18
    2092:	81 f4       	brne	.+32     	; 0x20b4 <key_dw_process+0x28>
	BYTE temp;
	
	// standby display, display board status
	if(menu_index == 0)
	{
		if ( -- standby_cursor == 0 )
    2094:	80 91 1b 01 	lds	r24, 0x011B
    2098:	81 50       	subi	r24, 0x01	; 1
    209a:	80 93 1b 01 	sts	0x011B, r24
    209e:	88 23       	and	r24, r24
    20a0:	19 f4       	brne	.+6      	; 0x20a8 <key_dw_process+0x1c>
			standby_cursor = sizeof(standby_list)/2;
    20a2:	84 e0       	ldi	r24, 0x04	; 4
    20a4:	80 93 1b 01 	sts	0x011B, r24
		flag1.bits.update_display = 1;
    20a8:	80 91 02 01 	lds	r24, 0x0102
    20ac:	82 60       	ori	r24, 0x02	; 2
    20ae:	80 93 02 01 	sts	0x0102, r24
    20b2:	08 95       	ret
	}
	// main menu
	else if(menu_index == 1)
    20b4:	21 30       	cpi	r18, 0x01	; 1
    20b6:	61 f4       	brne	.+24     	; 0x20d0 <key_dw_process+0x44>
	{
		if( --submenu_index == 0 )
    20b8:	80 91 1d 01 	lds	r24, 0x011D
    20bc:	81 50       	subi	r24, 0x01	; 1
    20be:	80 93 1d 01 	sts	0x011D, r24
    20c2:	88 23       	and	r24, r24
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <key_dw_process+0x3c>
    20c6:	42 c0       	rjmp	.+132    	; 0x214c <key_dw_process+0xc0>
		{
			submenu_index = (sizeof(menu_list)/2)-1;
    20c8:	84 e0       	ldi	r24, 0x04	; 4
    20ca:	80 93 1d 01 	sts	0x011D, r24
    20ce:	08 95       	ret
		}
	}
	// setup avr ip
	else if( menu_index == 2 )
    20d0:	22 30       	cpi	r18, 0x02	; 2
    20d2:	71 f4       	brne	.+28     	; 0x20f0 <key_dw_process+0x64>
	{
		avr_ip.byte [ setting_cursor ]--;
    20d4:	e0 91 20 01 	lds	r30, 0x0120
    20d8:	ff 27       	eor	r31, r31
    20da:	2d e0       	ldi	r18, 0x0D	; 13
    20dc:	31 e0       	ldi	r19, 0x01	; 1
    20de:	e2 0f       	add	r30, r18
    20e0:	f3 1f       	adc	r31, r19
    20e2:	80 81       	ld	r24, Z
    20e4:	81 50       	subi	r24, 0x01	; 1
    20e6:	80 83       	st	Z, r24
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	a0 e0       	ldi	r26, 0x00	; 0
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <key_dw_process+0x82>
		eeprom_write_block ( &avr_ip, ee_avr_ip, 4 );
	}
	// setup server ip
	else if( menu_index == 3 )
    20f0:	23 30       	cpi	r18, 0x03	; 3
    20f2:	91 f4       	brne	.+36     	; 0x2118 <key_dw_process+0x8c>
	{
		server_ip.byte [ setting_cursor ]--;
    20f4:	e0 91 20 01 	lds	r30, 0x0120
    20f8:	ff 27       	eor	r31, r31
    20fa:	29 e0       	ldi	r18, 0x09	; 9
    20fc:	31 e0       	ldi	r19, 0x01	; 1
    20fe:	e2 0f       	add	r30, r18
    2100:	f3 1f       	adc	r31, r19
    2102:	80 81       	ld	r24, Z
    2104:	81 50       	subi	r24, 0x01	; 1
    2106:	80 83       	st	Z, r24
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    2108:	84 e0       	ldi	r24, 0x04	; 4
    210a:	a4 e0       	ldi	r26, 0x04	; 4
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	f9 01       	movw	r30, r18
    2110:	18 2e       	mov	r1, r24
    2112:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__eeprom_write_block_1C1D1E>
    2116:	08 95       	ret
		eeprom_write_block ( &server_ip, ee_server_ip, 4 );
	}
	// setup countdown timer
	else if( menu_index == 4 )
    2118:	24 30       	cpi	r18, 0x04	; 4
    211a:	c1 f4       	brne	.+48     	; 0x214c <key_dw_process+0xc0>
	{
		temp = pgm_read_byte ( (PGM_P)(count_time_max + setting_cursor) );
    211c:	80 91 20 01 	lds	r24, 0x0120
    2120:	99 27       	eor	r25, r25
    2122:	fc 01       	movw	r30, r24
    2124:	e6 5d       	subi	r30, 0xD6	; 214
    2126:	f9 4f       	sbci	r31, 0xF9	; 249
    2128:	34 91       	lpm	r19, Z
		if ( --count_time [ setting_cursor ] == 0xff )
    212a:	47 e1       	ldi	r20, 0x17	; 23
    212c:	51 e0       	ldi	r21, 0x01	; 1
    212e:	fc 01       	movw	r30, r24
    2130:	e4 0f       	add	r30, r20
    2132:	f5 1f       	adc	r31, r21
    2134:	80 81       	ld	r24, Z
    2136:	81 50       	subi	r24, 0x01	; 1
    2138:	80 83       	st	Z, r24
    213a:	8f 3f       	cpi	r24, 0xFF	; 255
    213c:	09 f4       	brne	.+2      	; 0x2140 <key_dw_process+0xb4>
			count_time [ setting_cursor ] = temp;
    213e:	30 83       	st	Z, r19
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    2140:	a8 e0       	ldi	r26, 0x08	; 8
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	fa 01       	movw	r30, r20
    2146:	12 2e       	mov	r1, r18
    2148:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__eeprom_write_block_1C1D1E>
    214c:	08 95       	ret

0000214e <key_up_process>:
    214e:	20 91 1c 01 	lds	r18, 0x011C
    2152:	22 23       	and	r18, r18
    2154:	81 f4       	brne	.+32     	; 0x2176 <key_up_process+0x28>
    2156:	80 91 1b 01 	lds	r24, 0x011B
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	80 93 1b 01 	sts	0x011B, r24
    2160:	85 30       	cpi	r24, 0x05	; 5
    2162:	19 f4       	brne	.+6      	; 0x216a <key_up_process+0x1c>
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	80 93 1b 01 	sts	0x011B, r24
    216a:	80 91 02 01 	lds	r24, 0x0102
    216e:	82 60       	ori	r24, 0x02	; 2
    2170:	80 93 02 01 	sts	0x0102, r24
    2174:	08 95       	ret
    2176:	21 30       	cpi	r18, 0x01	; 1
    2178:	59 f4       	brne	.+22     	; 0x2190 <key_up_process+0x42>
    217a:	80 91 1d 01 	lds	r24, 0x011D
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	80 93 1d 01 	sts	0x011D, r24
    2184:	85 30       	cpi	r24, 0x05	; 5
    2186:	09 f0       	breq	.+2      	; 0x218a <key_up_process+0x3c>
    2188:	41 c0       	rjmp	.+130    	; 0x220c <key_up_process+0xbe>
    218a:	20 93 1d 01 	sts	0x011D, r18
    218e:	08 95       	ret
    2190:	22 30       	cpi	r18, 0x02	; 2
    2192:	71 f4       	brne	.+28     	; 0x21b0 <key_up_process+0x62>
    2194:	e0 91 20 01 	lds	r30, 0x0120
    2198:	ff 27       	eor	r31, r31
    219a:	2d e0       	ldi	r18, 0x0D	; 13
    219c:	31 e0       	ldi	r19, 0x01	; 1
    219e:	e2 0f       	add	r30, r18
    21a0:	f3 1f       	adc	r31, r19
    21a2:	80 81       	ld	r24, Z
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	80 83       	st	Z, r24
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    21a8:	84 e0       	ldi	r24, 0x04	; 4
    21aa:	a0 e0       	ldi	r26, 0x00	; 0
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	0f c0       	rjmp	.+30     	; 0x21ce <key_up_process+0x80>
    21b0:	23 30       	cpi	r18, 0x03	; 3
    21b2:	91 f4       	brne	.+36     	; 0x21d8 <key_up_process+0x8a>
    21b4:	e0 91 20 01 	lds	r30, 0x0120
    21b8:	ff 27       	eor	r31, r31
    21ba:	29 e0       	ldi	r18, 0x09	; 9
    21bc:	31 e0       	ldi	r19, 0x01	; 1
    21be:	e2 0f       	add	r30, r18
    21c0:	f3 1f       	adc	r31, r19
    21c2:	80 81       	ld	r24, Z
    21c4:	8f 5f       	subi	r24, 0xFF	; 255
    21c6:	80 83       	st	Z, r24
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    21c8:	84 e0       	ldi	r24, 0x04	; 4
    21ca:	a4 e0       	ldi	r26, 0x04	; 4
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	f9 01       	movw	r30, r18
    21d0:	18 2e       	mov	r1, r24
    21d2:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__eeprom_write_block_1C1D1E>
    21d6:	08 95       	ret
    21d8:	24 30       	cpi	r18, 0x04	; 4
    21da:	c1 f4       	brne	.+48     	; 0x220c <key_up_process+0xbe>
    21dc:	80 91 20 01 	lds	r24, 0x0120
    21e0:	99 27       	eor	r25, r25
    21e2:	fc 01       	movw	r30, r24
    21e4:	e6 5d       	subi	r30, 0xD6	; 214
    21e6:	f9 4f       	sbci	r31, 0xF9	; 249
    21e8:	e4 91       	lpm	r30, Z
    21ea:	47 e1       	ldi	r20, 0x17	; 23
    21ec:	51 e0       	ldi	r21, 0x01	; 1
    21ee:	dc 01       	movw	r26, r24
    21f0:	a4 0f       	add	r26, r20
    21f2:	b5 1f       	adc	r27, r21
    21f4:	8c 91       	ld	r24, X
    21f6:	8f 5f       	subi	r24, 0xFF	; 255
    21f8:	8c 93       	st	X, r24
    21fa:	8e 17       	cp	r24, r30
    21fc:	09 f4       	brne	.+2      	; 0x2200 <key_up_process+0xb2>
    21fe:	1c 92       	st	X, r1
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    2200:	a8 e0       	ldi	r26, 0x08	; 8
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	fa 01       	movw	r30, r20
    2206:	12 2e       	mov	r1, r18
    2208:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__eeprom_write_block_1C1D1E>
    220c:	08 95       	ret

0000220e <menu_init>:
		eeprom_write_block ( count_time, ee_count_time, 4 );
	}
}
//*******************************************************************************************
//
// Function : key_process
// Description : Process all key code from get_key_code function
//
//*******************************************************************************************
void menu_process ( void )
{
	static BYTE key_hold_count=0, key_hold_step_delay=0;
	BYTE rxtx_buffer[MAX_RXTX_BUFFER];
	BYTE key_code, temp;
	static BYTE backlight_sec=31, backlight_seccount=250;
	
	// get switch value from port
	key_code = SW_PIN & ( _BV( SW_DW ) | _BV( SW_UP ) | _BV( SW_EXIT ) | _BV( SW_MENU ) );
	
	// Check key press?
	if ( key_code  == ( _BV( SW_DW ) | _BV( SW_UP ) | _BV( SW_EXIT ) | _BV( SW_MENU ) ) )
	{
		flag1.bits.key_is_executed = 0;
		flag2.bits.key_hold = 0;
		key_hold_count = 0;
		key_hold_step_delay = 0;

		// lcd backlight control
		// lcd backlight off after key is unpress ( 30 seconds)
		if ( backlight_sec )
		{
			if ( --backlight_seccount > 250 )
			{
				backlight_seccount = 250;
				if ( --backlight_sec == 1 )
				{
					backlight_sec = 0;
					// lcd backlight off
					LCD_BL_PORT &= ~_BV( LCD_BL_PIN );
				}
			}
		}
		return;
	}
	
	// lcd backlight on
	// and hold-on 30 seconds
	backlight_sec = 31;
	LCD_BL_PORT |= _BV( LCD_BL_PIN );

	// check hold key
	if ( ++key_hold_count == 200 )
	{
		key_hold_count = 0;
		flag2.bits.key_hold = 1;		
	}
	
	if ( flag2.bits.key_hold )
	{
		if ( ++key_hold_step_delay == 30 )
		{
			key_hold_step_delay = 0;
			if ( key_code == ((~_BV ( SW_UP ) ) & 0xf0) )
			{
				key_up_process ();
			}
			// if down key is pressed
			else if ( key_code == ((~_BV ( SW_DW ) ) & 0xf0) )
			{
				key_dw_process ();
			}
			display_menu();
		}
	}
	// key code already executed
	if ( flag1.bits.key_is_executed )
		return;
	// check key code, what is key pressed?
	// if menu key is pressed
	if ( key_code == ((~_BV ( SW_MENU ) ) & 0xf0) )
	{
		// enter to main menu
		if( menu_index == 0 )
		{
			setting_cursor = 0;
			menu_index = 1;
			submenu_index = 1;
		}
		// enter to submenu
		else if( menu_index == 1 )
		{
			menu_stack = menu_index;
			submenu_stack = submenu_index;
			menu_index = submenu_index + menu_index;
			submenu_index = 1;
		}
		// ping server
		else if ( menu_index == 5 )
		{
			// Show on lcd first line
			lcd_putc( '\f' );
			lcd_print ( (BYTE *)menu_list[ 4 ] );
			lcd_putc( '\n' );
			if ( icmp_ping ( (BYTE*)rxtx_buffer, (BYTE*)&server_mac, (BYTE*)&server_ip ) )
			{
				lcd_print_p ( PSTR ( "Ping OK." ) );
			}
			else
			{
				lcd_print_p ( PSTR ( "Not found." ) );
			}
			flag1.bits.lcd_busy = 1;
			menu_index = 0;
			submenu_index = 0;
			flag1.bits.key_is_executed = 1;
			return;
		}
		// change cursor setting on each menu
		else
		{
			temp = pgm_read_byte ( (PGM_P)(setting_cursor_max + menu_index - 2) );

			if ( ++setting_cursor == temp )
				setting_cursor = 0;
		}
	}
	// if exit key is pressed
	else if ( key_code == ((~_BV ( SW_EXIT ) ) & 0xf0) )
	{
		setting_cursor = 0;
		if(menu_index > 1)
		{
			menu_index = menu_stack;
			submenu_index = submenu_stack;
		}
		else
		{
			menu_index = 0;
			submenu_index = 0;
			
		}
	}
	// if up key is pressed
	else if ( key_code == ((~_BV ( SW_UP ) ) & 0xf0) )
	{
		key_up_process ();
	}
	// if down key is pressed
	else if ( key_code == ((~_BV ( SW_DW ) ) & 0xf0) )
	{
		key_dw_process ();
	}
	// display menu information on LCD
	display_menu();
	flag1.bits.key_is_executed = 1;
	flag1.bits.lcd_busy = 0;
}
//*******************************************************************************************
//
// Function : menu_init
// Description : initial I/O direction for all key,
// initial timer1 for countdown timer
//
//*******************************************************************************************
void menu_init ( void )
{	
    220e:	10 92 1e 01 	sts	0x011E, r1
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 

              __asm__ __volatile__ (
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	e7 e1       	ldi	r30, 0x17	; 23
    2216:	f1 e0       	ldi	r31, 0x01	; 1
    2218:	a8 e0       	ldi	r26, 0x08	; 8
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	18 2e       	mov	r1, r24
    221e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>
	// setup countdown initial value
	sec_count = 0;
	eeprom_read_block ( count_time, ee_count_time, 3 );
	count_time[3] = 0;
    2222:	10 92 1a 01 	sts	0x011A, r1

	// setup menu and standby display
	flag1.byte = 0;
    2226:	10 92 02 01 	sts	0x0102, r1
	flag2.byte = 0;
    222a:	10 92 01 01 	sts	0x0101, r1
	menu_index = 0;
    222e:	10 92 1c 01 	sts	0x011C, r1
	submenu_index = 0;
    2232:	10 92 1d 01 	sts	0x011D, r1
	menu_stack = 0;
    2236:	10 92 21 01 	sts	0x0121, r1
	submenu_stack = 0;
    223a:	10 92 1f 01 	sts	0x011F, r1
	setting_cursor = 0;
    223e:	10 92 20 01 	sts	0x0120, r1
	standby_cursor = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	80 93 1b 01 	sts	0x011B, r24
    2248:	08 95       	ret

0000224a <display_menu>:
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	c0 54       	subi	r28, 0x40	; 64
    2258:	d0 40       	sbci	r29, 0x00	; 0
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	80 91 1c 01 	lds	r24, 0x011C
    2268:	88 23       	and	r24, r24
    226a:	09 f4       	brne	.+2      	; 0x226e <display_menu+0x24>
    226c:	49 c0       	rjmp	.+146    	; 0x2300 <display_menu+0xb6>
    226e:	8c e0       	ldi	r24, 0x0C	; 12
    2270:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
    2274:	e0 91 1c 01 	lds	r30, 0x011C
    2278:	ff 27       	eor	r31, r31
    227a:	ee 0f       	add	r30, r30
    227c:	ff 1f       	adc	r31, r31
    227e:	e7 55       	subi	r30, 0x57	; 87
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	0e 94 a6 13 	call	0x274c	; 0x274c <lcd_print>
    228a:	8a e0       	ldi	r24, 0x0A	; 10
    228c:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
    2290:	80 91 1c 01 	lds	r24, 0x011C
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	51 f4       	brne	.+20     	; 0x22ac <display_menu+0x62>
    2298:	e0 91 1d 01 	lds	r30, 0x011D
    229c:	ff 27       	eor	r31, r31
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	e5 55       	subi	r30, 0x55	; 85
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	28 c0       	rjmp	.+80     	; 0x22fc <display_menu+0xb2>
    22ac:	82 30       	cpi	r24, 0x02	; 2
    22ae:	31 f4       	brne	.+12     	; 0x22bc <display_menu+0x72>
    22b0:	40 91 20 01 	lds	r20, 0x0120
    22b4:	4f 5f       	subi	r20, 0xFF	; 255
    22b6:	6d e0       	ldi	r22, 0x0D	; 13
    22b8:	71 e0       	ldi	r23, 0x01	; 1
    22ba:	19 c0       	rjmp	.+50     	; 0x22ee <display_menu+0xa4>
    22bc:	83 30       	cpi	r24, 0x03	; 3
    22be:	21 f4       	brne	.+8      	; 0x22c8 <display_menu+0x7e>
    22c0:	40 91 20 01 	lds	r20, 0x0120
    22c4:	4f 5f       	subi	r20, 0xFF	; 255
    22c6:	11 c0       	rjmp	.+34     	; 0x22ea <display_menu+0xa0>
    22c8:	84 30       	cpi	r24, 0x04	; 4
    22ca:	61 f4       	brne	.+24     	; 0x22e4 <display_menu+0x9a>
    22cc:	40 91 20 01 	lds	r20, 0x0120
    22d0:	4f 5f       	subi	r20, 0xFF	; 255
    22d2:	67 e1       	ldi	r22, 0x17	; 23
    22d4:	71 e0       	ldi	r23, 0x01	; 1
    22d6:	8e 01       	movw	r16, r28
    22d8:	0f 5f       	subi	r16, 0xFF	; 255
    22da:	1f 4f       	sbci	r17, 0xFF	; 255
    22dc:	c8 01       	movw	r24, r16
    22de:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <print_time>
    22e2:	0b c0       	rjmp	.+22     	; 0x22fa <display_menu+0xb0>
    22e4:	85 30       	cpi	r24, 0x05	; 5
    22e6:	61 f4       	brne	.+24     	; 0x2300 <display_menu+0xb6>
    22e8:	41 e0       	ldi	r20, 0x01	; 1
    22ea:	69 e0       	ldi	r22, 0x09	; 9
    22ec:	71 e0       	ldi	r23, 0x01	; 1
    22ee:	8e 01       	movw	r16, r28
    22f0:	0f 5f       	subi	r16, 0xFF	; 255
    22f2:	1f 4f       	sbci	r17, 0xFF	; 255
    22f4:	c8 01       	movw	r24, r16
    22f6:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <print_ip>
    22fa:	c8 01       	movw	r24, r16
    22fc:	0e 94 a6 13 	call	0x274c	; 0x274c <lcd_print>
    2300:	c0 5c       	subi	r28, 0xC0	; 192
    2302:	df 4f       	sbci	r29, 0xFF	; 255
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	08 95       	ret

00002318 <menu_process>:
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	ce 5e       	subi	r28, 0xEE	; 238
    2324:	d5 40       	sbci	r29, 0x05	; 5
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	19 b3       	in	r17, 0x19	; 25
    2332:	10 7f       	andi	r17, 0xF0	; 240
    2334:	10 3f       	cpi	r17, 0xF0	; 240
    2336:	49 f5       	brne	.+82     	; 0x238a <menu_process+0x72>
    2338:	80 91 02 01 	lds	r24, 0x0102
    233c:	8e 7f       	andi	r24, 0xFE	; 254
    233e:	80 93 02 01 	sts	0x0102, r24
    2342:	80 91 01 01 	lds	r24, 0x0101
    2346:	8e 7f       	andi	r24, 0xFE	; 254
    2348:	80 93 01 01 	sts	0x0101, r24
    234c:	10 92 ee 00 	sts	0x00EE, r1
    2350:	10 92 ed 00 	sts	0x00ED, r1
    2354:	90 91 e8 00 	lds	r25, 0x00E8
    2358:	99 23       	and	r25, r25
    235a:	09 f4       	brne	.+2      	; 0x235e <menu_process+0x46>
    235c:	bb c0       	rjmp	.+374    	; 0x24d4 <menu_process+0x1bc>
    235e:	80 91 e7 00 	lds	r24, 0x00E7
    2362:	81 50       	subi	r24, 0x01	; 1
    2364:	80 93 e7 00 	sts	0x00E7, r24
    2368:	8b 3f       	cpi	r24, 0xFB	; 251
    236a:	08 f4       	brcc	.+2      	; 0x236e <menu_process+0x56>
    236c:	b3 c0       	rjmp	.+358    	; 0x24d4 <menu_process+0x1bc>
    236e:	8a ef       	ldi	r24, 0xFA	; 250
    2370:	80 93 e7 00 	sts	0x00E7, r24
    2374:	89 2f       	mov	r24, r25
    2376:	81 50       	subi	r24, 0x01	; 1
    2378:	80 93 e8 00 	sts	0x00E8, r24
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	09 f0       	breq	.+2      	; 0x2382 <menu_process+0x6a>
    2380:	a9 c0       	rjmp	.+338    	; 0x24d4 <menu_process+0x1bc>
    2382:	10 92 e8 00 	sts	0x00E8, r1
    2386:	c3 98       	cbi	0x18, 3	; 24
    2388:	a5 c0       	rjmp	.+330    	; 0x24d4 <menu_process+0x1bc>
    238a:	8f e1       	ldi	r24, 0x1F	; 31
    238c:	80 93 e8 00 	sts	0x00E8, r24
    2390:	c3 9a       	sbi	0x18, 3	; 24
    2392:	80 91 ee 00 	lds	r24, 0x00EE
    2396:	8f 5f       	subi	r24, 0xFF	; 255
    2398:	80 93 ee 00 	sts	0x00EE, r24
    239c:	88 3c       	cpi	r24, 0xC8	; 200
    239e:	39 f4       	brne	.+14     	; 0x23ae <menu_process+0x96>
    23a0:	10 92 ee 00 	sts	0x00EE, r1
    23a4:	80 91 01 01 	lds	r24, 0x0101
    23a8:	81 60       	ori	r24, 0x01	; 1
    23aa:	80 93 01 01 	sts	0x0101, r24
    23ae:	80 91 01 01 	lds	r24, 0x0101
    23b2:	80 ff       	sbrs	r24, 0
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <menu_process+0xc6>
    23b6:	80 91 ed 00 	lds	r24, 0x00ED
    23ba:	8f 5f       	subi	r24, 0xFF	; 255
    23bc:	80 93 ed 00 	sts	0x00ED, r24
    23c0:	8e 31       	cpi	r24, 0x1E	; 30
    23c2:	69 f4       	brne	.+26     	; 0x23de <menu_process+0xc6>
    23c4:	10 92 ed 00 	sts	0x00ED, r1
    23c8:	10 3b       	cpi	r17, 0xB0	; 176
    23ca:	19 f4       	brne	.+6      	; 0x23d2 <menu_process+0xba>
    23cc:	0e 94 a7 10 	call	0x214e	; 0x214e <key_up_process>
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <menu_process+0xc2>
    23d2:	10 37       	cpi	r17, 0x70	; 112
    23d4:	11 f4       	brne	.+4      	; 0x23da <menu_process+0xc2>
    23d6:	0e 94 46 10 	call	0x208c	; 0x208c <key_dw_process>
    23da:	0e 94 25 11 	call	0x224a	; 0x224a <display_menu>
    23de:	80 91 02 01 	lds	r24, 0x0102
    23e2:	80 fd       	sbrc	r24, 0
    23e4:	77 c0       	rjmp	.+238    	; 0x24d4 <menu_process+0x1bc>
    23e6:	10 3e       	cpi	r17, 0xE0	; 224
    23e8:	09 f0       	breq	.+2      	; 0x23ec <menu_process+0xd4>
    23ea:	4d c0       	rjmp	.+154    	; 0x2486 <menu_process+0x16e>
    23ec:	e0 91 1c 01 	lds	r30, 0x011C
    23f0:	ee 23       	and	r30, r30
    23f2:	31 f4       	brne	.+12     	; 0x2400 <menu_process+0xe8>
    23f4:	10 92 20 01 	sts	0x0120, r1
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	80 93 1c 01 	sts	0x011C, r24
    23fe:	51 c0       	rjmp	.+162    	; 0x24a2 <menu_process+0x18a>
    2400:	e1 30       	cpi	r30, 0x01	; 1
    2402:	61 f4       	brne	.+24     	; 0x241c <menu_process+0x104>
    2404:	e0 93 21 01 	sts	0x0121, r30
    2408:	80 91 1d 01 	lds	r24, 0x011D
    240c:	80 93 1f 01 	sts	0x011F, r24
    2410:	8f 5f       	subi	r24, 0xFF	; 255
    2412:	80 93 1c 01 	sts	0x011C, r24
    2416:	e0 93 1d 01 	sts	0x011D, r30
    241a:	54 c0       	rjmp	.+168    	; 0x24c4 <menu_process+0x1ac>
    241c:	e5 30       	cpi	r30, 0x05	; 5
    241e:	29 f5       	brne	.+74     	; 0x246a <menu_process+0x152>
    2420:	8c e0       	ldi	r24, 0x0C	; 12
    2422:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
    2426:	80 91 b3 00 	lds	r24, 0x00B3
    242a:	90 91 b4 00 	lds	r25, 0x00B4
    242e:	0e 94 a6 13 	call	0x274c	; 0x274c <lcd_print>
    2432:	8a e0       	ldi	r24, 0x0A	; 10
    2434:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
    2438:	49 e0       	ldi	r20, 0x09	; 9
    243a:	51 e0       	ldi	r21, 0x01	; 1
    243c:	61 e1       	ldi	r22, 0x11	; 17
    243e:	71 e0       	ldi	r23, 0x01	; 1
    2440:	ce 01       	movw	r24, r28
    2442:	01 96       	adiw	r24, 0x01	; 1
    2444:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <icmp_ping>
    2448:	88 23       	and	r24, r24
    244a:	19 f0       	breq	.+6      	; 0x2452 <menu_process+0x13a>
    244c:	88 e4       	ldi	r24, 0x48	; 72
    244e:	96 e0       	ldi	r25, 0x06	; 6
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <menu_process+0x13e>
    2452:	8d e3       	ldi	r24, 0x3D	; 61
    2454:	96 e0       	ldi	r25, 0x06	; 6
    2456:	0e 94 b3 13 	call	0x2766	; 0x2766 <lcd_print_p>
    245a:	80 91 02 01 	lds	r24, 0x0102
    245e:	10 92 1c 01 	sts	0x011C, r1
    2462:	10 92 1d 01 	sts	0x011D, r1
    2466:	85 60       	ori	r24, 0x05	; 5
    2468:	33 c0       	rjmp	.+102    	; 0x24d0 <menu_process+0x1b8>
    246a:	ff 27       	eor	r31, r31
    246c:	eb 5d       	subi	r30, 0xDB	; 219
    246e:	f9 4f       	sbci	r31, 0xF9	; 249
    2470:	e4 91       	lpm	r30, Z
    2472:	80 91 20 01 	lds	r24, 0x0120
    2476:	8f 5f       	subi	r24, 0xFF	; 255
    2478:	80 93 20 01 	sts	0x0120, r24
    247c:	8e 17       	cp	r24, r30
    247e:	11 f5       	brne	.+68     	; 0x24c4 <menu_process+0x1ac>
    2480:	10 92 20 01 	sts	0x0120, r1
    2484:	1f c0       	rjmp	.+62     	; 0x24c4 <menu_process+0x1ac>
    2486:	10 3d       	cpi	r17, 0xD0	; 208
    2488:	a1 f4       	brne	.+40     	; 0x24b2 <menu_process+0x19a>
    248a:	10 92 20 01 	sts	0x0120, r1
    248e:	80 91 1c 01 	lds	r24, 0x011C
    2492:	82 30       	cpi	r24, 0x02	; 2
    2494:	48 f0       	brcs	.+18     	; 0x24a8 <menu_process+0x190>
    2496:	80 91 21 01 	lds	r24, 0x0121
    249a:	80 93 1c 01 	sts	0x011C, r24
    249e:	80 91 1f 01 	lds	r24, 0x011F
    24a2:	80 93 1d 01 	sts	0x011D, r24
    24a6:	0e c0       	rjmp	.+28     	; 0x24c4 <menu_process+0x1ac>
    24a8:	10 92 1c 01 	sts	0x011C, r1
    24ac:	10 92 1d 01 	sts	0x011D, r1
    24b0:	09 c0       	rjmp	.+18     	; 0x24c4 <menu_process+0x1ac>
    24b2:	10 3b       	cpi	r17, 0xB0	; 176
    24b4:	19 f4       	brne	.+6      	; 0x24bc <menu_process+0x1a4>
    24b6:	0e 94 a7 10 	call	0x214e	; 0x214e <key_up_process>
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <menu_process+0x1ac>
    24bc:	10 37       	cpi	r17, 0x70	; 112
    24be:	11 f4       	brne	.+4      	; 0x24c4 <menu_process+0x1ac>
    24c0:	0e 94 46 10 	call	0x208c	; 0x208c <key_dw_process>
    24c4:	0e 94 25 11 	call	0x224a	; 0x224a <display_menu>
    24c8:	80 91 02 01 	lds	r24, 0x0102
    24cc:	81 60       	ori	r24, 0x01	; 1
    24ce:	8b 7f       	andi	r24, 0xFB	; 251
    24d0:	80 93 02 01 	sts	0x0102, r24
    24d4:	c2 51       	subi	r28, 0x12	; 18
    24d6:	da 4f       	sbci	r29, 0xFA	; 250
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	08 95       	ret

000024ea <print_temp>:
    24ea:	cf 92       	push	r12
    24ec:	df 92       	push	r13
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	6c 01       	movw	r12, r24
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <adc_read>
    2502:	7c 01       	movw	r14, r24
    2504:	0e 94 06 14 	call	0x280c	; 0x280c <adc_read_temp>
    2508:	08 2f       	mov	r16, r24
    250a:	a7 01       	movw	r20, r14
    250c:	64 e0       	ldi	r22, 0x04	; 4
    250e:	c6 01       	movw	r24, r12
    2510:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
    2514:	fc 01       	movw	r30, r24
    2516:	8c e2       	ldi	r24, 0x2C	; 44
    2518:	81 93       	st	Z+, r24
    251a:	11 27       	eor	r17, r17
    251c:	a8 01       	movw	r20, r16
    251e:	62 e0       	ldi	r22, 0x02	; 2
    2520:	cf 01       	movw	r24, r30
    2522:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
    2526:	dc 01       	movw	r26, r24
    2528:	fc 01       	movw	r30, r24
    252a:	8f ed       	ldi	r24, 0xDF	; 223
    252c:	81 93       	st	Z+, r24
    252e:	83 e4       	ldi	r24, 0x43	; 67
    2530:	ed 01       	movw	r28, r26
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	11 82       	std	Z+1, r1	; 0x01
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	ff 90       	pop	r15
    2540:	ef 90       	pop	r14
    2542:	df 90       	pop	r13
    2544:	cf 90       	pop	r12
    2546:	08 95       	ret

00002548 <standby_display>:
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	c0 54       	subi	r28, 0x40	; 64
    2552:	d0 40       	sbci	r29, 0x00	; 0
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	90 91 02 01 	lds	r25, 0x0102
    2562:	91 ff       	sbrs	r25, 1
    2564:	41 c0       	rjmp	.+130    	; 0x25e8 <standby_display+0xa0>
    2566:	89 2f       	mov	r24, r25
    2568:	8d 7f       	andi	r24, 0xFD	; 253
    256a:	80 93 02 01 	sts	0x0102, r24
    256e:	92 fd       	sbrc	r25, 2
    2570:	3b c0       	rjmp	.+118    	; 0x25e8 <standby_display+0xa0>
    2572:	80 91 1c 01 	lds	r24, 0x011C
    2576:	88 23       	and	r24, r24
    2578:	b9 f5       	brne	.+110    	; 0x25e8 <standby_display+0xa0>
    257a:	8c e0       	ldi	r24, 0x0C	; 12
    257c:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
    2580:	e0 91 1b 01 	lds	r30, 0x011B
    2584:	ff 27       	eor	r31, r31
    2586:	ee 0f       	add	r30, r30
    2588:	ff 1f       	adc	r31, r31
    258a:	e3 52       	subi	r30, 0x23	; 35
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	0e 94 a6 13 	call	0x274c	; 0x274c <lcd_print>
    2596:	8a e0       	ldi	r24, 0x0A	; 10
    2598:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
    259c:	80 91 1b 01 	lds	r24, 0x011B
    25a0:	81 30       	cpi	r24, 0x01	; 1
    25a2:	21 f4       	brne	.+8      	; 0x25ac <standby_display+0x64>
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	6d e0       	ldi	r22, 0x0D	; 13
    25a8:	71 e0       	ldi	r23, 0x01	; 1
    25aa:	05 c0       	rjmp	.+10     	; 0x25b6 <standby_display+0x6e>
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	41 f4       	brne	.+16     	; 0x25c0 <standby_display+0x78>
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	69 e0       	ldi	r22, 0x09	; 9
    25b4:	71 e0       	ldi	r23, 0x01	; 1
    25b6:	ce 01       	movw	r24, r28
    25b8:	01 96       	adiw	r24, 0x01	; 1
    25ba:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <print_ip>
    25be:	10 c0       	rjmp	.+32     	; 0x25e0 <standby_display+0x98>
    25c0:	83 30       	cpi	r24, 0x03	; 3
    25c2:	41 f4       	brne	.+16     	; 0x25d4 <standby_display+0x8c>
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	67 e1       	ldi	r22, 0x17	; 23
    25c8:	71 e0       	ldi	r23, 0x01	; 1
    25ca:	ce 01       	movw	r24, r28
    25cc:	01 96       	adiw	r24, 0x01	; 1
    25ce:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <print_time>
    25d2:	06 c0       	rjmp	.+12     	; 0x25e0 <standby_display+0x98>
    25d4:	84 30       	cpi	r24, 0x04	; 4
    25d6:	21 f4       	brne	.+8      	; 0x25e0 <standby_display+0x98>
    25d8:	ce 01       	movw	r24, r28
    25da:	01 96       	adiw	r24, 0x01	; 1
    25dc:	0e 94 75 12 	call	0x24ea	; 0x24ea <print_temp>
    25e0:	ce 01       	movw	r24, r28
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	0e 94 a6 13 	call	0x274c	; 0x274c <lcd_print>
    25e8:	c0 5c       	subi	r28, 0xC0	; 192
    25ea:	df 4f       	sbci	r29, 0xFF	; 255
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <time_base>:
    25fc:	80 91 1e 01 	lds	r24, 0x011E
    2600:	8f 5f       	subi	r24, 0xFF	; 255
    2602:	80 93 1e 01 	sts	0x011E, r24
    2606:	8a 3f       	cpi	r24, 0xFA	; 250
    2608:	09 f0       	breq	.+2      	; 0x260c <time_base+0x10>
    260a:	50 c0       	rjmp	.+160    	; 0x26ac <time_base+0xb0>
    260c:	10 92 1e 01 	sts	0x011E, r1
    2610:	90 91 02 01 	lds	r25, 0x0102
    2614:	89 2f       	mov	r24, r25
    2616:	82 60       	ori	r24, 0x02	; 2
    2618:	80 93 02 01 	sts	0x0102, r24
    261c:	85 ff       	sbrs	r24, 5
    261e:	0c c0       	rjmp	.+24     	; 0x2638 <time_base+0x3c>
    2620:	80 91 ef 00 	lds	r24, 0x00EF
    2624:	8f 5f       	subi	r24, 0xFF	; 255
    2626:	80 93 ef 00 	sts	0x00EF, r24
    262a:	85 30       	cpi	r24, 0x05	; 5
    262c:	29 f4       	brne	.+10     	; 0x2638 <time_base+0x3c>
    262e:	10 92 ef 00 	sts	0x00EF, r1
    2632:	92 68       	ori	r25, 0x82	; 130
    2634:	90 93 02 01 	sts	0x0102, r25
    2638:	80 91 17 01 	lds	r24, 0x0117
    263c:	88 23       	and	r24, r24
    263e:	b1 f1       	breq	.+108    	; 0x26ac <time_base+0xb0>
    2640:	80 91 1c 01 	lds	r24, 0x011C
    2644:	84 30       	cpi	r24, 0x04	; 4
    2646:	91 f1       	breq	.+100    	; 0x26ac <time_base+0xb0>
    2648:	80 91 1a 01 	lds	r24, 0x011A
    264c:	81 50       	subi	r24, 0x01	; 1
    264e:	80 93 1a 01 	sts	0x011A, r24
    2652:	8c 33       	cpi	r24, 0x3C	; 60
    2654:	58 f1       	brcs	.+86     	; 0x26ac <time_base+0xb0>
    2656:	84 e1       	ldi	r24, 0x14	; 20
    2658:	80 93 1a 01 	sts	0x011A, r24
    265c:	80 91 19 01 	lds	r24, 0x0119
    2660:	81 50       	subi	r24, 0x01	; 1
    2662:	80 93 19 01 	sts	0x0119, r24
    2666:	8c 33       	cpi	r24, 0x3C	; 60
    2668:	08 f1       	brcs	.+66     	; 0x26ac <time_base+0xb0>
    266a:	8b e3       	ldi	r24, 0x3B	; 59
    266c:	80 93 19 01 	sts	0x0119, r24
    2670:	80 91 18 01 	lds	r24, 0x0118
    2674:	81 50       	subi	r24, 0x01	; 1
    2676:	80 93 18 01 	sts	0x0118, r24
    267a:	88 31       	cpi	r24, 0x18	; 24
    267c:	b8 f0       	brcs	.+46     	; 0x26ac <time_base+0xb0>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    267e:	49 e0       	ldi	r20, 0x09	; 9
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	da 01       	movw	r26, r20
    2684:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__eeprom_read_byte_1C1D1E>
    2688:	80 2d       	mov	r24, r0
    268a:	80 93 18 01 	sts	0x0118, r24
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    268e:	4f 5f       	subi	r20, 0xFF	; 255
    2690:	5f 4f       	sbci	r21, 0xFF	; 255
    2692:	da 01       	movw	r26, r20
    2694:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__eeprom_read_byte_1C1D1E>
    2698:	80 2d       	mov	r24, r0
    269a:	80 93 19 01 	sts	0x0119, r24
    269e:	10 92 1a 01 	sts	0x011A, r1
    26a2:	80 91 02 01 	lds	r24, 0x0102
    26a6:	80 61       	ori	r24, 0x10	; 16
    26a8:	80 93 02 01 	sts	0x0102, r24
    26ac:	08 95       	ret

000026ae <lcd_send_nibble>:
// Description : Send data (nibble) to lcd module
//
//********************************************************************************************
void lcd_send_nibble(unsigned char data)
{
    26ae:	92 b3       	in	r25, 0x12	; 18
    26b0:	9f 70       	andi	r25, 0x0F	; 15
    26b2:	92 bb       	out	0x12, r25	; 18
	data &= 0xF0;
	LCD_DATA_PORT &= 0x0F;
	LCD_DATA_PORT |= data;
    26b4:	92 b3       	in	r25, 0x12	; 18
    26b6:	80 7f       	andi	r24, 0xF0	; 240
    26b8:	98 2b       	or	r25, r24
    26ba:	92 bb       	out	0x12, r25	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26bc:	85 e0       	ldi	r24, 0x05	; 5
    26be:	8a 95       	dec	r24
    26c0:	f1 f7       	brne	.-4      	; 0x26be <lcd_send_nibble+0x10>
	_delay_us(1);	// 1us
	LCD_CONTROL_PORT |= _BV(LCD_EN_PIN);
    26c2:	c2 9a       	sbi	0x18, 2	; 24
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26c4:	8a e0       	ldi	r24, 0x0A	; 10
    26c6:	8a 95       	dec	r24
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <lcd_send_nibble+0x18>
	_delay_us(2);
	LCD_CONTROL_PORT &= ~_BV(LCD_EN_PIN);
    26ca:	c2 98       	cbi	0x18, 2	; 24
    26cc:	08 95       	ret

000026ce <lcd_send_byte>:
}
//********************************************************************************************
//
// Function : lcd_send_byte
// Description : Send data (byte) to lcd module
//
//********************************************************************************************
void lcd_send_byte( char data_or_cmd, char data )
{
    26ce:	1f 93       	push	r17
    26d0:	16 2f       	mov	r17, r22
	LCD_CONTROL_PORT &= ~_BV(LCD_RS_PIN);
    26d2:	c0 98       	cbi	0x18, 0	; 24
	if(data_or_cmd)
    26d4:	88 23       	and	r24, r24
    26d6:	11 f0       	breq	.+4      	; 0x26dc <lcd_send_byte+0xe>
		LCD_CONTROL_PORT |= _BV(LCD_RS_PIN);
    26d8:	c0 9a       	sbi	0x18, 0	; 24
    26da:	01 c0       	rjmp	.+2      	; 0x26de <lcd_send_byte+0x10>
	else
		LCD_CONTROL_PORT &= ~_BV(LCD_RS_PIN);
    26dc:	c0 98       	cbi	0x18, 0	; 24
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	8a 95       	dec	r24
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <lcd_send_byte+0x12>
	_delay_us(50);		// 1us
	LCD_CONTROL_PORT &= ~_BV(LCD_EN_PIN);
    26e4:	c2 98       	cbi	0x18, 2	; 24
	lcd_send_nibble(data & 0xF0);
    26e6:	81 2f       	mov	r24, r17
    26e8:	80 7f       	andi	r24, 0xF0	; 240
    26ea:	0e 94 57 13 	call	0x26ae	; 0x26ae <lcd_send_nibble>
	lcd_send_nibble(data << 4);
    26ee:	81 2f       	mov	r24, r17
    26f0:	82 95       	swap	r24
    26f2:	80 7f       	andi	r24, 0xF0	; 240
    26f4:	0e 94 57 13 	call	0x26ae	; 0x26ae <lcd_send_nibble>
    26f8:	1f 91       	pop	r17
    26fa:	08 95       	ret

000026fc <lcd_gotoxy>:
}
//********************************************************************************************
//
// Function : lcd_init
// Description : Lcd module initiation.(4-bits mode)
//
//********************************************************************************************
void lcd_init(void)
{
	char i;
	LCD_DATA_DDR |= (_BV(LCD_D7) | _BV(LCD_D6) | _BV(LCD_D5) | _BV(LCD_D4));
	LCD_CONTROL_DDR |= (_BV(LCD_RS_PIN) | _BV(LCD_RW_PIN) | _BV(LCD_EN_PIN));

	LCD_DATA_PORT &= ~(_BV(LCD_D7) | _BV(LCD_D6) | _BV(LCD_D5) | _BV(LCD_D4));
	LCD_CONTROL_PORT &= ~(_BV(LCD_RS_PIN) | _BV(LCD_RS_PIN) | _BV(LCD_RS_PIN));
	
	_delay_ms(15);		// 15 ms
	for(i=1;i<=3;++i)
	{
       lcd_send_nibble(0x30);
       _delay_ms(5);	// 5 ms
    }
    lcd_send_nibble(0x20);
	lcd_send_byte(WRITE_COMMAND, SET_FUNCTION);
	lcd_send_byte(WRITE_COMMAND, DISPLAY_ON);
	lcd_send_byte(WRITE_COMMAND, DISPLAY_CLR);
	lcd_send_byte(WRITE_COMMAND, ENTRY_MODE);
}
//********************************************************************************************
//
// Function : lcd_gotoxy
// Description : Send SET_DDRAM command to lcd module
//
//********************************************************************************************
void lcd_gotoxy( unsigned char x, unsigned char y)
{
    26fc:	61 30       	cpi	r22, 0x01	; 1
    26fe:	11 f0       	breq	.+4      	; 0x2704 <lcd_gotoxy+0x8>
	char address=0;

	if(y!=1)
    2700:	60 e4       	ldi	r22, 0x40	; 64
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <lcd_gotoxy+0xa>
    2704:	60 e0       	ldi	r22, 0x00	; 0
		address = LCD_LINE_TWO;
	address += x-1;
	lcd_send_byte(WRITE_COMMAND, SET_DDRAM|address);
    2706:	68 0f       	add	r22, r24
    2708:	61 50       	subi	r22, 0x01	; 1
    270a:	60 68       	ori	r22, 0x80	; 128
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	0e 94 67 13 	call	0x26ce	; 0x26ce <lcd_send_byte>
    2712:	08 95       	ret

00002714 <lcd_putc>:
}
//********************************************************************************************
//
// Function : lcd_putc
// Description : Send data(byte) or command to lcd module
// '\f' is clear display command
// '\n' is new line (second line) command
// '\b' is cursor back command
//
//********************************************************************************************
void lcd_putc( unsigned char c)
{
    2714:	68 2f       	mov	r22, r24
	if(c == '\f')
    2716:	8c 30       	cpi	r24, 0x0C	; 12
    2718:	49 f4       	brne	.+18     	; 0x272c <lcd_putc+0x18>
	{
		lcd_send_byte(WRITE_COMMAND, DISPLAY_CLR);
    271a:	61 e0       	ldi	r22, 0x01	; 1
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	0e 94 67 13 	call	0x26ce	; 0x26ce <lcd_send_byte>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2722:	80 e4       	ldi	r24, 0x40	; 64
    2724:	9f e1       	ldi	r25, 0x1F	; 31
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <lcd_putc+0x12>
    272a:	08 95       	ret
		_delay_ms(2);	// 2ms
	}
	else if(c == '\n')
    272c:	8a 30       	cpi	r24, 0x0A	; 10
    272e:	29 f4       	brne	.+10     	; 0x273a <lcd_putc+0x26>
		lcd_gotoxy(1, 2);
    2730:	62 e0       	ldi	r22, 0x02	; 2
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	0e 94 7e 13 	call	0x26fc	; 0x26fc <lcd_gotoxy>
    2738:	08 95       	ret
	else if(c == '\b')
    273a:	88 30       	cpi	r24, 0x08	; 8
    273c:	19 f4       	brne	.+6      	; 0x2744 <lcd_putc+0x30>
		lcd_send_byte(WRITE_COMMAND, CURSOR_BACK);
    273e:	60 e1       	ldi	r22, 0x10	; 16
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <lcd_putc+0x32>
	else
		lcd_send_byte(WRITE_DATA, c);
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	0e 94 67 13 	call	0x26ce	; 0x26ce <lcd_send_byte>
    274a:	08 95       	ret

0000274c <lcd_print>:
}
//********************************************************************************************
//
// Function : lcd_print
// Description : print string from ram to lcd module
//
//********************************************************************************************
void lcd_print( BYTE *ptr )
{
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	ec 01       	movw	r28, r24
    2752:	03 c0       	rjmp	.+6      	; 0x275a <lcd_print+0xe>

	while( *ptr )
	{
		lcd_putc(*ptr++);
    2754:	21 96       	adiw	r28, 0x01	; 1
    2756:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
    275a:	88 81       	ld	r24, Y
    275c:	88 23       	and	r24, r24
    275e:	d1 f7       	brne	.-12     	; 0x2754 <lcd_print+0x8>
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	08 95       	ret

00002766 <lcd_print_p>:
	}
}
//********************************************************************************************
//
// Function : lcd_print_p
// Description : print string from program memory to lcd module
//
//********************************************************************************************
void lcd_print_p( PGM_P ptr )
{
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	ec 01       	movw	r28, r24
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <lcd_print_p+0xc>
	unsigned char c;

	while( (c = pgm_read_byte ( ptr++ )) )
	{
		lcd_putc(c);
    276e:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
    2772:	fe 01       	movw	r30, r28
    2774:	21 96       	adiw	r28, 0x01	; 1
    2776:	84 91       	lpm	r24, Z
    2778:	88 23       	and	r24, r24
    277a:	c9 f7       	brne	.-14     	; 0x276e <lcd_print_p+0x8>
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	08 95       	ret

00002782 <lcd_init>:
    2782:	1f 93       	push	r17
    2784:	81 b3       	in	r24, 0x11	; 17
    2786:	80 6f       	ori	r24, 0xF0	; 240
    2788:	81 bb       	out	0x11, r24	; 17
    278a:	87 b3       	in	r24, 0x17	; 23
    278c:	87 60       	ori	r24, 0x07	; 7
    278e:	87 bb       	out	0x17, r24	; 23
    2790:	82 b3       	in	r24, 0x12	; 18
    2792:	8f 70       	andi	r24, 0x0F	; 15
    2794:	82 bb       	out	0x12, r24	; 18
    2796:	c0 98       	cbi	0x18, 0	; 24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2798:	80 e6       	ldi	r24, 0x60	; 96
    279a:	9a ee       	ldi	r25, 0xEA	; 234
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <lcd_init+0x1a>
    27a0:	11 e0       	ldi	r17, 0x01	; 1
    27a2:	80 e3       	ldi	r24, 0x30	; 48
    27a4:	0e 94 57 13 	call	0x26ae	; 0x26ae <lcd_send_nibble>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27a8:	80 e2       	ldi	r24, 0x20	; 32
    27aa:	9e e4       	ldi	r25, 0x4E	; 78
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <lcd_init+0x2a>
    27b0:	1f 5f       	subi	r17, 0xFF	; 255
    27b2:	14 30       	cpi	r17, 0x04	; 4
    27b4:	b1 f7       	brne	.-20     	; 0x27a2 <lcd_init+0x20>
    27b6:	80 e2       	ldi	r24, 0x20	; 32
    27b8:	0e 94 57 13 	call	0x26ae	; 0x26ae <lcd_send_nibble>
    27bc:	68 e2       	ldi	r22, 0x28	; 40
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	0e 94 67 13 	call	0x26ce	; 0x26ce <lcd_send_byte>
    27c4:	6c e0       	ldi	r22, 0x0C	; 12
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	0e 94 67 13 	call	0x26ce	; 0x26ce <lcd_send_byte>
    27cc:	61 e0       	ldi	r22, 0x01	; 1
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	0e 94 67 13 	call	0x26ce	; 0x26ce <lcd_send_byte>
    27d4:	66 e0       	ldi	r22, 0x06	; 6
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	0e 94 67 13 	call	0x26ce	; 0x26ce <lcd_send_byte>
    27dc:	1f 91       	pop	r17
    27de:	08 95       	ret

000027e0 <adc_read>:
// Description : read ADC value, select ADC channel to read by channel argument
//
//********************************************************************************************
WORD adc_read ( BYTE channel )
{
    27e0:	97 b1       	in	r25, 0x07	; 7
    27e2:	90 7e       	andi	r25, 0xE0	; 224
    27e4:	8f 71       	andi	r24, 0x1F	; 31
    27e6:	98 2b       	or	r25, r24
    27e8:	97 b9       	out	0x07, r25	; 7
	// Analog channel selection
	ADMUX = ((ADMUX) & ~0x1f) | (channel & 0x1f);
	
	// Start conversion
	ADCSRA |= _BV(ADSC);
    27ea:	36 9a       	sbi	0x06, 6	; 6

	// Wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );
    27ec:	36 99       	sbic	0x06, 6	; 6
    27ee:	fe cf       	rjmp	.-4      	; 0x27ec <adc_read+0xc>
	
	// CAUTION: READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));
    27f0:	84 b1       	in	r24, 0x04	; 4
    27f2:	25 b1       	in	r18, 0x05	; 5
    27f4:	99 27       	eor	r25, r25
    27f6:	33 27       	eor	r19, r19
    27f8:	32 2f       	mov	r19, r18
    27fa:	22 27       	eor	r18, r18
}
    27fc:	82 2b       	or	r24, r18
    27fe:	93 2b       	or	r25, r19
    2800:	08 95       	ret

00002802 <adc_init>:
//********************************************************************************************
//
// Function : adc_init
// Description : Initial analog to digital convertion
//
//********************************************************************************************
//void adc_init ( void ) __attribute__ ((naked));
void adc_init ( void )
{
    2802:	87 e8       	ldi	r24, 0x87	; 135
    2804:	86 b9       	out	0x06, r24	; 6
	//BYTE i;

	// ADC enable, Prescaler divide by 128, ADC clock = 16MHz/128 = 125kHz
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);

	// Select Vref, internal Vref 2.56V and external capacitor
	ADMUX = _BV(REFS1) | _BV(REFS0);
    2806:	80 ec       	ldi	r24, 0xC0	; 192
    2808:	87 b9       	out	0x07, r24	; 7
    280a:	08 95       	ret

0000280c <adc_read_temp>:
	
	// reading temparature
	//for ( i=0; i<32; i++ )
	//	adc_read_temp ();
}
//********************************************************************************************
//
// Function : adc_read_temp
// Description : read temparature from ADC1 and convert to real temparature
//
//********************************************************************************************
BYTE adc_read_temp ( void )
{
    280c:	1f 93       	push	r17
	static WORD temp_buf[ ADC_TEMP_BUFFER ];
	static BYTE buf_index=0;
	WORD result=0,data;
	BYTE loop;
	
	// Store each sample to buffer
	temp_buf[ buf_index ] = adc_read ( ADC_TEMP_CHANNEL );
    280e:	10 91 f0 00 	lds	r17, 0x00F0
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <adc_read>
    2818:	e1 2f       	mov	r30, r17
    281a:	ff 27       	eor	r31, r31
    281c:	ee 0f       	add	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	ef 50       	subi	r30, 0x0F	; 15
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	80 83       	st	Z, r24
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	e1 ef       	ldi	r30, 0xF1	; 241
    282e:	f0 e0       	ldi	r31, 0x00	; 0
	
	// Low pass filter 8 samples by default.
	for ( loop=0; loop<ADC_TEMP_BUFFER; loop++ )
	{
		result += temp_buf [ loop ];
    2830:	81 91       	ld	r24, Z+
    2832:	91 91       	ld	r25, Z+
    2834:	28 0f       	add	r18, r24
    2836:	39 1f       	adc	r19, r25
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	e1 30       	cpi	r30, 0x01	; 1
    283c:	f8 07       	cpc	r31, r24
    283e:	c1 f7       	brne	.-16     	; 0x2830 <adc_read_temp+0x24>
	}
	// reset index
	if( ++buf_index == ADC_TEMP_BUFFER )
    2840:	81 2f       	mov	r24, r17
    2842:	8f 5f       	subi	r24, 0xFF	; 255
    2844:	80 93 f0 00 	sts	0x00F0, r24
    2848:	88 30       	cpi	r24, 0x08	; 8
    284a:	11 f4       	brne	.+4      	; 0x2850 <adc_read_temp+0x44>
	{
		buf_index = 0;
    284c:	10 92 f0 00 	sts	0x00F0, r1
	}
	
	// average result
	result = result / ADC_TEMP_BUFFER;
    2850:	b9 01       	movw	r22, r18
    2852:	53 e0       	ldi	r21, 0x03	; 3
    2854:	76 95       	lsr	r23
    2856:	67 95       	ror	r22
    2858:	5a 95       	dec	r21
    285a:	e1 f7       	brne	.-8      	; 0x2854 <adc_read_temp+0x48>
    285c:	21 e5       	ldi	r18, 0x51	; 81
    285e:	36 e0       	ldi	r19, 0x06	; 6
    2860:	40 e0       	ldi	r20, 0x00	; 0
	
	// look-up for temparature, convert to real temparature
	for ( loop=0; loop<100; loop++ )
	{
		data = pgm_read_word ( temp_list + loop );
    2862:	f9 01       	movw	r30, r18
    2864:	85 91       	lpm	r24, Z+
    2866:	94 91       	lpm	r25, Z
		if( result <= data)
    2868:	86 17       	cp	r24, r22
    286a:	97 07       	cpc	r25, r23
    286c:	28 f4       	brcc	.+10     	; 0x2878 <adc_read_temp+0x6c>
    286e:	4f 5f       	subi	r20, 0xFF	; 255
    2870:	2e 5f       	subi	r18, 0xFE	; 254
    2872:	3f 4f       	sbci	r19, 0xFF	; 255
    2874:	44 36       	cpi	r20, 0x64	; 100
    2876:	a9 f7       	brne	.-22     	; 0x2862 <adc_read_temp+0x56>
			break;
	}

	return loop;
}
    2878:	84 2f       	mov	r24, r20
    287a:	99 27       	eor	r25, r25
    287c:	1f 91       	pop	r17
    287e:	08 95       	ret

00002880 <udp_puts_data>:
// Description : puts data from RAM to UDP tx buffer
//
//********************************************************************************************
WORD udp_puts_data ( BYTE *rxtx_buffer, BYTE *data, WORD offset )
{
    2880:	db 01       	movw	r26, r22
    2882:	fc 01       	movw	r30, r24
    2884:	e4 0f       	add	r30, r20
    2886:	f5 1f       	adc	r31, r21
    2888:	ba 96       	adiw	r30, 0x2a	; 42
    288a:	04 c0       	rjmp	.+8      	; 0x2894 <udp_puts_data+0x14>
	while( *data )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = *data++;
    288c:	81 93       	st	Z+, r24
    288e:	11 96       	adiw	r26, 0x01	; 1
		offset++;
    2890:	4f 5f       	subi	r20, 0xFF	; 255
    2892:	5f 4f       	sbci	r21, 0xFF	; 255
    2894:	8c 91       	ld	r24, X
    2896:	88 23       	and	r24, r24
    2898:	c9 f7       	brne	.-14     	; 0x288c <udp_puts_data+0xc>
	}

	return offset;
}
    289a:	ca 01       	movw	r24, r20
    289c:	08 95       	ret

0000289e <udp_puts_data_p>:
//********************************************************************************************
//
// Function : udp_puts_data_p
// Description : puts data from program memory to tx buffer
//
//********************************************************************************************
WORD udp_puts_data_p ( BYTE *rxtx_buffer, PGM_P data, WORD offset )
{
    289e:	dc 01       	movw	r26, r24
    28a0:	a4 0f       	add	r26, r20
    28a2:	b5 1f       	adc	r27, r21
    28a4:	9a 96       	adiw	r26, 0x2a	; 42
    28a6:	03 c0       	rjmp	.+6      	; 0x28ae <udp_puts_data_p+0x10>
	BYTE ch;
	
	while( (ch = pgm_read_byte(data++)) )
	{
		rxtx_buffer[ UDP_DATA_P + offset ] = ch;
    28a8:	8d 93       	st	X+, r24
		offset++;
    28aa:	4f 5f       	subi	r20, 0xFF	; 255
    28ac:	5f 4f       	sbci	r21, 0xFF	; 255
    28ae:	fb 01       	movw	r30, r22
    28b0:	6f 5f       	subi	r22, 0xFF	; 255
    28b2:	7f 4f       	sbci	r23, 0xFF	; 255
    28b4:	84 91       	lpm	r24, Z
    28b6:	88 23       	and	r24, r24
    28b8:	b9 f7       	brne	.-18     	; 0x28a8 <udp_puts_data_p+0xa>
	}

	return offset;
}
    28ba:	ca 01       	movw	r24, r20
    28bc:	08 95       	ret

000028be <udp_generate_header>:
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	8c 01       	movw	r16, r24
    28c4:	ca 01       	movw	r24, r20
    28c6:	2b e0       	ldi	r18, 0x0B	; 11
    28c8:	f8 01       	movw	r30, r16
    28ca:	22 a3       	std	Z+34, r18	; 0x22
    28cc:	28 eb       	ldi	r18, 0xB8	; 184
    28ce:	23 a3       	std	Z+35, r18	; 0x23
    28d0:	74 a3       	std	Z+36, r23	; 0x24
    28d2:	65 a3       	std	Z+37, r22	; 0x25
    28d4:	96 a3       	std	Z+38, r25	; 0x26
    28d6:	47 a3       	std	Z+39, r20	; 0x27
    28d8:	10 a6       	std	Z+40, r1	; 0x28
    28da:	11 a6       	std	Z+41, r1	; 0x29
    28dc:	41 96       	adiw	r24, 0x11	; 17
    28de:	9c 01       	movw	r18, r24
    28e0:	44 27       	eor	r20, r20
    28e2:	55 27       	eor	r21, r21
    28e4:	09 97       	sbiw	r24, 0x09	; 9
    28e6:	bc 01       	movw	r22, r24
    28e8:	c8 01       	movw	r24, r16
    28ea:	4a 96       	adiw	r24, 0x1a	; 26
    28ec:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <software_checksum>
    28f0:	f8 01       	movw	r30, r16
    28f2:	90 a7       	std	Z+40, r25	; 0x28
    28f4:	81 a7       	std	Z+41, r24	; 0x29
    28f6:	1f 91       	pop	r17
    28f8:	0f 91       	pop	r16
    28fa:	08 95       	ret

000028fc <udp_receive>:
//********************************************************************************************
//
// Function : udp_receive
// Argument : BYTE *rxtx_buffer is a pointer, point to UDP tx buffer
//			  BYTE *dest_mac is a pointer, point to destiantion MAC address
//			  BYTE *dest_ip is a pointer, point to destiantion IP address
// Return value : if received packet is UDP and destination port matching with AVR port, return true
//				  other return false
//
// Description : check received packet and process UDP command.
//
//********************************************************************************************
BYTE udp_receive ( BYTE *rxtx_buffer, BYTE *dest_mac, BYTE *dest_ip )
{
    28fc:	8f 92       	push	r8
    28fe:	9f 92       	push	r9
    2900:	af 92       	push	r10
    2902:	bf 92       	push	r11
    2904:	cf 92       	push	r12
    2906:	df 92       	push	r13
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	c3 54       	subi	r28, 0x43	; 67
    291a:	d0 40       	sbci	r29, 0x00	; 0
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	6c 01       	movw	r12, r24
    2928:	5b 01       	movw	r10, r22
    292a:	4a 01       	movw	r8, r20
	WORD_BYTES dlength, adc0;
	BYTE generic_buf[64], temp, count_time_temp[3], tmp;

	// check UDP packet and check destination port
	if ( rxtx_buffer[IP_PROTO_P] != IP_PROTO_UDP_V || rxtx_buffer[UDP_DST_PORT_H_P] != UDP_AVR_PORT_H_V || rxtx_buffer[ UDP_DST_PORT_L_P ] != UDP_AVR_PORT_L_V )
    292c:	fc 01       	movw	r30, r24
    292e:	87 89       	ldd	r24, Z+23	; 0x17
    2930:	81 31       	cpi	r24, 0x11	; 17
    2932:	09 f0       	breq	.+2      	; 0x2936 <udp_receive+0x3a>
    2934:	f1 c1       	rjmp	.+994    	; 0x2d18 <udp_receive+0x41c>
    2936:	84 a1       	ldd	r24, Z+36	; 0x24
    2938:	8b 30       	cpi	r24, 0x0B	; 11
    293a:	09 f0       	breq	.+2      	; 0x293e <udp_receive+0x42>
    293c:	ed c1       	rjmp	.+986    	; 0x2d18 <udp_receive+0x41c>
    293e:	85 a1       	ldd	r24, Z+37	; 0x25
    2940:	88 3b       	cpi	r24, 0xB8	; 184
    2942:	09 f0       	breq	.+2      	; 0x2946 <udp_receive+0x4a>
    2944:	e9 c1       	rjmp	.+978    	; 0x2d18 <udp_receive+0x41c>
		return 0;
	
	// check UDP command, UDP command are first and second byte
	// "GA" command is Get All command, AVR will be send all data to AVRnet CPannel
	// Response format is OKLLADC0TTEHHMMAAA.AAA.AAA.AAA;SSS.SSS.SSS.SSS;\r\n
	// LL is LED1 and LED2
	// ADC0 is ADC0 value
	// TT is temperature
	// E is send temp enable/disable
	// HH is hours for send temp
	// MM is minutes for send temp
	// AAA.AAA.AAA.AAA is an AVR IP address
	// SSS.SSS.SSS.SSS is a Server IP address
	// ';' is end of IP address
	// \r\n is end of command
	// for example : GA100512250010010.1.1.1;10.1.1.76\r\n = LED1 on, LED2 off, ADC0 0512, Temp 25, Disable send temp, Hour 01, Min 00
	if ( rxtx_buffer[UDP_DATA_P] == 'G' && rxtx_buffer[UDP_DATA_P+1] == 'A' && rxtx_buffer[UDP_DATA_P+2] == '\r' && rxtx_buffer[UDP_DATA_P+3] == '\n')
    2946:	d6 01       	movw	r26, r12
    2948:	9a 96       	adiw	r26, 0x2a	; 42
    294a:	82 a5       	ldd	r24, Z+42	; 0x2a
    294c:	87 34       	cpi	r24, 0x47	; 71
    294e:	09 f0       	breq	.+2      	; 0x2952 <udp_receive+0x56>
    2950:	a1 c0       	rjmp	.+322    	; 0x2a94 <udp_receive+0x198>
    2952:	83 a5       	ldd	r24, Z+43	; 0x2b
    2954:	81 34       	cpi	r24, 0x41	; 65
    2956:	09 f0       	breq	.+2      	; 0x295a <udp_receive+0x5e>
    2958:	9d c0       	rjmp	.+314    	; 0x2a94 <udp_receive+0x198>
    295a:	84 a5       	ldd	r24, Z+44	; 0x2c
    295c:	8d 30       	cpi	r24, 0x0D	; 13
    295e:	09 f0       	breq	.+2      	; 0x2962 <udp_receive+0x66>
    2960:	99 c0       	rjmp	.+306    	; 0x2a94 <udp_receive+0x198>
    2962:	85 a5       	ldd	r24, Z+45	; 0x2d
    2964:	8a 30       	cpi	r24, 0x0A	; 10
    2966:	09 f0       	breq	.+2      	; 0x296a <udp_receive+0x6e>
    2968:	95 c0       	rjmp	.+298    	; 0x2a94 <udp_receive+0x198>
	{
		// command response
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("GAOK"), 0 );
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	61 e5       	ldi	r22, 0x51	; 81
    2970:	77 e0       	ldi	r23, 0x07	; 7
    2972:	c6 01       	movw	r24, r12
    2974:	0e 94 4f 14 	call	0x289e	; 0x289e <udp_puts_data_p>
		// LED1
		if ((LED_PORT&_BV(LED_PIN1))==0)
    2978:	ae 99       	sbic	0x15, 6	; 21
    297a:	04 c0       	rjmp	.+8      	; 0x2984 <udp_receive+0x88>
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
    297c:	ac 01       	movw	r20, r24
    297e:	6f e4       	ldi	r22, 0x4F	; 79
    2980:	77 e0       	ldi	r23, 0x07	; 7
    2982:	03 c0       	rjmp	.+6      	; 0x298a <udp_receive+0x8e>
		else
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
    2984:	ac 01       	movw	r20, r24
    2986:	6d e4       	ldi	r22, 0x4D	; 77
    2988:	77 e0       	ldi	r23, 0x07	; 7
    298a:	c6 01       	movw	r24, r12
    298c:	0e 94 4f 14 	call	0x289e	; 0x289e <udp_puts_data_p>
		// LED2
		if ((LED_PORT&_BV(LED_PIN2))==0)
    2990:	af 99       	sbic	0x15, 7	; 21
    2992:	04 c0       	rjmp	.+8      	; 0x299c <udp_receive+0xa0>
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
    2994:	ac 01       	movw	r20, r24
    2996:	6b e4       	ldi	r22, 0x4B	; 75
    2998:	77 e0       	ldi	r23, 0x07	; 7
    299a:	03 c0       	rjmp	.+6      	; 0x29a2 <udp_receive+0xa6>
		else
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
    299c:	ac 01       	movw	r20, r24
    299e:	69 e4       	ldi	r22, 0x49	; 73
    29a0:	77 e0       	ldi	r23, 0x07	; 7
    29a2:	c6 01       	movw	r24, r12
    29a4:	0e 94 4f 14 	call	0x289e	; 0x289e <udp_puts_data_p>
    29a8:	7c 01       	movw	r14, r24
		// ADC0
		adc0.word = adc_read ( 0 );
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <adc_read>
		print_decimal ( generic_buf, 4, adc0.word );
    29b0:	8e 01       	movw	r16, r28
    29b2:	0c 5f       	subi	r16, 0xFC	; 252
    29b4:	1f 4f       	sbci	r17, 0xFF	; 255
    29b6:	ac 01       	movw	r20, r24
    29b8:	64 e0       	ldi	r22, 0x04	; 4
    29ba:	c8 01       	movw	r24, r16
    29bc:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
		generic_buf[ 4 ] = '\0';
    29c0:	18 86       	std	Y+8, r1	; 0x08
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
    29c2:	a7 01       	movw	r20, r14
    29c4:	b8 01       	movw	r22, r16
    29c6:	c6 01       	movw	r24, r12
    29c8:	0e 94 40 14 	call	0x2880	; 0x2880 <udp_puts_data>
    29cc:	7c 01       	movw	r14, r24
		// temperature
		temp = adc_read_temp();
    29ce:	0e 94 06 14 	call	0x280c	; 0x280c <adc_read_temp>
		print_decimal ( generic_buf, 2, temp );
    29d2:	99 27       	eor	r25, r25
    29d4:	ac 01       	movw	r20, r24
    29d6:	62 e0       	ldi	r22, 0x02	; 2
    29d8:	c8 01       	movw	r24, r16
    29da:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
		generic_buf[ 2 ] = '\0';
    29de:	1e 82       	std	Y+6, r1	; 0x06
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
    29e0:	a7 01       	movw	r20, r14
    29e2:	b8 01       	movw	r22, r16
    29e4:	c6 01       	movw	r24, r12
    29e6:	0e 94 40 14 	call	0x2880	; 0x2880 <udp_puts_data>
    29ea:	7c 01       	movw	r14, r24
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 

              __asm__ __volatile__ (
    29ec:	83 e0       	ldi	r24, 0x03	; 3
    29ee:	a8 e0       	ldi	r26, 0x08	; 8
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	fe 01       	movw	r30, r28
    29f4:	31 96       	adiw	r30, 0x01	; 1
    29f6:	18 2e       	mov	r1, r24
    29f8:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>
		// send temp config
		eeprom_read_block ( count_time_temp, ee_count_time, 3 );
		if (count_time_temp[0])
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	88 23       	and	r24, r24
    2a00:	21 f0       	breq	.+8      	; 0x2a0a <udp_receive+0x10e>
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("1"), dlength.word );
    2a02:	a7 01       	movw	r20, r14
    2a04:	67 e4       	ldi	r22, 0x47	; 71
    2a06:	77 e0       	ldi	r23, 0x07	; 7
    2a08:	03 c0       	rjmp	.+6      	; 0x2a10 <udp_receive+0x114>
		else
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("0"), dlength.word );
    2a0a:	a7 01       	movw	r20, r14
    2a0c:	65 e4       	ldi	r22, 0x45	; 69
    2a0e:	77 e0       	ldi	r23, 0x07	; 7
    2a10:	c6 01       	movw	r24, r12
    2a12:	0e 94 4f 14 	call	0x289e	; 0x289e <udp_puts_data_p>
    2a16:	7c 01       	movw	r14, r24
		print_decimal ( generic_buf, 2, count_time_temp[1] );
    2a18:	4a 81       	ldd	r20, Y+2	; 0x02
    2a1a:	55 27       	eor	r21, r21
    2a1c:	8e 01       	movw	r16, r28
    2a1e:	0c 5f       	subi	r16, 0xFC	; 252
    2a20:	1f 4f       	sbci	r17, 0xFF	; 255
    2a22:	62 e0       	ldi	r22, 0x02	; 2
    2a24:	c8 01       	movw	r24, r16
    2a26:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
		generic_buf[ 2 ] = '\0';
    2a2a:	1e 82       	std	Y+6, r1	; 0x06
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
    2a2c:	a7 01       	movw	r20, r14
    2a2e:	b8 01       	movw	r22, r16
    2a30:	c6 01       	movw	r24, r12
    2a32:	0e 94 40 14 	call	0x2880	; 0x2880 <udp_puts_data>
    2a36:	7c 01       	movw	r14, r24
		print_decimal ( generic_buf, 2, count_time_temp[2] );
    2a38:	4b 81       	ldd	r20, Y+3	; 0x03
    2a3a:	55 27       	eor	r21, r21
    2a3c:	62 e0       	ldi	r22, 0x02	; 2
    2a3e:	c8 01       	movw	r24, r16
    2a40:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <print_decimal>
		generic_buf[ 2 ] = '\0';
    2a44:	1e 82       	std	Y+6, r1	; 0x06
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
    2a46:	a7 01       	movw	r20, r14
    2a48:	b8 01       	movw	r22, r16
    2a4a:	c6 01       	movw	r24, r12
    2a4c:	0e 94 40 14 	call	0x2880	; 0x2880 <udp_puts_data>
    2a50:	7c 01       	movw	r14, r24
		// AVR IP address
		print_ip ( generic_buf, (BYTE*)&avr_ip, 0 );
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	6d e0       	ldi	r22, 0x0D	; 13
    2a56:	71 e0       	ldi	r23, 0x01	; 1
    2a58:	c8 01       	movw	r24, r16
    2a5a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <print_ip>
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
    2a5e:	a7 01       	movw	r20, r14
    2a60:	b8 01       	movw	r22, r16
    2a62:	c6 01       	movw	r24, r12
    2a64:	0e 94 40 14 	call	0x2880	; 0x2880 <udp_puts_data>
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR(";"), dlength.word );
    2a68:	ac 01       	movw	r20, r24
    2a6a:	63 e4       	ldi	r22, 0x43	; 67
    2a6c:	77 e0       	ldi	r23, 0x07	; 7
    2a6e:	c6 01       	movw	r24, r12
    2a70:	0e 94 4f 14 	call	0x289e	; 0x289e <udp_puts_data_p>
    2a74:	7c 01       	movw	r14, r24
		// Server IP address
		print_ip ( generic_buf, (BYTE*)&server_ip, 0 );
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	69 e0       	ldi	r22, 0x09	; 9
    2a7a:	71 e0       	ldi	r23, 0x01	; 1
    2a7c:	c8 01       	movw	r24, r16
    2a7e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <print_ip>
		dlength.word = udp_puts_data ( rxtx_buffer, (BYTE *)generic_buf, dlength.word );
    2a82:	a7 01       	movw	r20, r14
    2a84:	b8 01       	movw	r22, r16
    2a86:	c6 01       	movw	r24, r12
    2a88:	0e 94 40 14 	call	0x2880	; 0x2880 <udp_puts_data>
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR(";\r\n"), dlength.word );
    2a8c:	ac 01       	movw	r20, r24
    2a8e:	6f e3       	ldi	r22, 0x3F	; 63
    2a90:	77 e0       	ldi	r23, 0x07	; 7
    2a92:	12 c1       	rjmp	.+548    	; 0x2cb8 <udp_receive+0x3bc>
	}
	// "ST" command is set send temperature configuration command
	// "ST" command format is STEHHMM\r\n
	// E is send temp enable/disable
	// HH is hours for send temp
	// MM is minutes for send temp
	// \r\n is end of command
	// for example : ST10115\r\n = Enable send temp, 1-Hour, 15-Minutes
	else if ( rxtx_buffer[UDP_DATA_P] == 'S' && rxtx_buffer[UDP_DATA_P+1] == 'T' && rxtx_buffer[UDP_DATA_P+7] == '\r' && rxtx_buffer[UDP_DATA_P+8] == '\n')
    2a94:	8c 91       	ld	r24, X
    2a96:	83 35       	cpi	r24, 0x53	; 83
    2a98:	99 f5       	brne	.+102    	; 0x2b00 <udp_receive+0x204>
    2a9a:	f6 01       	movw	r30, r12
    2a9c:	83 a5       	ldd	r24, Z+43	; 0x2b
    2a9e:	84 35       	cpi	r24, 0x54	; 84
    2aa0:	79 f5       	brne	.+94     	; 0x2b00 <udp_receive+0x204>
    2aa2:	81 a9       	ldd	r24, Z+49	; 0x31
    2aa4:	8d 30       	cpi	r24, 0x0D	; 13
    2aa6:	61 f5       	brne	.+88     	; 0x2b00 <udp_receive+0x204>
    2aa8:	32 a9       	ldd	r19, Z+50	; 0x32
    2aaa:	3a 30       	cpi	r19, 0x0A	; 10
    2aac:	49 f5       	brne	.+82     	; 0x2b00 <udp_receive+0x204>
	{
		// get enable/disable
		count_time_temp[0] = rxtx_buffer[UDP_DATA_P+2] - '0';
    2aae:	84 a5       	ldd	r24, Z+44	; 0x2c
    2ab0:	80 53       	subi	r24, 0x30	; 48
    2ab2:	89 83       	std	Y+1, r24	; 0x01
		// get hour
		count_time_temp[1] = (rxtx_buffer[UDP_DATA_P+3] - '0') * 10;
    2ab4:	85 a5       	ldd	r24, Z+45	; 0x2d
    2ab6:	83 9f       	mul	r24, r19
    2ab8:	c0 01       	movw	r24, r0
    2aba:	11 24       	eor	r1, r1
		count_time_temp[1] = count_time_temp[1] + (rxtx_buffer[UDP_DATA_P+4] - '0');
    2abc:	26 a5       	ldd	r18, Z+46	; 0x2e
    2abe:	28 0f       	add	r18, r24
    2ac0:	20 51       	subi	r18, 0x10	; 16
    2ac2:	2a 83       	std	Y+2, r18	; 0x02
		// get minute
		count_time_temp[2] = (rxtx_buffer[UDP_DATA_P+5] - '0') * 10;
    2ac4:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ac6:	83 9f       	mul	r24, r19
    2ac8:	c0 01       	movw	r24, r0
    2aca:	11 24       	eor	r1, r1
		count_time_temp[2] = count_time_temp[2] + (rxtx_buffer[UDP_DATA_P+6] - '0');
    2acc:	20 a9       	ldd	r18, Z+48	; 0x30
    2ace:	28 0f       	add	r18, r24
    2ad0:	20 51       	subi	r18, 0x10	; 16
    2ad2:	2b 83       	std	Y+3, r18	; 0x03
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    2ad4:	83 e0       	ldi	r24, 0x03	; 3
    2ad6:	48 e0       	ldi	r20, 0x08	; 8
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	fe 01       	movw	r30, r28
    2adc:	31 96       	adiw	r30, 0x01	; 1
    2ade:	da 01       	movw	r26, r20
    2ae0:	18 2e       	mov	r1, r24
    2ae2:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__eeprom_write_block_1C1D1E>
    2ae6:	e7 e1       	ldi	r30, 0x17	; 23
    2ae8:	f1 e0       	ldi	r31, 0x01	; 1
    2aea:	da 01       	movw	r26, r20
    2aec:	18 2e       	mov	r1, r24
    2aee:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>
		// write config to eeprom
		eeprom_write_block ( count_time_temp, ee_count_time, 3 );
		eeprom_read_block ( count_time, ee_count_time, 3 );
		count_time[3] = 0;
    2af2:	10 92 1a 01 	sts	0x011A, r1
		// command response
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("STOK\r\n"), 0 );
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	68 e3       	ldi	r22, 0x38	; 56
    2afc:	77 e0       	ldi	r23, 0x07	; 7
    2afe:	dc c0       	rjmp	.+440    	; 0x2cb8 <udp_receive+0x3bc>
	}
	// "SI" command is set AVR IP address command
	// "SI" command format is SIAAA.AAA.AAA.AAA;SSS.SSS.SSS.SSS;\r\n
	// AAA.AAA.AAA.AAA is an AVR IP address (variable length)
	// SSS.SSS.SSS.SSS is a Server IP address (variable length)
	// ';' end of ip address
	// \r\n is end of command
	// for example : SI10.1.1.1;10.1.1.76;\r\n
	else if ( rxtx_buffer[UDP_DATA_P] == 'S' && rxtx_buffer[UDP_DATA_P+1] == 'I' )
    2b00:	8c 91       	ld	r24, X
    2b02:	83 35       	cpi	r24, 0x53	; 83
    2b04:	09 f0       	breq	.+2      	; 0x2b08 <udp_receive+0x20c>
    2b06:	5f c0       	rjmp	.+190    	; 0x2bc6 <udp_receive+0x2ca>
    2b08:	f6 01       	movw	r30, r12
    2b0a:	83 a5       	ldd	r24, Z+43	; 0x2b
    2b0c:	89 34       	cpi	r24, 0x49	; 73
    2b0e:	09 f0       	breq	.+2      	; 0x2b12 <udp_receive+0x216>
    2b10:	5a c0       	rjmp	.+180    	; 0x2bc6 <udp_receive+0x2ca>
    2b12:	ec 5a       	subi	r30, 0xAC	; 172
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	9a e2       	ldi	r25, 0x2A	; 42
	{
		// find \r\n
		for(tmp=UDP_DATA_P; tmp<UDP_DATA_P+128; tmp++)
		{
			if(rxtx_buffer[UDP_DATA_P+tmp]=='\r' && rxtx_buffer[UDP_DATA_P+tmp+1]=='\n')
    2b18:	80 81       	ld	r24, Z
    2b1a:	8d 30       	cpi	r24, 0x0D	; 13
    2b1c:	19 f4       	brne	.+6      	; 0x2b24 <udp_receive+0x228>
    2b1e:	81 81       	ldd	r24, Z+1	; 0x01
    2b20:	8a 30       	cpi	r24, 0x0A	; 10
    2b22:	21 f0       	breq	.+8      	; 0x2b2c <udp_receive+0x230>
    2b24:	9f 5f       	subi	r25, 0xFF	; 255
    2b26:	31 96       	adiw	r30, 0x01	; 1
    2b28:	9a 3a       	cpi	r25, 0xAA	; 170
    2b2a:	b1 f7       	brne	.-20     	; 0x2b18 <udp_receive+0x21c>
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	02 2f       	mov	r16, r18
			{
				temp = 0;
				break;
			}
		}
		if(temp==0)
		{
			tmp = 0;
			// find ';' end of IP address and replace it with zero
			while ( rxtx_buffer[UDP_DATA_P+tmp] != ';') tmp++;
    2b32:	f6 01       	movw	r30, r12
    2b34:	e2 0f       	add	r30, r18
    2b36:	f1 1d       	adc	r31, r1
    2b38:	82 a5       	ldd	r24, Z+42	; 0x2a
    2b3a:	2f 5f       	subi	r18, 0xFF	; 255
    2b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3e:	8b 33       	cpi	r24, 0x3B	; 59
    2b40:	b9 f7       	brne	.-18     	; 0x2b30 <udp_receive+0x234>
    2b42:	10 2f       	mov	r17, r16
			rxtx_buffer[UDP_DATA_P+tmp] = 0;
    2b44:	12 a6       	std	Z+42, r1	; 0x2a
			// use http_get_ip to convert ascii to hex 
			if ( http_get_ip ( (BYTE*)&rxtx_buffer[UDP_DATA_P+2], (BYTE*)&avr_ip ) == 4 )
    2b46:	2d e0       	ldi	r18, 0x0D	; 13
    2b48:	e2 2e       	mov	r14, r18
    2b4a:	21 e0       	ldi	r18, 0x01	; 1
    2b4c:	f2 2e       	mov	r15, r18
    2b4e:	b7 01       	movw	r22, r14
    2b50:	c6 01       	movw	r24, r12
    2b52:	8c 96       	adiw	r24, 0x2c	; 44
    2b54:	0e 94 b2 07 	call	0xf64	; 0xf64 <http_get_ip>
    2b58:	84 30       	cpi	r24, 0x04	; 4
    2b5a:	31 f4       	brne	.+12     	; 0x2b68 <udp_receive+0x26c>
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    2b5c:	a0 e0       	ldi	r26, 0x00	; 0
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	f7 01       	movw	r30, r14
    2b62:	18 2e       	mov	r1, r24
    2b64:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__eeprom_write_block_1C1D1E>
    2b68:	84 e0       	ldi	r24, 0x04	; 4
    2b6a:	a0 e0       	ldi	r26, 0x00	; 0
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	f7 01       	movw	r30, r14
    2b70:	18 2e       	mov	r1, r24
    2b72:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>
    2b76:	01 c0       	rjmp	.+2      	; 0x2b7a <udp_receive+0x27e>
				eeprom_write_block ( &avr_ip, ee_avr_ip, 4 );
			eeprom_read_block ( &avr_ip, ee_avr_ip, 4 );
		
			// Get server IP
			temp = tmp+1;
			while ( rxtx_buffer[UDP_DATA_P+tmp] != ';') tmp++;
    2b78:	0f 5f       	subi	r16, 0xFF	; 255
    2b7a:	f6 01       	movw	r30, r12
    2b7c:	e0 0f       	add	r30, r16
    2b7e:	f1 1d       	adc	r31, r1
    2b80:	82 a5       	ldd	r24, Z+42	; 0x2a
    2b82:	8b 33       	cpi	r24, 0x3B	; 59
    2b84:	c9 f7       	brne	.-14     	; 0x2b78 <udp_receive+0x27c>
			rxtx_buffer[UDP_DATA_P+tmp] = '\0';
    2b86:	12 a6       	std	Z+42, r1	; 0x2a
			// use http_get_ip to convert ascii to hex 
			if ( http_get_ip ( (BYTE*)&rxtx_buffer[UDP_DATA_P+temp], (BYTE*)&server_ip ) == 4 )
    2b88:	1f 5f       	subi	r17, 0xFF	; 255
    2b8a:	c6 01       	movw	r24, r12
    2b8c:	81 0f       	add	r24, r17
    2b8e:	91 1d       	adc	r25, r1
    2b90:	69 e0       	ldi	r22, 0x09	; 9
    2b92:	71 e0       	ldi	r23, 0x01	; 1
    2b94:	8a 96       	adiw	r24, 0x2a	; 42
    2b96:	0e 94 b2 07 	call	0xf64	; 0xf64 <http_get_ip>
    2b9a:	84 30       	cpi	r24, 0x04	; 4
    2b9c:	39 f4       	brne	.+14     	; 0x2bac <udp_receive+0x2b0>
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    2b9e:	ed e0       	ldi	r30, 0x0D	; 13
    2ba0:	f1 e0       	ldi	r31, 0x01	; 1
    2ba2:	a4 e0       	ldi	r26, 0x04	; 4
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	18 2e       	mov	r1, r24
    2ba8:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__eeprom_write_block_1C1D1E>
    2bac:	84 e0       	ldi	r24, 0x04	; 4
    2bae:	ed e0       	ldi	r30, 0x0D	; 13
    2bb0:	f1 e0       	ldi	r31, 0x01	; 1
    2bb2:	a4 e0       	ldi	r26, 0x04	; 4
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	18 2e       	mov	r1, r24
    2bb8:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__eeprom_read_block_1C1D1E>
				eeprom_write_block ( &avr_ip, ee_server_ip, 4 );
			eeprom_read_block ( &avr_ip, ee_server_ip, 4 );

			// send command response to client
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("SIOK\r\n"), 0 );
    2bbc:	40 e0       	ldi	r20, 0x00	; 0
    2bbe:	50 e0       	ldi	r21, 0x00	; 0
    2bc0:	61 e3       	ldi	r22, 0x31	; 49
    2bc2:	77 e0       	ldi	r23, 0x07	; 7
    2bc4:	79 c0       	rjmp	.+242    	; 0x2cb8 <udp_receive+0x3bc>
		}
		else
		{
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("ERROR\r\n"), 0 );
		}
	}
	// "WL" command is Write LCD command
	// "WL" command format is WL1111111111111111;2222222222222222;\r\n
	// 1111111111111111 is 1'st line character (variable length, max is 16)
	// 2222222222222222 is 2'nd line character (variable length, max is 16)
	// ';' end of character
	// \r\n is end of command
	// for example : WLHello World!;I'm AVRnet;\r\n
	else if ( rxtx_buffer[UDP_DATA_P] == 'W' && rxtx_buffer[UDP_DATA_P+1] == 'L')
    2bc6:	8c 91       	ld	r24, X
    2bc8:	87 35       	cpi	r24, 0x57	; 87
    2bca:	c1 f5       	brne	.+112    	; 0x2c3c <udp_receive+0x340>
    2bcc:	f6 01       	movw	r30, r12
    2bce:	83 a5       	ldd	r24, Z+43	; 0x2b
    2bd0:	8c 34       	cpi	r24, 0x4C	; 76
    2bd2:	a1 f5       	brne	.+104    	; 0x2c3c <udp_receive+0x340>
    2bd4:	ec 5a       	subi	r30, 0xAC	; 172
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	9a e2       	ldi	r25, 0x2A	; 42
	{
		// find \r\n
		for(tmp=UDP_DATA_P; tmp<UDP_DATA_P+128; tmp++)
		{
			if(rxtx_buffer[UDP_DATA_P+tmp]=='\r' && rxtx_buffer[UDP_DATA_P+tmp+1]=='\n')
    2bda:	80 81       	ld	r24, Z
    2bdc:	8d 30       	cpi	r24, 0x0D	; 13
    2bde:	19 f4       	brne	.+6      	; 0x2be6 <udp_receive+0x2ea>
    2be0:	81 81       	ldd	r24, Z+1	; 0x01
    2be2:	8a 30       	cpi	r24, 0x0A	; 10
    2be4:	21 f0       	breq	.+8      	; 0x2bee <udp_receive+0x2f2>
    2be6:	9f 5f       	subi	r25, 0xFF	; 255
    2be8:	31 96       	adiw	r30, 0x01	; 1
    2bea:	9a 3a       	cpi	r25, 0xAA	; 170
    2bec:	b1 f7       	brne	.-20     	; 0x2bda <udp_receive+0x2de>
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	92 2f       	mov	r25, r18
			{
				temp = 0;
				break;
			}
		}
		if(temp==0)
		{
			tmp=0;
			// find end of 1'st line and replace it with '\n'
			while( rxtx_buffer[UDP_DATA_P+tmp] != ';' ) tmp++;
    2bf4:	f6 01       	movw	r30, r12
    2bf6:	e2 0f       	add	r30, r18
    2bf8:	f1 1d       	adc	r31, r1
    2bfa:	82 a5       	ldd	r24, Z+42	; 0x2a
    2bfc:	2f 5f       	subi	r18, 0xFF	; 255
    2bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2c00:	8b 33       	cpi	r24, 0x3B	; 59
    2c02:	b9 f7       	brne	.-18     	; 0x2bf2 <udp_receive+0x2f6>
			rxtx_buffer[UDP_DATA_P+tmp] = '\n';
    2c04:	8a e0       	ldi	r24, 0x0A	; 10
    2c06:	82 a7       	std	Z+42, r24	; 0x2a
    2c08:	01 c0       	rjmp	.+2      	; 0x2c0c <udp_receive+0x310>
			// find end of 1'st line and replace it with '\0'
			while( rxtx_buffer[UDP_DATA_P+tmp] != ';' ) tmp++;
    2c0a:	9f 5f       	subi	r25, 0xFF	; 255
    2c0c:	f6 01       	movw	r30, r12
    2c0e:	e9 0f       	add	r30, r25
    2c10:	f1 1d       	adc	r31, r1
    2c12:	82 a5       	ldd	r24, Z+42	; 0x2a
    2c14:	8b 33       	cpi	r24, 0x3B	; 59
    2c16:	c9 f7       	brne	.-14     	; 0x2c0a <udp_receive+0x30e>
			rxtx_buffer[UDP_DATA_P+tmp] = '\0';
    2c18:	12 a6       	std	Z+42, r1	; 0x2a
			// print string to LCD
			lcd_putc ( '\f' );
    2c1a:	8c e0       	ldi	r24, 0x0C	; 12
    2c1c:	0e 94 8a 13 	call	0x2714	; 0x2714 <lcd_putc>
			lcd_print ( (BYTE*)&rxtx_buffer[UDP_DATA_P+2] );
    2c20:	c6 01       	movw	r24, r12
    2c22:	8c 96       	adiw	r24, 0x2c	; 44
    2c24:	0e 94 a6 13 	call	0x274c	; 0x274c <lcd_print>
			flag1.bits.lcd_busy = 1;
    2c28:	80 91 02 01 	lds	r24, 0x0102
    2c2c:	84 60       	ori	r24, 0x04	; 4
    2c2e:	80 93 02 01 	sts	0x0102, r24

			// send command response to client
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("WLOK\r\n"), 0 );
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	50 e0       	ldi	r21, 0x00	; 0
    2c36:	6a e2       	ldi	r22, 0x2A	; 42
    2c38:	77 e0       	ldi	r23, 0x07	; 7
    2c3a:	3e c0       	rjmp	.+124    	; 0x2cb8 <udp_receive+0x3bc>
		}
		else
		{
			dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("ERROR\r\n"), 0 );
		}
	}
	// "SL" command, is set LED1, LED2 command
	// "SL" command format is SL12\r\n
	// 1 is on/off command for LED1 '1' = ON, '0' = OFF
	// 2 is on/off command for LED2 '1' = ON, '0' = OFF
	// \r\n is end of command
	else if(rxtx_buffer[UDP_DATA_P]=='S' && rxtx_buffer[UDP_DATA_P+1]=='L' && rxtx_buffer[UDP_DATA_P+4]=='\r' && rxtx_buffer[UDP_DATA_P+5]=='\n')
    2c3c:	8c 91       	ld	r24, X
    2c3e:	83 35       	cpi	r24, 0x53	; 83
    2c40:	e1 f4       	brne	.+56     	; 0x2c7a <udp_receive+0x37e>
    2c42:	f6 01       	movw	r30, r12
    2c44:	83 a5       	ldd	r24, Z+43	; 0x2b
    2c46:	8c 34       	cpi	r24, 0x4C	; 76
    2c48:	c1 f4       	brne	.+48     	; 0x2c7a <udp_receive+0x37e>
    2c4a:	86 a5       	ldd	r24, Z+46	; 0x2e
    2c4c:	8d 30       	cpi	r24, 0x0D	; 13
    2c4e:	a9 f4       	brne	.+42     	; 0x2c7a <udp_receive+0x37e>
    2c50:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c52:	8a 30       	cpi	r24, 0x0A	; 10
    2c54:	91 f4       	brne	.+36     	; 0x2c7a <udp_receive+0x37e>
	{
		// on/off LED1
		if(rxtx_buffer[UDP_DATA_P+2]=='0')
    2c56:	84 a5       	ldd	r24, Z+44	; 0x2c
    2c58:	80 33       	cpi	r24, 0x30	; 48
    2c5a:	11 f4       	brne	.+4      	; 0x2c60 <udp_receive+0x364>
			LED_PORT |= _BV ( LED_PIN1 );
    2c5c:	ae 9a       	sbi	0x15, 6	; 21
    2c5e:	01 c0       	rjmp	.+2      	; 0x2c62 <udp_receive+0x366>
		else
			LED_PORT &= ~_BV ( LED_PIN1 );
    2c60:	ae 98       	cbi	0x15, 6	; 21
		// on/off LED2
		if(rxtx_buffer[UDP_DATA_P+3]=='0')
    2c62:	f6 01       	movw	r30, r12
    2c64:	85 a5       	ldd	r24, Z+45	; 0x2d
    2c66:	80 33       	cpi	r24, 0x30	; 48
    2c68:	11 f4       	brne	.+4      	; 0x2c6e <udp_receive+0x372>
			LED_PORT |= _BV ( LED_PIN2 );
    2c6a:	af 9a       	sbi	0x15, 7	; 21
    2c6c:	01 c0       	rjmp	.+2      	; 0x2c70 <udp_receive+0x374>
		else
			LED_PORT &= ~_BV ( LED_PIN2 );
    2c6e:	af 98       	cbi	0x15, 7	; 21
		// send command response
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("SLOK\r\n"), 0 );
    2c70:	40 e0       	ldi	r20, 0x00	; 0
    2c72:	50 e0       	ldi	r21, 0x00	; 0
    2c74:	63 e2       	ldi	r22, 0x23	; 35
    2c76:	77 e0       	ldi	r23, 0x07	; 7
    2c78:	1f c0       	rjmp	.+62     	; 0x2cb8 <udp_receive+0x3bc>
	}
	// added in V1.1 ==============================================================================
	// "RS" is software reset command
#ifndef REMOVE_BOOTLOADER_SUPPORT
	else if(rxtx_buffer[UDP_DATA_P]=='R' && rxtx_buffer[UDP_DATA_P+1]=='S' && rxtx_buffer[UDP_DATA_P+2]=='\r' && rxtx_buffer[UDP_DATA_P+3]=='\n')
    2c7a:	8c 91       	ld	r24, X
    2c7c:	82 35       	cpi	r24, 0x52	; 82
    2c7e:	c1 f4       	brne	.+48     	; 0x2cb0 <udp_receive+0x3b4>
    2c80:	f6 01       	movw	r30, r12
    2c82:	83 a5       	ldd	r24, Z+43	; 0x2b
    2c84:	83 35       	cpi	r24, 0x53	; 83
    2c86:	a1 f4       	brne	.+40     	; 0x2cb0 <udp_receive+0x3b4>
    2c88:	84 a5       	ldd	r24, Z+44	; 0x2c
    2c8a:	8d 30       	cpi	r24, 0x0D	; 13
    2c8c:	89 f4       	brne	.+34     	; 0x2cb0 <udp_receive+0x3b4>
    2c8e:	85 a5       	ldd	r24, Z+45	; 0x2d
    2c90:	8a 30       	cpi	r24, 0x0A	; 10
    2c92:	71 f4       	brne	.+28     	; 0x2cb0 <udp_receive+0x3b4>
	{
		// send command response
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("Y"), 0 );
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	50 e0       	ldi	r21, 0x00	; 0
    2c98:	61 e2       	ldi	r22, 0x21	; 33
    2c9a:	77 e0       	ldi	r23, 0x07	; 7
    2c9c:	c6 01       	movw	r24, r12
    2c9e:	0e 94 4f 14 	call	0x289e	; 0x289e <udp_puts_data_p>
    2ca2:	7c 01       	movw	r14, r24
		flag2.bits.software_reset = 1;
    2ca4:	80 91 01 01 	lds	r24, 0x0101
    2ca8:	82 60       	ori	r24, 0x02	; 2
    2caa:	80 93 01 01 	sts	0x0101, r24
    2cae:	08 c0       	rjmp	.+16     	; 0x2cc0 <udp_receive+0x3c4>
	}
#endif
	// end added in V1.1 ==========================================================================
	else
	{
		// unknown command, send "ERROR" to client
		dlength.word = udp_puts_data_p ( rxtx_buffer, PSTR("ERROR\r\n"), 0 );
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	50 e0       	ldi	r21, 0x00	; 0
    2cb4:	69 e1       	ldi	r22, 0x19	; 25
    2cb6:	77 e0       	ldi	r23, 0x07	; 7
    2cb8:	c6 01       	movw	r24, r12
    2cba:	0e 94 4f 14 	call	0x289e	; 0x289e <udp_puts_data_p>
    2cbe:	7c 01       	movw	r14, r24
	}

	// set ethernet header
	eth_generate_header (rxtx_buffer, (WORD_BYTES){ETH_TYPE_IP_V}, dest_mac );
    2cc0:	a5 01       	movw	r20, r10
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	78 e0       	ldi	r23, 0x08	; 8
    2cc6:	c6 01       	movw	r24, r12
    2cc8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <eth_generate_header>
	
	// generate ip header and checksum
	ip_generate_header (rxtx_buffer, (WORD_BYTES){sizeof(IP_HEADER)+sizeof(UDP_HEADER)+dlength.word}, IP_PROTO_UDP_V, dest_ip );
    2ccc:	8c e1       	ldi	r24, 0x1C	; 28
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	e8 0e       	add	r14, r24
    2cd2:	f9 1e       	adc	r15, r25
    2cd4:	94 01       	movw	r18, r8
    2cd6:	41 e1       	ldi	r20, 0x11	; 17
    2cd8:	b7 01       	movw	r22, r14
    2cda:	c6 01       	movw	r24, r12
    2cdc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <ip_generate_header>

	// generate UDP header
	udp_generate_header (rxtx_buffer, (WORD_BYTES){(rxtx_buffer[UDP_SRC_PORT_H_P]<<8)|rxtx_buffer[UDP_SRC_PORT_L_P]}, (WORD_BYTES){sizeof(UDP_HEADER)+dlength.word});
    2ce0:	ac ee       	ldi	r26, 0xEC	; 236
    2ce2:	bf ef       	ldi	r27, 0xFF	; 255
    2ce4:	ea 0e       	add	r14, r26
    2ce6:	fb 1e       	adc	r15, r27
    2ce8:	f6 01       	movw	r30, r12
    2cea:	62 a1       	ldd	r22, Z+34	; 0x22
    2cec:	83 a1       	ldd	r24, Z+35	; 0x23
    2cee:	77 27       	eor	r23, r23
    2cf0:	76 2f       	mov	r23, r22
    2cf2:	66 27       	eor	r22, r22
    2cf4:	99 27       	eor	r25, r25
    2cf6:	68 2b       	or	r22, r24
    2cf8:	79 2b       	or	r23, r25
    2cfa:	a7 01       	movw	r20, r14
    2cfc:	c6 01       	movw	r24, r12
    2cfe:	0e 94 5f 14 	call	0x28be	; 0x28be <udp_generate_header>

	// send packet to ethernet media
	enc28j60_packet_send ( rxtx_buffer, sizeof(ETH_HEADER)+sizeof(IP_HEADER)+sizeof(UDP_HEADER)+dlength.word );
    2d02:	82 e2       	ldi	r24, 0x22	; 34
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	e8 0e       	add	r14, r24
    2d08:	f9 1e       	adc	r15, r25
    2d0a:	b7 01       	movw	r22, r14
    2d0c:	c6 01       	movw	r24, r12
    2d0e:	0e 94 66 04 	call	0x8cc	; 0x8cc <enc28j60_packet_send>
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <udp_receive+0x420>

	return 1;
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	cd 5b       	subi	r28, 0xBD	; 189
    2d1e:	df 4f       	sbci	r29, 0xFF	; 255
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	ff 90       	pop	r15
    2d34:	ef 90       	pop	r14
    2d36:	df 90       	pop	r13
    2d38:	cf 90       	pop	r12
    2d3a:	bf 90       	pop	r11
    2d3c:	af 90       	pop	r10
    2d3e:	9f 90       	pop	r9
    2d40:	8f 90       	pop	r8
    2d42:	08 95       	ret

00002d44 <__udivmodhi4>:
    2d44:	aa 1b       	sub	r26, r26
    2d46:	bb 1b       	sub	r27, r27
    2d48:	51 e1       	ldi	r21, 0x11	; 17
    2d4a:	07 c0       	rjmp	.+14     	; 0x2d5a <__udivmodhi4_ep>

00002d4c <__udivmodhi4_loop>:
    2d4c:	aa 1f       	adc	r26, r26
    2d4e:	bb 1f       	adc	r27, r27
    2d50:	a6 17       	cp	r26, r22
    2d52:	b7 07       	cpc	r27, r23
    2d54:	10 f0       	brcs	.+4      	; 0x2d5a <__udivmodhi4_ep>
    2d56:	a6 1b       	sub	r26, r22
    2d58:	b7 0b       	sbc	r27, r23

00002d5a <__udivmodhi4_ep>:
    2d5a:	88 1f       	adc	r24, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	5a 95       	dec	r21
    2d60:	a9 f7       	brne	.-22     	; 0x2d4c <__udivmodhi4_loop>
    2d62:	80 95       	com	r24
    2d64:	90 95       	com	r25
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	08 95       	ret

00002d6c <__eeprom_read_byte_1C1D1E>:
    2d6c:	e1 99       	sbic	0x1c, 1	; 28
    2d6e:	fe cf       	rjmp	.-4      	; 0x2d6c <__eeprom_read_byte_1C1D1E>
    2d70:	bf bb       	out	0x1f, r27	; 31
    2d72:	ae bb       	out	0x1e, r26	; 30
    2d74:	e0 9a       	sbi	0x1c, 0	; 28
    2d76:	11 96       	adiw	r26, 0x01	; 1
    2d78:	0d b2       	in	r0, 0x1d	; 29
    2d7a:	08 95       	ret

00002d7c <__eeprom_read_block_1C1D1E>:
    2d7c:	f7 df       	rcall	.-18     	; 0x2d6c <__eeprom_read_byte_1C1D1E>
    2d7e:	01 92       	st	Z+, r0
    2d80:	1a 94       	dec	r1
    2d82:	e1 f7       	brne	.-8      	; 0x2d7c <__eeprom_read_block_1C1D1E>
    2d84:	08 95       	ret

00002d86 <__eeprom_write_block_1C1D1E>:
    2d86:	01 90       	ld	r0, Z+
    2d88:	03 d0       	rcall	.+6      	; 0x2d90 <__eeprom_write_byte_1C1D1E>
    2d8a:	1a 94       	dec	r1
    2d8c:	e1 f7       	brne	.-8      	; 0x2d86 <__eeprom_write_block_1C1D1E>
    2d8e:	08 95       	ret

00002d90 <__eeprom_write_byte_1C1D1E>:
    2d90:	e1 99       	sbic	0x1c, 1	; 28
    2d92:	fe cf       	rjmp	.-4      	; 0x2d90 <__eeprom_write_byte_1C1D1E>
    2d94:	bf bb       	out	0x1f, r27	; 31
    2d96:	ae bb       	out	0x1e, r26	; 30
    2d98:	0d ba       	out	0x1d, r0	; 29
    2d9a:	11 96       	adiw	r26, 0x01	; 1
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	e2 9a       	sbi	0x1c, 2	; 28
    2da2:	e1 9a       	sbi	0x1c, 1	; 28
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	08 95       	ret

00002da8 <_exit>:
    2da8:	ff cf       	rjmp	.-2      	; 0x2da8 <_exit>
